## warning about this code: even the variable names contain spoilers!
## so you may want to play through the game first.

start_at = nameless_lameness
start_theme = my_theme

game_settings {
   enable_standard_all_behaviour = false
   rewind_enabled   = true
   rollback_enabled = true
}

## we start with simplest defined then move to more complex

booleans {
   ## testing booleans
   in_debug : boolean "false" ;
   cheat_dont_require : boolean "false" ;

   ## meta-command/parser-warning booleans
   apostrophe_warn : boolean "false" ;
   credits_to_thanks_note : boolean "false" ;

   ## done once in-game booleans
   xme_twice : boolean "false" ;
   entered_seth_dentons : boolean "false" ;
   know_lush_shout : boolean "false" ;
   thor_explained_seth : boolean "false" ;
   summoned_teary_chimes : boolean "false"; # same as point_see_glimmering but it's confusing code that way
   have_asked_three : boolean "false" ;
   have_asked_four : boolean "false" ;
   poke_books_yet : boolean "false" ;

   ## game option booleans
   score_notify : boolean "true" ;
   tutorial_in_options : boolean "true" ;
   use_color_coding : boolean "true" ;

   ## game progress booleans
   tutorial_done : boolean "false" ;
   talked_to_thor : boolean "false" ;
   know_hold_bub : boolean "false" ;
   hill_aware_you_stole : boolean "false" ;
   noted_diagonal_direction : boolean "false" ;
   note_nonreciprocal: boolean "false" ;

   ## footnote check booleans
   footnotes_available : boolean "false" scope="survivor" ;
   ever_reveal_footnote : boolean "false" scope="survivor" ;
   ever_note_footnote : boolean "false" scope="survivor" ;
   reveal_this_footnote : boolean "false" ;
   history_footnote_found : boolean "false" scope="survivor" ; # I could look up footnote # (whichever its final # would be) but this is simpler

   ## verb notifications
   drop_referenced : boolean "false" ;
   jump_commands_notified : boolean "false" ;
   listen_no_subject_note : boolean "false" ;
   take_note : boolean "false" ;

   ## regular point tally booleans
   ## some of these are never referred to, or they are fundamentally the same as other game states, but I put them here to make sure the point totals add up
   point_go_west : boolean "false" ;

   point_first_base : boolean "false" ;
   point_bro_poor : boolean "false" ;
   point_player_rights : boolean "false" ;

   ## west tile (hub) goals, north then clockwise
   point_master_plan : boolean "false" ;
   point_chalice_map : boolean "false" ;
   point_fell_short : boolean "false" ;
   point_take_crackers : boolean "false" ;
   point_shift_goals : boolean "false" ;
   point_hunters_grill : boolean "false" ;
   point_fellow_yield : boolean "false" ;

   ## TQ goals, north then clockwise
   point_fly_score : boolean "false" ;
   point_bending_truth : boolean "false" ;
   point_boring_way: boolean "false" ;
   point_dirt_home : boolean "false" ;
   point_pouring_rain : boolean "false" ;
   point_funny_mountain : boolean "false" ;
   point_grim_tune : boolean "false" ;

   ## endgame points
   point_healing_still : boolean "false" ;
   point_gravel_trail : boolean "false" ;

   point_missing_house : boolean "false" ;
   point_see_glimmering : boolean "false" ;
   point_hi_mouse : boolean "false" ;

   ## bonus point tally booleans
   ## any time points first
   bonus_point_turkey_quest : boolean "false" ;
   bonus_point_theory_bore : boolean "false" ;

   ## first base
   bonus_point_shush_lout : boolean "false" ;
   bonus_rare_plights : boolean "false" ;

   ## bane place
   bonus_point_bane_place : boolean "false" ;
   bonus_point_death_sentence : boolean "false" ;

   ## the hubs
   bonus_point_test_wiles : boolean "false" ;
   bonus_point_beast_ranch : boolean "false" ;

   ## objects beyond the hubs
   bonus_point_racing_passions : boolean "false" ; ## w e
   bonus_point_so_long : boolean "false" ; ## e n
   bonus_point_vast_fission : boolean "false" ; ## e ne
   bonus_point_cease_purging : boolean "false" ; ## e e
   bonus_point_sane_role : boolean "false" ; ## e sw

   ## endgame bonus point
   bonus_point_cheery_times : boolean "false" ;

   ## "think" booleans: hub goals are alphabetical so it is not spoiled in-game
   think_chalice_map : boolean "false" ;
   think_fellow_yield : boolean "false" ;
   think_grim_tune : boolean "false" ;
   think_healing_still : boolean "false" ;
   think_hunters_grill : boolean "false" ;
   think_master_plan : boolean "false" ;
   think_shift_goals : boolean "false" ;
   think_hi_mouse : boolean "false" ; ## put endgame at end

   ## achievement booleans
   achieve_tyyt : boolean "false" scope="survivor" ;
   achieve_qwwq : boolean "false" scope="survivor" ;
   achieve_kssn : boolean "false" scope="survivor" ;
   achieve_cnnc : boolean "false" scope="survivor" ;
   achieve_ssss : boolean "false" scope="survivor" ;
   achieve_ssss_pre : boolean "false" scope="survivor" ;
   achieve_haih : boolean "false" scope="survivor" ;
   achieve_haih_pre : boolean "false" scope="survivor" ;
   achieve_tmmt : boolean "false" scope="survivor" ;
   achieve_tmmt_pre : boolean "false" scope="survivor" ;
   achieve_cjjc: boolean "false" scope="survivor" ;
   achieve_cjjc_pre: boolean "false" scope="survivor" ;
   achieve_dbbd: boolean "false" scope="survivor" ;
   achieve_cddc: boolean "false" scope="survivor" ;
   achieve_cddc_pre: boolean "false" scope="survivor" ;
   achieve_gssg: boolean "false" scope="survivor" ;
   achieve_srrs: boolean "false" scope="survivor" ;
   achieve_tnnt: boolean "false" scope="survivor" ;

   ## tutorial booleans, organized by order you see/do them in
   in_number_choice: boolean "true" ;
   in_tutorial: boolean "false" ;
   tutorial_1_about_done : boolean "false" ;
   tutorial_2_verbs_done : boolean "false" ;
   tutorial_3_additional_metaverb_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;
   tutorial_4_x_me_done : boolean "false" ;
   tutorial_inventory_cued : boolean "false" ;
   tutorial_5_inventory_done : boolean "false" ;
   tutorial_6_x_ask_done : boolean "false" ;
   tutorial_7_listen_done : boolean "false" ;
   tutorial_8_talk_voice_done : boolean "false" ;
   tutorial_9_go_west : boolean "false" ;
   tutorial_10_first_base : boolean "false" ;
   tutorial_item_taken: boolean "false" ;

   ## parser shortcut booleans
   look_warn: boolean "false" ;
   examine_warn: boolean "false" ;
   inventory_warn : boolean "false" ;
   long_word_warn : boolean "false" ;
}

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "10";
   score : integer "0" ;
   max_score : integer "23" ;
   points_left_side : integer "0" ;
   points_right_side : integer "0" ;
   bonus_score : integer "0" ;
   max_bonus_score : integer "14" ;
   confidence_meter : integer "2" ; ## yellow field, malice chap, trim goon
   tempint : integer "0" ;
   tempint2 : integer "0" ;
   hub_think_needed : integer "0" ;
   latest_warp_number : integer "-3" ; ## there are magic numbers here. -3 means not aware/done. -2 means there was no warp this turn. -1 means there was a warp try that faile and thus gets rejected.
   books_read : integer "0" ;

   ## since Adventuron doesn't allow survivor scope for lists, I need to define the status variables here.
   max_footnote_found : integer "0" scope="survivor";
   footnote_1_status : integer "0" scope="survivor" ;
   footnote_2_status : integer "0" scope="survivor" ;
   footnote_3_status : integer "0" scope="survivor" ;
   footnote_4_status : integer "0" scope="survivor" ;
   footnote_5_status : integer "0" scope="survivor" ;
   footnote_6_status : integer "0" scope="survivor" ;
   footnote_7_status : integer "0" scope="survivor" ;

}

collections {
   ask_list : list {
      items = [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
   };
   footnote_finding_list : list {
      items = [
         "<X ME two times<#0f0>>",
         "<XYZZY<#0f0>>",
         "<Visit either hub<#0f0>>",
         "<GO WEST for the first point<#0f0>>",
         "<First description for Plain Base<#0f0>>",
         "<Try going east from Plain Base<#0f0>>",
         "<Return to Thor after visiting Stealing Hill<#0f0>>"
      ]
   }
   footnote_hinting_list : list {
      items = [
         "<Try something again<#f00>>",
         "<Magic word<#f00>>",
         "{fnh}",
         "{fnh}",
         "{fnh}",
         "<Looking back, sort of<#f00>>",
         "{fnh}"
      ]
   }
   footnote_status_list : list {
      items = [
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
   };
   footnote_text_list : list {
      items = [
      "AFGNCAAP is a self-depreciating joke from Zork: Grand Inquisitor, meaning Ageless, Faceless, Gender Neutral, Culturally Ambiguous Adventure Person, to describe you. This was who you were throughout the Zork series.\n\"As good-looking as ever\" is the default response in Inform for {xme}. It's an inside joke among experienced players and programmers that anyone who leaves this in is a bit of a novice, and the rest of the game may be underimplemented.\nIt's a joke I like a lot, because I throw in a lot of AFGNCAAPs and also procrastinate implementing item descriptions. I've never really felt qualified to put forth a protagonist with a strong culture or heritage. Some people interpret this a solipsism. But I think it helps to focus on the puzzles.",
      "XYZZY is a sort of in-joke for parser players and programmers. Some love it and some hate it. It, along with other commands like PLUGH, YOHO and PLOVER, summoned a hollow voice saying \"FOOL!\" in the original Adventure.",
      "I originally based the hub names on the ease of finding spoonerisms. Then I changed the hub names to signs in Plain Base. You may've noticed that everything in West Tiles (formerly Quickie Trips) requires just switching leading letters, while East Branch requires both switching leading letters and changing letters after.\nAfter designing everything to decide which puzzles depended on which others, I also realized that five of West Tiles's puzzles depended on other puzzles, while only one of East Branch did. But I didn't want to uproot a whole game plan just to bring different puzzles together. So I left the quickie trips to be tricky in their own way and vice versa.",
      "I wanted the initial bit to be an escape-the-room, but I didn't want the verb to be too hard. I was drawing a blank until I thought of Hulk Handsome's game, Go West, which ... well, the title is a bit of a spoiler. Nah, I thought, I couldn't just copy that, and the Village People, and the Pet Shop Boys.\n\nBut I never thought of anything better, and besides, it made me laugh a bit. Also, Adventuron allowed for different sorts of syntax, so you can just type <W<#f80>>. I do enjoy getting and giving keyboard shortcuts.\nAlso, I encourage you to play his game, <In a Manor of Speaking<#f80>>, if you haven't, yet. It's very funny and fun.",
      "I'm proud of Seth Denton's, since the name itself doesn't quite make a spoonerism without the apostrophe, and it doesn't seem particularly ominous.\nOther names that need a plural include Sean Kent's conscience (if you don't pronounce it PRECISELY) and Fran Blake's bran flakes. Well, you can have one bran flake, but many of them as cereal would be more common.\nHearty Pat's came to mind as a store, too. But that's not a proper name.",
      "It's fun to reward the player for looking into things or even trying to break the game a bit. Here, though, and in the hub, I wanted to restrict movement to places you were done with, so you'd have less \"opportunity\" to wander down a dead end. Which can be fun for a bit, until it really, really isn't.",
      "I wanted to show the reader some non-reciprocal directions but not have them just because. The original hub maps were west and east of Thor, and the passage back was south. But this was one case where I wound up having to explain too much. Or having Thor explain too much."
      ]
   };
   jump_list : list {
      items = [
         1,
         0,
         0,
         0,
         0,
         1,
         0,
         0,
         0,
         0,
         1,
         0,
         0,
         0,
         0,
         1
      ]
   };
   jump_order_list : set {
      items = [
      ]
   };
   bad_jump : list {
      items = [
         0,
         1
      ]
   };
   jump_set : set {
   };
}

## strings

strings {

   tempstr: string "" ;
   tempstr2: string "" ;

   ## short stubs
   # meta verbs in orange
   abt : string "<ABOUT<#f80>>" ;
   cred : string "<CREDITS<#f80>>" ;
   exits : string "<EXITS<#f80>>" ;
   exitserr : dynamic_string {( is_beside "cheering_voice" ? "No, that's not the way out. Trial and error might get it. Or figuring what the voice really means." :
      (tutorial_6_x_ask_done && is_at "nameless_lameness") ? "You don't want to wandering off without any direction, but maybe that voice could offer a clue." :
      is_at "nameless_lameness" ? "In this nameless lameness, any move without figuring where to go could get you even more lost. You need some clue, first." :
      (is_at "burst_face") ? "It's still a bit blurry here. You sense there's another puzzle to solve before moving on." :
      (is_at "my_house") ? "You can only really go south, but there's no need, since you can just wrap things up here." :
      (is_at "plain_base" || is_at "stealing_hill") ? "There's no exit that way. Looking should re-list the exits." : "There are no hidden passages beyond. You can just go OUT to return to the hub." )} ;
   hint : string "<HINT<#f80>> or <HINTS<#f80>>" ;
   meta : string "<META<#f80>>" ;
   sco : string "<SCORE<#f80>>" ;
   thx : string "<THANKS<#f80>>" ;
   tx_ca : string "<Chris Ainsley<#0f0>>" ;
   tx_gf : string "<Garry Francis<#0f0>>" ;
   tx_ll : string "<Leon Lin<#0f0>>" ;
   tx_wc : string "<Wade Clarke<#0f0>>" ;
   verbs : string "<VERBS<#f80>>" ;

   # yes-or-no
   yn : string "<YES<#f88>>/<Y<#f88>> or <NO<#f88>>/<N<#f88>>" ;
   on : string "<ON<#f88>>" ;
   off : string "<OFF<#f88>>" ;

   # options in blue 00f
   ch : string "<CH<#88f>> or <COLORHINT<#88f>>" ;
   notif : string "<NOTIFY<#88f>>" ;
   tut : string "<TUTORIAL<#88f>>" ;

   # game title
   qt : string "<Quirky Test<#ff0>>" ;

   # regular commands in green
   ask : string "<ASK<#0f0>>" ;
   lishea : string "<LISTEN<#0f0>> or <HEAR<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;
   tak : string "<TAKE<#0f0>>" ;
   tlk : string "<TALK<#0f0>>" ; # tlk2 = tlk + or <T<#0f0>> (?)

   # warp commands in orange
   v_pb : string "<PB<#f80>>" ;
   v_wt : string "<WT<#f80>>" ;
   v_sh : string "<SH<#f80>>" ;
   v_eb : string "<EB<#f80>>" ;

   # tutorial stuff in purple
   tnote : string "<TUTORIAL NOTE:<#f0f>> " ;
   tcue : string "<TUTORIAL CUE:<#f0f>> " ;
   otn : string "<ONE-TIME NOTE:<#f0f>> " ;

   ## honorary tutorial variable
   footnote_cue : string "<FOOTNOTE<#f80>> # or, for brevity, <F<#f80>> #" ;

   ## dynamic strings

   YN_or_12 : dynamic_string {( in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}

   my_score : dynamic_string {( score + "/" + max_score )}
   notify_string : string {( "You need to specify " + notif + " " + yn + " for score notification changes." )}

   unknown_begin_note : dynamic_string {( point_first_base ? "" : ", though special commands are cued in puzzles throughout {qt}" )}
   bonus_score_string : dynamic_string {( "Your <bonus score<#f80>> is " + bonus_score + " out of <" + max_bonus_score + "<#f00>>." )}

   ## description strings by location

   boor_or_not : dynamic_string {( is_beside("pro_boor") ? (is_first_entered() ? "The pro boor starts blustering away." : "The Pro Boor stands around, continuing to bluster. You're not sure if they want an argument or an audience. You are sure it'd be nice to get rid of them.") : "It's quieter here with the Pro Boor gone, but you still aren't sure why you're here. Figuring {cc_prayer_lights}'s main secret may help." )} ;
   lush_shout_note : dynamic_string {( bonus_point_shush_lout ? "quieter for being shushed but still pushy" : "with many a lush shout" )} ;

   describe_beery_thor : dynamic_string {( is_first_entered() ? "A man twice your size stands here. \"Glad you made it! I'm Beery Thor. I sent you that message. I'd love to {tlk} about what to do and see here.\"" : "Beery Thor stands here, smiling, waiting " + (talked_to_thor ? "for you to {ask} about any of the rules in the Player's Bill of Rights." : "to {tlk} whenever, about whatever.") )} ;
   describe_seth_denton : dynamic_string {( is_beside "seth_dentons" ? "\nAn establishment called Seth Denton's is off to the side here. You have a feeling you don't want to ENTER, and maybe you can figure why.{footnote_reveal_text}" : "" )} ;
   describe_gravel_trail : dynamic_string {( point_gravel_trail ? ", and your travel grail opened up a path north" : ", and it seems weirdly fuzzy north, as if something should be there but isn't" )} ;

   sub_hub: dynamic_string {( "Here in the " + (is_at "west_tiles" ? "west" : "east" ) + " mini-hub, you can go south back to the plain base or " + (has_visited("stealing_hill") ? "back to the stealing hill" : "up to a hill") + ".\n{spokes_left}" )};
   spokes_word: dynamic_string {( tempint == 6 ? "one" :
      tempint == 5 ? "two" :
      tempint == 4 ? "three" :
      tempint == 3 ? "four" :
      tempint == 2 ? "five" :
      tempint == 1 ? "six" :
      "(error, bug, {tempint})"
      )};
   spokes_left: dynamic_string {( tempint == 0 ? "You haven't gotten anything yet from any of the seven outward spokes here. (South" + (is_at("east_branch") ? "west" : "east") + " leads back to the hub.)" : (tempint == 7 ? "You've taken care of business in all the side areas here." : "You still need to take care of things in {spokes_word} of the seven planar directions.") )};

   ## west tiles seeding for dynamic strings, starting north and going clockwise
   hub_w_plaster_man : string "A {cc_plaster_man} stands here. Perhaps there is something inside it." ;
   hub_w_master_plan : string "With the plaster man destroyed, there's not much left here." ;
   hub_w_malice_chap : string "You feel the malice here from the {cc_malice_chap}." ;
   hub_w_chalice_map : string "You got the chalice map here. There can't really be anything left to do." ;
   hub_w_shell_fort : string "A {cc_shell_fort} sits here. It occasionally fires rounds that get close to you. While there's no danger of you getting hit, it's still annoying and gets in the way of trying to find anything." ;
   hub_w_fell_short : string "The shell fort lies barren now. You even ransacked it for rations." ;
   hub_w_cake_trackers : string "{cc_cake_trackers} mope about here, looking for cake, mumbling about how they only have boring food to eat. They are nonspecific about what boring food it is, but maybe you can figure that out." ;
   hub_w_take_crackers : string "Man! Those folks sure had a lot of crackers. But they were greedy and wanted cake. You've taken all you possibly need, and there are still several boxes left over." ;
   hub_w_gift_shoals : string "{cc_gift_shoals} are here. Yet no matter how many gifts they wash up, you don't see anything you like." ;
   hub_w_shift_goals : string "The shoals seem more peaceful now that you have fixed your mindset." ;
   hub_w_grunters_hill : string "Grunts from a big hill, here. That must make it a {cc_grunters_hill}. It's like people are trying to forage for food, but of course their grunts scare off prey. Said grunts are mainly about not having enough food." ;
   hub_w_hunters_grill : string "Well, you've had your feast, and it was delicious. It's filled you up for the journey ahead. Hanging around here wouldn't burn any calories, so you should probably get going." ;
   hub_w_yellow_field : string "Someone is blocking you here in this {cc_yellow_field}. Why, or from what, you're not sure." ;
   hub_w_fellow_yield : string "The yellow field is pretty to look at, but there's nobody and nothing here that can help you further." ;

   ## east branch seeding for dynamic strings, starting north and going clockwise
   hub_e_sky_floor : string "The {cc_sky_floor} here gives you poetic thoughts. Well, maybe not quite poetic, maybe wordless. You're not quite sure, but when you figure it out, you're sure you'll think up something cool." ;
   hub_e_fly_score : string "It was inspirational to think up a neat little tune here, but you realize you want to share it." ;
   hub_e_trending_booth : string "A {cc_trending_booth} sits here, spouting all sorts of things you can and should be doing that are more exciting than silly old text adventuring. The arguments seem convincing, and yet ..." ;
   hub_e_bending_truth : string "Noise continues to emanate from the trending booth, but you sort of recognize a lot of its rhetorical tricks, so you can ignore it and leave when you want." ;
   hub_e_warring_bay : string "You don't know how or why a war started in this {cc_warring_bay}. Everyone seems quite excited to be dedicated to their own cause, whatever it is." ;
   hub_e_boring_way : string "Well, you made this a boring way. You feel content having contributed to peace, but all the same, this being a boring place, you can't imagine having anything interesting to do here." ;
   hub_e_hurt_dome : string "A {cc_hurt_dome} sits here. Fortunately, it just looks hurt and doesn't seem to want to actively hurt anyone or anything. But it'd still be nice to make sure." ;
   hub_e_dirt_home : string "The dirt home you summoned stands here, infinitely less menacing than its previous form." ;
   hub_e_roaring_pain : string "You feel {cc_roaring_pain}. While there's some shelter here from above, it doesn't help with the internal stuff." ;
   hub_e_pouring_rain : string "The shelter keeps you safe from the pouring rain, which shows no sign of letting up. Probably just have to make a run for it when you can." ;
   hub_e_money_fountain : string "A {cc_money_fountain} is here. People dive in, trying to get the money, but they somehow come up empty. It's very upsetting and soul-draining for them." ;
   hub_e_funny_mountain : string "A mountain with a cheery face somehow carved in its side makes all who walk by laugh or smile as they go on their day. It helps you, too, though you recognize true happiness is a journey that extends away from here, and the mountain just gives a temporary boost." ;
   hub_e_trim_goon : string "A {cc_trim_goon} sits here, ready to rough you up if provoked. Fortunately, you've given them no cause, but boy, it'd be fun to tweak them and win a psychological victory. You suspect it's what Thor would want." ;
   hub_e_grim_tune : string "You sit and bask in the area, now barren, which only reinforces the grim tune you whipped up. You see, with some modifications, it could work against non-physical cruelty." ;

   ## details for hub items
   confidence_level : dynamic_string {( confidence_meter == 2 ? "peak" : "some" )} ;
   map_and_plan : dynamic_string {( point_chalice_map && point_master_plan ? "The chalice map and master plan seem to fit together well. They'll help when you need them, without having to do anything fancy." : "You sense you may need something else to make full sense of it."
      )} ;

   ## stealing hill
   stealing_hill_desc: dynamic_string {( point_healing_still ? "The stealing hill seems quiet, for now, but it will probably figure someone stole its grail, eventually." : "A {cc_stealing_hill} glares at you (the hills have eyes, you know) as if to say, you're not getting anything useful from it! And yet, there's so much junk lying around, if you know what to get and have a plan to get there, you can nab it quickly."
   )};
   loc_stealing_hill : dynamic_string {( "THE STEALING HILL\n{stealing_hill_desc}\nYou can go " + ( has_visited("west_tiles") ? "back west to West Tiles" : "west" ) + " or " + ( has_visited("east_branch") ? "back east to East Branch" : "east" ) + "." )};
   stealing_hill_mad: dynamic_string {( "You don't have any reason to risk the full wrath of the stealing hill. You got something useful" + (point_gravel_trail ? "" : ", you're pretty sure") + "." )} ; ## remove qualifier only when you used the travel grail

   gravel_trail_house : dynamic_string {(
      point_missing_house ? ", or you can go NORTH inside the house you made" : ""
   )};

   my_house_description : dynamic_string {( point_see_glimmering ? "Stuff is glimmering all around, and maybe the ring is somewhere, but you'll never reach it on your own. Boy, {cc_my_house} being this big is a problem{chimes_present}." : "{cc_glee_simmers} here as you think, yes, this really is {cc_my_house}! It has a bookshelf and everything!\nAnd yet, owning a house is nice and all, but ... what about Thor's quest? You glance again at your inventory."
   )};

   book_is : dynamic_string {(
      books_read == 16 ? "The last book is" :
      books_read == 0 ? "The first book is" :
      "The next book is"
   )} ;

   chimes_present : dynamic_string {(
      (point_see_glimmering && !bonus_point_cheery_times) ? ". You hear teary chimes, too" : ""
   )};

   ## color code stuff

   ## intro first
   cc_whoa_guest : dynamic_string {( use_color_coding ? "<\"Whoa! Guest!\"<#f88>>" : "\"Whoa! Guest!\"" )} ;
   cc_burst_face : dynamic_string {( use_color_coding ? "<burst face<#f88>>" : "burst face")} ;
   cc_hold_bub : dynamic_string {( use_color_coding ? "<HOLD, BUB<#f88>>" : "HOLD, BUB")} ;

   cc_prayer_lights : dynamic_string {( use_color_coding ? "<Prayer Lights<#f88>>" : "Prayer Lights" )} ;

   ## west hub
   cc_plaster_man : dynamic_string {( use_color_coding ? "<plaster man<#f88>>" : "plaster man" )} ;
   cc_malice_chap : dynamic_string {( use_color_coding ? "<malice chap<#f88>>" : "malice chap" )} ;
   cc_shell_fort : dynamic_string {( use_color_coding ? "<shell fort<#f88>>" : "shell fort")} ;
   cc_cake_trackers : dynamic_string {( use_color_coding ? "<Cake trackers<#f88>>" : "Cake trackers")} ;
   cc_gift_shoals : dynamic_string {( use_color_coding ? "<Gift shoals<#f88>>" : "Gift shoals")} ;
   cc_grunters_hill : dynamic_string {( use_color_coding ? "<grunters' hill<#f88>>" : "grunters' hill")} ;
   cc_yellow_field : dynamic_string {( use_color_coding ? "<yellow field<#f88>>" : "yellow field")} ;

   ## east hub
   cc_sky_floor : dynamic_string {( use_color_coding ? "<sky floor<#f88>>" : "sky floor")} ;
   cc_trending_booth : dynamic_string {( use_color_coding ? "<trending booth<#f88>>" : "trending booth")} ;
   cc_warring_bay : dynamic_string {( use_color_coding ? "<warring bay<#f88>>" : "warring bay")} ;
   cc_hurt_dome : dynamic_string {( use_color_coding ? "<hurt dome<#f88>>" : "hurt dome")} ;
   cc_roaring_pain : dynamic_string {( use_color_coding ? "<roaring pain<#f88>>" : "roaring pain")} ;
   cc_money_fountain : dynamic_string {( use_color_coding ? "<money fountain<#f88>>" : "money fountain")} ;
   cc_trim_goon : dynamic_string {( use_color_coding ? "<trim goon<#f88>>" : "trim goon")} ;

   ## endgame
   cc_stealing_hill : dynamic_string {( use_color_coding ? "<stealing hill<#f88>>" : "stealing hill")} ;
   cc_travel_grail : dynamic_string {( use_color_coding ? "<travel grail<#f88>>" : "travel grail")} ## may not be used
   cc_hissing_mouse : dynamic_string {( use_color_coding ? "<hissing mouse<#f88>>" : "hissing mouse")} ;
   cc_glee_simmers : dynamic_string {( use_color_coding ? "<Glee simmers<#f88>>" : "Glee simmers")} ;
   cc_my_house : dynamic_string {( use_color_coding ? "<my house<#f88>>" : "MY HOUSE")} ;

   ## footnote notifications and other dynamic strings
   footnote_reveal_text : dynamic_string {( reveal_this_footnote ? " <(FOOTNOTE " + tempint + ")<#f80>>" : "" )} ;
   fnh : string "<(must be done to win game)<#f00>>" ;

   achievement_tyyt : string "<Too Yacky: You, Tacky<#f80>>" ;
   achievement_qwwq : string "<Quell-Worrying-Well Querying<#f80>>" ;
   achievement_kssn : string "<Knowin' Stuff, Stowin' 'Nuff<#f80>>" ;
   achievement_cnnc : string "<Clever! Nap? Never! (Clap!)<#f80>>" ;
   achievement_ssss : string "<So Slick! Slow? Sick!<#f80>>" ;
   achievement_haih : string "<Hi, All I Haul<#f80>>" ;
   achievement_cjjc : string "<Chump, Joke Jump? Choke<#f80>>" ;
   achievement_tmmt : string "<Throw Me Mo': Three<#f80>>" ;
   achievement_dbbd : string "<Did-Buzzin'-Bid? Dozen<#f80>>" ;
   achievement_cddc : string "<Cousin, Draft Dozen-Craft<#f80>>" ;
   achievement_gssg : string "<Great Style, Straight Guile<#f80>>" ;
   achievement_srrs : string "<Second Revvin' Reckoned? Seven<#f80>>" ;
   achievement_tnnt : string "<Totes Need Notes Teed<#f80>>" ;

   rttr: string "<Rare-Thing-There Ring<#a33>>" ;
}

## Objects with vocabulary

objects {
  ## pedagogical stuff
   ooh_task : object "Ooh Task to Ask ('Ooh Task')" msg="It is a request to find the {rttr}.";
   prayer_lights : object "{cc_prayer_lights}" msg="It's a weird book. It seems slightly in code. It's like it's not talking about what it's really talking about, and you need to figure that out.";

  ## scenery
  cheering_voice : scenery "cheering voice" msg="It gives a cheery {cc_whoa_guest}" conspicuous="false";
  seth_dentons : scenery "Seth Denton's" msg="It looks forbidding, but you're not sure why." at="plain_base" conspicuous="false";

   ## NPC(s)
   beery_thor : scenery "Beery Thor" msg="Big and strong and friendly." at = "plain_base" conspicuous="false";
   pro_boor : scenery "A pro boor" msg="Seems upset about anything and everything." at = "first_base" conspicuous="false";
   hissing_mouse: scenery "A hissing mouse" at= "gravel_trail" conspicuous="false" ;

   ## hub side items that get used
   ## start in the west, going clockwise
   chalice_map : object "chalice map" msg="You're not sure where it leads.\n{map_and_plan}" ; ## from malice chap
   master_plan : object "master plan" msg="It's written in clear language.\n{map_and_plan}" ; ## from plaster man
   pacing_rations : object "pacing rations" msg="Very sensible rations for any sort of long journey, obviously completely well-thought-out and unemotional and stuff." ; ## from shell fort
   crackers : object "Crackers" msg="More crackers than you could ever want." ; ## from cake trackers
   focus : object "focus" msg="It's hard to focus on your focus, but you know you have it, since you feel less distracted by what doesn't matter." ; ## from gifting shoals
   meal_dude : object "fed, sated" msg="You had quite a meal, dude." ; ## from grunters' hill
   confidence : object "Confidence" msg="You have {confidence_level} confidence from outwitting some obnoxious people." ; ## from yellow field / trim goon
   low_song : object "low song" msg="They're notes to a song." ; ## fly score
   fast_vision : object "a fast vision" msg="You had a fast vision of how to be more persuasive, and it's stayed steadfast." ; ## trending booth
   peace_surging : object "peace surging" msg="You feel peace surging within you." ; ## warring bay
   trial_pics : object "trial pics (of the dirt home)" msg="You have some trial pics of the dirt home. They maybe aren't great if you wanted to sell it. But maybe you could find a way to embellish them." ;
   rain_soul : object "rain soul" msg="You feel rain in your soul, which makes you feel you've lived a little and still have things worth working out." ;
   no_greed : object "no greed" msg="You feel as though you have no greed." ;

   ## post-hub
   travel_grail : object "Travel Grail" msg="It doesn't look that valuable, but perhaps it can find somewhere new." ;
   teary_chimes : object "teary chimes" msg="The teary chimes wave in some unseen wind, making small pleasant musical noises." ;
   bookshelf : scenery "a bookshelf" at="my_house" conspicuous="false" ;

}

# end objects

vocabulary {
   : noun / aliases = [ooh, task, ask]
   : noun / aliases = [voice, veering, choice, cheery, cheering]
   : noun / aliases = [hill, hills]
   : noun / aliases = [hunter, hunters]
   : noun / aliases = [grunter, grunters]
   : noun / aliases = [fission, fishin]
   : noun / aliases = [surge, surging]
   : noun / aliases = [purge, purging]
   : noun / aliases = [book, books, bookcase, shelf, bookshelf]
   : noun / aliases = [no, n]
   : noun / aliases = [yes, y]
   : verb / aliases = [ab, about]
   : verb / aliases = [ask, rule]
   : verb / aliases = [f, foot, footnote, footnotes]
   : verb / aliases = [glimmer, glimmers, glimmering]
   : verb / aliases = [ch, colorhint]
   : verb / aliases = [exit, out]
   : verb / aliases = [listen, hear]
   : verb / aliases = [hi, high]
   : verb / aliases = [not, noti, notif, notify]
   : verb / aliases = [t, talk]
   : verb / aliases = [tx, thx, thank, thanks, credits]
   : verb / aliases = [opt, opts, option, options]
   : verb / aliases = [tut, tutorial]
   : verb / aliases = [verb, verbs]
}

# end vocabulary

## Locations and location-specific parser rules

locations {
   nameless_lameness : location "You are surrounded by nameless lameness. It's all very, very grey. You can't really see much beyond yourself. But you need to start somewhere." {
      on_command {
         : if (is_beside "cheering_voice") {
            : match "t -;t voice" {
               : set_true "tutorial_8_talk_voice_done" ;
               : increment "tutorial_score" ;
               : print "You get no response from the voice, which is not surprising. It seems powerful, and it probably comes from afar. But it was worth a try. Perhaps you will get a better response from people or things closer by." ;
               : done ;
            }
         }
         : if (verb_is "i" && is_carried "ooh_task" ) {
            : mask {
               : if (!tutorial_5_inventory_done) {
                  : set_true "tutorial_5_inventory_done" ;
                  : increment "tutorial_score" ;
               }
            }
         }
         : if ((verb_is "inventory") && in_tutorial && !tutorial_4_x_me_done) {
            : print "Taking inventory is a good thing to do early in a text adventure, but we're not there yet in the tutorial. Once you've found an item, the tutorial will nudge you to do take inventory.";
         }
         : match "listen _" {
            : if (tutorial_6_x_ask_done) {
               : print "You hear a voice. It's a happy one. For whatever reason, you mark it up as a Veering Choice Cheering Voice. It greets you, sort of, with a {cc_whoa_guest} You'd like to see where it's from. But which direction is that?" ;
               : set_true "tutorial_7_listen_done" ;
               : increment "tutorial_score" ;
               : create "cheering_voice" ;
               : update_graphic ;
               : done ;
            }
         }
         : match "x me" {
            : if (in_tutorial && (!tutorial_1_about_done || !tutorial_2_verbs_done || !tutorial_3_additional_metaverb_done)) {
               : print {( "While " + xme + " is a useful command, and one you'll be using in this tutorial, we're a bit on rails. There are meta-commands to acquaint yourself with first." )};
            }
            : else_if (is_carried "ooh_task") {
               : set_integer var="tempint" "1" ;
               : gosub "footnote_reveal" ;
               : print "As AFGNCAAPy as ever!{footnote_reveal_text}" ;
               : if (is_at("nameless_lameness") && !xme_twice) {
                  : print "Also, just to make sure, you stumble about a bit to make sure nothing else interesting is lying around. It is not." ;
                  : set_true "xme_twice" ;
               }
            }
            : else {
               : pocket "ooh_task" ;
               : print "You search yourself, wondering if you forgot something, and hoping something will turn up. You stumble around a bit as you do so, and you kick something. It's a rolled-up parchment. You unroll it. It has <Ooh, Task to Ask<#88f>> in big letters." ;
               : print "Well, that's a start! You're not sure how or why it got here, but all the same, you're glad you might have some direction, now." ;
               : if (!tutorial_4_x_me_done) {
                  : set_true "tutorial_4_x_me_done";
                  : increment "tutorial_score" ;
               }
            }
         }
      }
      on_describe {
         : set_false "in_number_choice" ;
         : if ( is_beside "cheering_voice") {
            : print "The cheering voice still floats around. You can {lishea} it.";
         }
         : else_if (is_carried "ooh_task" && tutorial_6_x_ask_done) {
            : print "But it's no longer silent. Perhaps you can {lishea}.";
         }
      }
      on_tick {
         : if (is_carried "ooh_task" && !tutorial_6_x_ask_done && noun1_is "task" ) {
            : print "But the ring's probably not here. Where can you go? You feel you are stumbling around. You hear the silence shattered. Perhaps you can use one of your senses and pick up a clue." ;
            : set_true "tutorial_6_x_ask_done" ;
            : increment "tutorial_score" ;
         }
      }
   };
   burst_face : location "You're at a {cc_burst_face}. You feel about ready to take an initial step. Or you would, without that {cc_burst_face} in the way." graphic = "burst_face_only" {
      on_command {
         : match "east _" {
            : set_integer var="tempint" "6" ;
            : gosub "footnote_reveal" ;
            : print {( "There's no way back. Not that you'd want to go back. Anyway, Thor would probably just yank you back from your trip back. He's bigger than you.{footnote_reveal_text}" )} ;
         }
         : match "first base" {
            : print "You hear a slow rumbling as the burst face bursts for good. You think you see a way forward ... but before you know it, you're confronted by someone who introduces themselves as a pro boor! They warn you against going forward, because that way, pointlessness lies.";
            : set_true "point_first_base" ;
            : set_true "tutorial_10_first_base" ;
            : increment "tutorial_score" ;
            : gosub "add_point" ;
            : goto "first_base" ;
            : press_any_key ;
            : gosub "tutorial_shutoff" ;
            : redescribe ;
            : done ;
         }
         : match "first _;_ base" {
            : gosub "say_half" ;
            : done ;
         }
         : match "talk -; talk face" {
            : print "The {burstface} reveals no clues." ;
         }
         : match "listen _" {
            : print "The {burstface} reveals no clues." ;
         }
      }
   };
   first_base : location "Now you're getting somewhere! You think.\n{boor_or_not}" {
      on_command {
         : if (is_carried "prayer_lights") {
            : match "rare plights" {
               : if (!bonus_rare_plights) {
                  : print "You read about people's complaints. Some seem common and some seem exotic indeed. People hard done by mentally, physically, and financially. Their problems seem more interesting and exciting than yours. You know it's important to care about this sort of thing, and yet, there must be something else in {cc_prayer_lights}, something more uplifting, perhaps a justification you deserve more, even if you have a fun game like this to play." ;
                  : set_true "bonus_rare_plights" ;
                  : gosub "add_bonus" ;
               } : else {
                  : print "Not again. You want to search for something more positive now." ;
               }
               : done ;
            }
            : match "player rights" {
               : if (!point_player_rights) {
                  : print "Yes. It makes sense. A few things still seem a bit hidden, and shockingly, after ten pages, the writing turns to Norse runes! You're helpless here, not having played Ultima IV for a good long while. But you're curious: a game should be a game, and you should be grateful for any game at all, right? Asking for more seems pushy.\n\nYou look around and listen. You hear something in the distance -- it sounds like the voice that said {cc_whoa_guest}!\nYou walk towards it." ;
                  : press_any_key ;
                  : set_true "point_player_rights" ;
                  : gosub "add_point" ;
                  : goto "plain_base" ;
                  : destroy "prayer_lights" ;
                  : redescribe ;
               }
               : done ;
            }
         }
         : if (is_beside("pro_boor")) {
            : match "listen -;listen boor" {
               : print "You're listening enough without trying. You just wish you could have a pithy comment, appropriate to your interlocutor, to brush them off." ;
               : done ;
            }
            : match "talk -;talk boor" {
               : print "The {cc_pro_boor} is not up for a conventional chat. Perhaps an appropriate verbal riposte would work." ;
               : done ;
            }
         } : else {
            : match "listen _;talk _" {
               : print "It's mercifully silent, now, with nobody to talk to, and you like that. Time to figure out what {cc_prayer_lights} is REALLY all about." ;
            }
         }
         : match "bro poor" {
            : if (!point_bro_poor) {
               : print "The Pro Boor looks taken aback. They don't need this nonsense. If you want to go forward and suffer some boring game where you don't get to shoot or beat up anyone, that's your business. They can't stop you. You yourself are not worth shooting or beating up. But all the same, they shove a something into your hands, a note of what you're getting into. It's titled {cc_prayer_lights}. Which doesn't seem QUITE right.";
               : set_true "point_bro_poor" ;
               : destroy "pro_boor" ;
               : pocket "prayer_lights" ;
               : gosub "add_point" ;
               : update_graphic ;
               : done ;
            }
            : print "You permit yourself a touch of schadenfreude. Why not?" ;
            : done ;
         }
         : if (!point_bro_poor) {
            : match "bro _;_ poor" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (is_beside "pro_boor" ) {
            : match "talk -;talk boor" {
               : print "The pro boor babbles on about what a REAL quest is, {lush_shout_note}, disappointed you don't immediately agree." ;
               : set_true "know_lush_shout" ;
               : done ;
            }
         }
         : if (know_lush_shout) {
            : match "shush lout" {
               : if (!bonus_point_shush_lout) {
                  : print "The pro boor takes exception to this. Being called a lout is one thing, but being told to talk a bit less is unforgivable! Nevertheless, they do seem to quiet down a bit. Though to get rid of them, perhaps you need to take a different sort of dig. A more direct one." ;
                  : set_true "bonus_point_shush_lout" ;
               } : else {
                  : print "You're not going to quiet the pro boor any further. How to get rid of them?" ;
               }
            }
         }
      }
   };
   plain_base : location "You are in a plain base. While it's rather plain, it links to other places that look more interesting. You notice paths that start off east and west, though they seem to bend away{describe_gravel_trail}. You don't see any way back to the burst face.{describe_seth_denton}\n{describe_beery_thor}" {
      on_command {
         : match "listen _" {
            : print {( "Thor has a lot you could listen to. Just " + (talked_to_thor ? tlk : ask) + "." )} ;
            : done ;
         }
         : match "talk -;talk thor" {
            : if (talked_to_thor) {
               : print "Now you've broken the ice, probably better to {ask} him about one of the rules, 1-17." ;
            } : else {
               : print "\"So, yes, about the Player Rights. Fella name a' Graham Nelson wrote 'em, over thirty years ago now. About what players could and should expect from a game. So it feels challenging but not unfair, and you get your money's and time's worth. It's held up well. There were seventeen total rules. Some apply here more than other. You can {ask} me about them by number, or <RULE<#0f0>> works, too. I have three things to say about each rule: the original idea, what it means and why it's there, and how it applies here.\"" ;
            }
            : set_true "talked_to_thor" ;
            : done ;
         }
         : if (is_beside "seth_dentons") {
            : match "talk seth" {
               : print "Thor's conversation would be much more interesting and sane." ;
            }
            : match "death sentence" {
               : print "\"Yes, that's it. This is one of those traps where you're given adequate warning that going somewhere might kill you.\"";
               : set_true "bonus_point_death_sentence" ;
               : destroy "seth_dentons" ;
               : gosub "add_bonus" ;
            }
            : match "x seth" {
               : print "Very seedy looking. Even its name, though common, seems ominous for some reason.";
               : gosub "thor_on_seth" ;
               : done ;
            }
            : match "enter _" {
               : if (entered_seth_dentons) {
                  : print "Nope, not again. Maybe you can figure the secret Beery Thor said it had." ;
               } : else {
               : print "It's a seedy place, it is. You are captured and put on trial. It looks bad for you, but before the verdict is rendered, Beery Thor clatters in and makes an argument that befuddles the courtroom.\n\"You're not the first person to try that,\" says Beery Thor., \"And I don't blame you." ;
               : gosub "thor_on_seth" ;
               : set_true "entered_seth_dentons" ;
               }
            }
         }
         : match "ask _" {
            : gosub "ask_thor" ;
         }
      : if (!noted_diagonal_direction) {
         : match "nw _;ne _" {
            : mask {
               : gosub "note_diagonal_direction_from_hub" ;
               }
         }
      }
      : match "plain base" { # no say_half for a bonus point
         : if (!bonus_point_bane_place) {
            : print "Thor chuckles a bit. \"Very observant. Yes, plain, but it does the job.\"";
            : gosub "add_bonus" ;
            : set_true "bonus_point_bane_place" ;
         } : else {
            : print "You already pointed out the, uh, functionality of this location. Don't be a rude guest.";
         }
         : done ;
      }
      }
      on_describe {
         : if (!note_nonreciprocal && has_visited("stealing_hill")) {
            : set_integer var="tempint" "7" ;
            : gosub "footnote_reveal" ;
            : print "\"Oh, so you've been to the hill,\" says Thor. \"I hope the directions didn't turn you around too much. You know, going up and then west or east to get back. Bendy directions like this shouldn't be used often, but here, I sort of hope they give you a feeling the hill is elevated, in your mental map.{footnote_reveal_text}\"";
            : if (is_carried("travel_grail")) {
               : print {( "Thor also points to your travel grail. \"Very impressive, getting it without coming back here. You deserve an achievement for that. " + ( footnotes_available ? "You've seen them alredy" : "You'll see them" ) + " on completion of your quest." )} ;
               : set_true "achieve_ssss_pre" ;
            }
            :set_true "note_nonreciprocal" ;
         }
      }
      on_pre_describe {
         : set_integer var="tempint" "5" ;
         : gosub "footnote_reveal" ;
      }
   };

   west_tiles : location "WEST TILES\n{sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_left_side)} ;
      }
      on_command {
         : match "test wiles" {
            : if (!bonus_point_test_wiles) {
               : print "Instead of worrying if this all is a task you can't complete, you see it as, well, a test of wiles. This boosts you momentarily, even if it offers no concrete benefits." ;
               : set_true "bonus_point_test_wiles" ;
               : gosub "add_bonus" ;
            } : else {
               : print "But you already framed this as a test of your wiles." ;
            }
            : done ;
         }
      }
      on_describe {
         : gosub "list_jump_commands" ;
         : gosub "footnote_hub_history" ;
      }
   };

   east_branch : location "EAST BRANCH\n{sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_right_side)} ;
      }
      on_command {
         : match "beast ranch" {
            : if (!bonus_point_beast_ranch) {
               : print "You wonder if, with your brains, you could tackle a huge beast ranch with mind over matter or something. Then common sense kicks in. But you have fun imagining." ;
               : set_true "bonus_point_beast_ranch" ;
               : gosub "add_bonus" ;
            } : else {
               : print "You don't want to tempt something like that into existence too often." ;
            }
            : done ;
         }
      }
      on_describe {
         : gosub "list_jump_commands" ;
         : gosub "footnote_hub_history" ;
      }
   };

   stealing_hill : location "{loc_stealing_hill}" {
      on_command {
      : match "talk _;listen _" {
         : print "You're sort of glad the hill can't talk, or make any noise, really. It's sort of tense here, so any words would not be pleasant." ;
         : done ;
      }
      : match "healing still" {
         : if (point_healing_still) {
         : print "You already found the healing still that contained the travel grail." ;
         }
         : else_if ((!point_chalice_map || !point_master_plan) && (!cheat_dont_require)) {
            : print "With the stealing hill watching you, it'll be tough to nab anything. You'll need to know what you want and how to get there." ;
            : if (!think_healing_still) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_healing_still" ;
         }
         : else
         {
            : print "With the chalice map handy as well as the master plan, you know what to look for and where. Of course, it takes a while to get there, as the stealing hill tends to look around a lot, but it gets distracted by other passers-by. Eventually you find the travel grail. But where can it take you?" ;
            : gosub "add_point" ;
            : set_true "point_healing_still" ;
            : set_false "think_healing_still" ;
            : destroy "chalice_map" ;
            : destroy "master_plan" ;
            : pocket "travel_grail" ;
            : update_graphic ;
         }
         : done ;
         }
      : if (!point_healing_still) {
         : match "healing _;_ still" {
            : gosub "say_half" ;
         }
      }
      }
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   hub_w_n : location "{point_master_plan ? hub_w_master_plan : hub_w_plaster_man}" {
      on_command {
      : match "talk plaster;talk -;listen -" {
         : if (!point_master_plan) {
            : print "The plaster man has secrets to divulge, but talking and listening isn't the way to go." ;
         } : else {
            : print "That won't do much good now. It wouldn't have done much good before you destroyed the plaster man and got something useful." ;
         }
      }
      : match "master plan" {
         : if (point_master_plan) {
            : print "You already got the master plan.";
            }
         : else_if ((!point_shift_goals || !point_hunters_grill) && (!cheat_dont_require)) {
            : print "You sort of hope there's a master plan inside the plaster man, but you're not sure. You sense either you're not focused on what really matters, or you're not nourished enough to break him down." ;
            : if (!think_master_plan) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_master_plan" ;
         }
         : else
         {
            : print "You have reason to find a master plan, and your feast with the hunters has left you stronger. Without much trouble, you bust open the master plan and find it." ;
            : set_true "point_master_plan" ;
            : set_false "think_master_plan" ;
            : gosub "add_point_qt" ;
            : destroy "meal_dude" ;
            : destroy "focus" ;
            : pocket "master_plan" ;
         }
         : done ;
         }
      : if (!point_master_plan) {
         : match "master _;_ plan" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_ne : location "{point_chalice_map ? hub_w_chalice_map : hub_w_malice_chap}" {
      on_command {
      : match "talk _;listen _" {
         : gosub "hub_jerk";
      }
      : match "chalice map" {
         : if (point_chalice_map) {
            : print "You already got the chalice map from the malice chap.";
            }
         : else_if ((!point_fellow_yield || !point_grim_tune) && (!cheat_dont_require)) {
            : print "This guy's tough. Maybe if you've built experience and confidence blowing off two other belligerent fellows, you could outsmart him." ;
            : if (!think_chalice_map) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_chalice_map" ;
         }
         : else
         {
            : print "You offer to relieve the malice chap of his chalice map. You're surprised he accepts." ;
            : set_true "point_chalice_map" ;
            : set_false "think_chalice_map" ;
            : gosub "add_point_qt" ;
            : pocket "chalice_map" ;
         }
         : done ;
         }
      : if (!point_chalice_map) {
         : match "chalice _;_ map" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_e : location "{point_fell_short ? hub_w_fell_short : hub_w_shell_fort}" {
      on_command {
      : if (point_fell_short) {
         : match "listen _;talk _" {
            : print "All quiete on the western hub front." ;
            : done ;
         }
      }
      : match "listen _;talk -;talk fort" {
         : print "As ammunition whistles through the air, a truce parley doesn't seem likely. At least your assailants are inaccurate. But they're not giving up, as is." ;
         : done ;
      }
      : match "fell short" {
         : if (point_fell_short) {
            : print "You already managed to make the artillery miss you. No need to taunt.";
            }
         : else
         {
            : print "You believe in yourself and use the power of words to make the artillery fall short. The people inside give up on you. They have much easier targets.\nOh! And what did they leave behind? Some very, very sensible pacing rations. They taste bleah enough so you pace yourself eating them, but not so bleah they're inedible. You take them." ;
            : set_true "point_fell_short" ;
            : pocket "pacing_rations" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_fell_short) {
         : match "fell _;_ short" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_w_s : location "{point_take_crackers ? hub_w_take_crackers : hub_w_cake_trackers}" {
      on_command {
      : if (!point_take_crackers) {
         : match "talk trackers;talk -;listen -" {
            : print "The cake trackers are too busy grumbling among themselves and trying to find cake. They're oblivious to you. Perhaps you can sneak in and ..." ;
         }
      }
      : match "take crackers" {
         : if (point_take_crackers) {
            : print "Don't get greedy! You have enough crackers.";
            }
         : else
         {
            : print "While the cake trackers aren't looking, you pinch a box of crackers. They don't notice at first, but when they fail to find any cake, they start getting mad and accusing each other." ;
            : set_true "point_take_crackers" ;
            : gosub "add_point_qt" ;
            : pocket "crackers" ;
         }
         : done ;
         }
      : match "take _" {
         : print {( "Not quite what you " + (point_take_crackers ? "needed" : "need") + " to {tak} here." )} ;
         : done ;
      }
      : if (!point_take_crackers) {
         : match "_ crackers" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_sw : location "{point_shift_goals ? hub_w_shift_goals : hub_w_gift_shoals}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_shift_goals ? "The quiet is more peaceful now you've put the prospect of gifts aside." : "While the gifts seem to be calling to you, it'd feel weird to talk back" )} ;
         : done ;
      }
      : match "shift goals" {
         : if (point_shift_goals) {
            : print "But you don't want to shift your goals back." ;
            }
         : else_if ((!point_funny_mountain || !point_boring_way) && (!cheat_dont_require)) {
            : print "You want to shift your goals, but you don't know if you can. You haven't helped others shift theirs away from Needing More enough yet.";
            : if (!think_shift_goals) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_shift_goals" ;
         }
         : else
         {
            : print "You stop looking for something direct from the gift shoals. You begin, like, meditating and stuff." ;
            : set_true "point_shift_goals" ;
            : set_false "think_shift_goals" ;
            : destroy "peace_surging" ;
            : destroy "no_greed" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_shift_goals) {
         : match "shift _;_ goals" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_w : location "{point_hunters_grill ? hub_w_hunters_grill : hub_w_grunters_hill}" {
      on_command {
      : if (!point_hunters_grill) {
         : match "talk -;talk grunters; listen -" {
            : print "Your grunting skills are not up to scratch. Perhaps there are other ways to help them." ;
         }
      } : else {
         : match "talk -;talk hunters; listen -" {
            : print "With the hunters long gone and the meal finished, there's not much chance for meaningful interaction." ;
         }
      }
      : match "hunters grill" {
         : if (point_hunters_grill) {
            : print "But you already had enough of a feast. Any more, and you wouldn't be able to move around." ;
            }
         : else_if ((!point_take_crackers || !point_fell_short) && (!cheat_dont_require)) {
            : print {( "You try to start up a feast, but alas, you don't have enough food to do so. You need something besides the " + (point_take_crackers ? "crackers" : "pacing rations") + "." )} ;
            : if (!think_hunters_grill) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_hunters_grill" ;
         }
         : else
         {
            : print "You tell people to stop whining and start making a fire, or something. You're surprised they agree with you, especially when you show them your crackers and pacing rations." ;
            : set_true "point_hunters_grill" ;
            : set_false "think_hunters_grill" ;
            : destroy "pacing_rations" ;
            : destroy "crackers" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_hunters_grill) {
         : match "hunters _;_ grill" {
            : gosub "say_half" ;
         }
      }
      }
      on_tick {
         : if (!apostrophe_warn) {
            : print "{otn}Adventuron doesn't like apostrophes, so you don't want to use it here, even if it's in the description.";
            : set_true "apostrophe_warn" ;
         }
      }
   };
   hub_w_nw : location "{point_fellow_yield ? hub_w_fellow_yield : hub_w_yellow_field}" {
      on_command {
      : match "talk _;listen _" {
         : gosub "hub_jerk";
      }
      : match "fellow yield" {
         : if (point_fellow_yield) {
            : print "You feel no need to relive past victories." ;
            }
         : else_if ((!point_dirt_home || !point_bending_truth) && (!cheat_dont_require)) {
            : print "You'd like to convince the fellow to yield, but you either aren't sneaky enough, or you can't give him a safe place to go once he's yielded." ;
            : if (!think_fellow_yield) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_fellow_yield" ;
         }
         : else
         {
            : print "You take a balanced tone of friendship and defiance. You're surprised how well it works." ;
            : set_true "point_fellow_yield" ;
            : set_false "think_fellow_yield" ;
            : gosub "add_point_qt" ;
            : gosub "gain_confidence" ;
         }
         : done ;
         }
      : if (!point_fellow_yield) {
         : match "fellow _;_ yield" {
            : gosub "say_half" ;
            }
         }
      }
   };

   hub_e_n : location "{point_fly_score ? hub_e_fly_score : hub_e_sky_floor}" {
      on_command {
      : match "talk _" {
         : print "Talking would disturb the poetic artsy feel here." ;
         : done ;
      }
      : match "listen _" {
         : print {( point_fly_score ? "You already have a tune inside you." : "You listen, not for words, but..." )} ;
      }
      : match "fly score" {
         : if (point_fly_score) {
            : print "You already imagined a fly score, but you recite it again, so you don't forget it." ;
            }
         : else
         {
            : print "The poetic nature of the sky floor embeds itself in your head, and you think up a tune you're surprised you were able to." ;
            : set_true "point_fly_score" ;
            : gosub "add_point_tq" ;
            : pocket "low_song" ;
         }
         : done ;
         }
      : if (!point_fly_score) {
         : match "fly _;_ score" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_e_ne : location "{point_bending_truth ? hub_e_bending_truth : hub_e_trending_booth}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_bending_truth ? "Nothing to say or hear, but the quiet sure is nice." : "Talking and listening doesn't do much with headstrong folks like this. Maybe there's a way to call them out." )} ;
         : done ;
      }
      : match "bending truth" {
         : if (point_bending_truth) {
            : print "You've seen through the trending booth's lies. Rehashing that sort of thing too much makes you go in circles." ;
            }
         : else
         {
            : print "You realize that the trending booth's Stone Cold Facts are ice-cold when it comes to universal truths. You take some time to pause and think how and why the overgeneralizations and out-of-context anecdotes and such are inaccurate. Yet you also realize there's a place for brevity and not having to explain every detail. Some of the rhetorical tricks will stay with you." ;
            : set_true "point_bending_truth" ;
            : pocket "fast_vision" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_bending_truth) {
         : match "bending _;_ truth" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_e_e : location "{point_boring_way ? hub_e_boring_way : hub_e_warring_bay}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_boring_way ? "Nothing left to say or hear now that peace has broken out." : "Everyone fights among each other, and the yelling creates a feedback loop. You sense you talking will just inflame everyone more. How to get them to cool down?" )}
         : done ;
      }
      : match "boring way" {
         : if (point_boring_way) {
            : print "The way is now plenty boring. You don't want to risk dying of boredom after preventing so much death from war. That'd make for an embarrassing headstone!" ;
            }
         : else
         {
            : print "You somehow manage to get into the fighters' heads that it's not as exciting as it seems. At first they're mad, but after a while, they realize it's all for the best.\nYou feel peace surging within you. Peace may be boring, but then again, the excitement of war is draining." ;
            : set_true "point_boring_way" ;
            : pocket "peace_surging" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_boring_way) {
         : match "boring _;_ way" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_se : location "{point_dirt_home ? hub_e_dirt_home : hub_e_hurt_dome}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_dirt_home ? "Everything is cozy and quiet and domesticated with no point disrupting things." : "The hurt dome doesn't have anything mean to say to you, but you're sure it's THINKING that. How to neutralize its simmering rage?" )} ;
         : done ;
      }
      : match "dirt home" {
         : if (point_dirt_home) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "Poof! The hurt dome transforms into a dirt home." ;
            : pocket "trial_pics" ;
            : set_true "point_dirt_home" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_dirt_home) {
         : match "dirt _;_ home" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_s : location "{point_pouring_rain ? hub_e_pouring_rain : hub_e_roaring_pain}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_pouring_rain ? "The pouring rain is really poetic, and stuff. You sense talking would ruin things." : "You can't talk or listen normally with this roaring pain around. Perhaps it can become something more manageable." )} ;
      }
      : match "pouring rain" {
         : if (point_pouring_rain) {
            : print "You already found something less awful than pouring rain." ;
            }
         : else
         {
            : print "As your pain resides, you feel a drip from above. Then another. Then two, then four. Thank goodness for the shelter nearby! You sit there and find watching the rain surprisingly poetic." ;
            : set_true "point_pouring_rain" ;
            : pocket "rain_soul" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_pouring_rain) {
         : match "pouring _;_ rain" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_w : location "{point_funny_mountain ? hub_e_funny_mountain : hub_e_money_fountain}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_funny_mountain ? "You can't really match the mountain's jokes, but you don't need to. You're happy enough." : "Denizens of the fountain don't seem to care about you. They just keep trying to fish money out of the fountain, which disappears." )} ;
         : done ;
      }
      : match "funny mountain" {
         : if (point_funny_mountain) {
            : print "You already changed the scenery here for the better. Making the mountain bigger might destabilize it." ;
            }
         : else
         {
            : print "Nothing happens at first. Then a slow rumbling. A small hill pokes through the ground, sending the money in the fountain everywhere. Outside of the fountain, the money flies into the mountain and helps enlarge it. There must be a lot of money in the fountain, because it takes a while. The resulting funny mountain is an improvement, though the scavengers don't think so." ;
            : set_true "point_funny_mountain" ;
            : pocket "no_greed" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_funny_mountain) {
         : match "funny _;_ mountain" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_nw : location "{point_grim_tune ? hub_e_grim_tune : hub_e_trim_goon}" {
      on_command {
      : match "talk _;listen _" {
         : gosub "hub_jerk";
      }
      : match "grim tune" {
         : if (point_grim_tune) {
            : print "You already thought up a grim tune. Any more, and you might be so depressed you forget what you wrote, or you wonder why even bother to share it." ;
            }
         : else_if ((!point_fly_score || !point_pouring_rain) && (!cheat_dont_require))
         {
            : print "You'd like to think of a grim tune, but you don't have a combination of music and lyrics, yet." ;
            : if (!think_grim_tune) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_grim_tune" ;
         }
         : else
         {
            : print "You sing your grim tune at the trim goon. They immediately have a rush of discomfort with their lot in life. Don't they deserve more? They go off to join a pyramid scheme, in hopes of finding it. Unfortunately, they get fleeced by people more awful than they, but fortunately, they learn a lesson from it and dedicate the rest of their life to helping other people.\n\nOkay, not really. They just come back and mope about how society is out to get them. But that's actually better for society than before." ;
            : set_true "point_grim_tune" ;
            : set_false "think_grim_tune" ;
            : destroy "rain_soul";
            : destroy "low_song" ;
            : gosub "add_point_tq" ;
            : gosub "gain_confidence" ;
         }
         : done ;
         }
      : if (!point_grim_tune) {
         : match "grim _;_ tune" {
            : gosub "say_half" ;
            }
         }
      }
   };
   gravel_trail : location "This is a gravel trail. You can go back south to the plain base{gravel_trail_house}{chimes_present}." {
      on_describe {
         : if (is_beside "hissing_mouse") {
            : print "A {cc_hissing_mouse} hisses here! It's not lethal, but it doesn't seem to belong here, and it's not happy about that." ;
         }
      }
      on_command {
         : if (is_beside("hissing_mouse")) {
            : match "x mouse" {
               : print "The mouse's hissing appears more defensive than anything." ;
               : done ;
            }
            : match "get mouse" {
               : print "Certainly not in its current agitated state." ;
               : done ;
            }
            : match "talk -;talk mouse" {
               : print "You couldn't understand each other's speech. But you do understand it's upset, and you want to fix that." ;
               : done ;
            }
            : match "listen _" {
               : print "The mouse almost sounds a bit defensive. But it's still agitated." ;
               : done ;
            }
         }
         : match "missing house" {
            : if (point_missing_house) {
               : print "You already brought the house back." ;
            }
            : else {
               : print "BOOM! A missing house appears. The mouse squeaks with joy and then goes and hides under it. And yet, it seems to wave at you before you enter." ;
               : set_true "point_missing_house" ;
               : destroy "hissing_mouse" ;
               : gosub "add_point" ;
               : update_graphic ;
            }
         }
         : if (!point_missing_house) {
            : match "missing _;_ house" {
               : gosub "say_half" ;
            }
         }
      }
   };
   my_house : location "{my_house_description}" {
      on_command {
         : match "talk _;listen _" {
            : print "You have nobody to talk to right now. Well, you may need to say something specific, to let people in your, uh, my house." ;
            : done ;
         }
         : match "x bookshelf;read bookshelf" {
            : gosub "read_book" ;
         }
         : match "see glimmers;see glimmering" {
            : if (point_see_glimmering) {
               : print "You already found something unusual in the house. You need an assistant to look through it." ;
            }
            : else {
               : print "You remember what you came for. The {rttr}. Where could it be? Well, there are a lot of glimmering things, here. It would take you a while to search, especially since they are in odd corners. If only you had someone or something willing to help with the busy work!\nYou think you hear something new, too." ;
               : set_true "point_see_glimmering" ;
               : gosub "add_point" ;
               : update_graphic ;
            }
            : done ;
         }
         : if (!point_see_glimmering) {
            : match "see _;_ glimmering;_ glimmers" {
               : gosub "say_half" ;
            }
         }
         : match "hi mouse" {
            : if (point_see_glimmering) {
               : print "Yes! The mouse uncovers the {rttr}. You're glad to give it a cut of the useless but shiny trinkets. You win. (Fill in Thor's congratulations later and create a final image.)";
               : if (!footnotes_available) {
                  : print "Thor congratulates you, noting that footnotes will be available on replay, if you choose to have them." ;
               }
               : gosub "add_point" ;
               : set_true "footnotes_available" ;
               : set_false "think_hi_mouse" ;
               : gosub "track_achievements" ;
               : gosub "win_game_stub" ;
               : done ;
            }
            : else {
               : print "Hmm, it might be worth calling the mouse back to look around, but you don't have anything concrete for it to search. Maybe look around." ;
               : set_true "think_hi_mouse" ;
            }
            : done ;
         }
         : match "hi _;high _;_ mouse" {
            : gosub "say_half" ;
         }
      }
   }
};

# connections between locations. There are warps for the first few areas, but after that, it's a pretty standard map.

connections {

   from, direction, to = [

      ## from plain base
      plain_base, northwest, west_tiles,
      plain_base, northeast, east_branch,

      ## two-way stuff first
      west_tiles, north, hub_w_n,
      west_tiles, northeast, hub_w_ne,
      west_tiles, east, hub_w_e,
      west_tiles, south, hub_w_s,
      west_tiles, southwest, hub_w_sw,
      west_tiles, west, hub_w_w,
      west_tiles, northwest, hub_w_nw,

      east_branch, north, hub_e_n,
      east_branch, northeast, hub_e_ne,
      east_branch, east, hub_e_e,
      east_branch, southeast, hub_e_se,
      east_branch, south, hub_e_s,
      east_branch, west, hub_e_w,
      east_branch, northwest, hub_e_nw,

      ## one-way / "exit" additional way out
      hub_w_n, leave_oneway, west_tiles,
      hub_w_ne, leave_oneway, west_tiles,
      hub_w_e, leave_oneway, west_tiles,
      hub_w_s, leave_oneway, west_tiles,
      hub_w_sw, leave_oneway, west_tiles,
      hub_w_w, leave_oneway, west_tiles,
      hub_w_nw, leave_oneway, west_tiles,

      hub_e_n, leave_oneway, east_branch,
      hub_e_ne, leave_oneway, east_branch,
      hub_e_e, leave_oneway, east_branch,
      hub_e_se, leave_oneway, east_branch,
      hub_e_s, leave_oneway, east_branch,
      hub_e_w, leave_oneway, east_branch,
      hub_e_nw, leave_oneway, east_branch,

      ## Stealing Hill bending paths
      east_branch, up_oneway, stealing_hill,
      west_tiles, up_oneway, stealing_hill,
      stealing_hill, west_oneway, west_tiles,
      stealing_hill, east_oneway, east_branch,

      ## endgame stuff
      plain_base, north, gravel_trail,
      gravel_trail, north, my_house
   ]
}

barriers {
   block_hub_w_n : block {
      location = hub_w_n
      block_when = point_master_plan
      message = You got the master plan, so you don't really need to go back north.
   }
   block_hub_w_ne : block {
      location = hub_w_ne
      block_when = point_chalice_map
      message = You got the chalice map, so you don't really need to go back northeast.
   }
   block_hub_w_e : block {
      location = hub_w_e
      block_when = point_fell_short
      message = You dismantled the shell fort, so you don't need to go back east.
   }
   block_hub_w_s : block {
      location = hub_w_s
      block_when = point_take_crackers
      message = You already got some crackers from the cake trackers. There can't be anything more back southeast.
   }
   block_hub_w_sw : block {
      location = hub_w_sw
      block_when = point_shift_goals
      message = With your goals shifted, you've gotten all the mindfulness or whatever you need from the shoals to the southwest.
   }
   block_hub_w_w : block {
      location = hub_w_w
      block_when = point_hunters_grill
      message = You helped the hunters fire up their grill. There's nothing really left to do to the west.
   }
   block_hub_w_nw : block {
      location = hub_w_nw
      block_when = point_fellow_yield
      message = You got the fellow to yield in the yellow field, which was pretty barren otherwise. So you don't need to go back northwest.
   }

   block_hub_e_n : block {
      location = hub_e_n
      block_when = point_fly_score
      message = You don't feel as though the sky/floor to the north has anything more to offer you, with the fly score stuck in your head. Well, maybe you can go back for new artistic inspiration, after you completed the quest for Thor.
   }
   block_hub_e_ne : block {
      location = hub_e_ne
      block_when = point_bending_truth
      message = You already bent the truth a bit to the northeast. You don't want to do too much of that sort of thing. At least, I hope you don't.
   }
   block_hub_e_e : block {
      location = hub_e_e
      block_when = point_boring_way
      message = You cooled off the warring bay to the east. While you wouldn't die of boredom in the now-boring way to the east, hanging around there wouldn't get you any closer to your goals.
   }
   block_hub_e_se : block {
      location = hub_e_se
      block_when = point_dirt_home
      message = You changed the hurt dome to a dirt home. You can't think of anything else you need to do to the southeast.
   }
   block_hub_e_s : block {
      location = hub_e_s
      block_when = point_pouring_rain
      message = You changed the roaring pain to pouring rain. You really can't see any reason to go get soaked more do to the southwest.
   }
   block_hub_e_w : block {
      location = hub_e_w
      block_when = point_funny_mountain
      message = You changed the funny mountain to a money fountain. You can't think of anything else you need to do to the west.
   }
   block_hub_e_nw : block {
      location = hub_e_nw
      block_when = point_grim_tune
      message = You chased the trim goon with a grim tune. You can't think of anything else you need to do to the northwest.
   }
   block_stealing_hill: block {
      location = stealing_hill
      block_when = hill_aware_you_stole
      message = {stealing_hill_mad}
   }
   block_gravel_trail: block {
      location = gravel_trail
      block_when_not = point_gravel_trail
      message = Thor looks over. "Perhaps there'll be something there, but you'll need a magic object to see the way through."
   }
   block_my_house: block {
      location = my_house
      block_when_not = point_missing_house
      message = The hissing mouse guards the way. Besides, there's nothing there. Well, not yet.
   }
}

# end locations

# subroutines are generally organized alphabetically, but INIT comes first

subroutines {
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : print "Submitted for the 2025 TALP competition." ;
   : press_any_key ;
   : if (footnotes_available) {
      : gosub "footnote_read_from_survivors" ;
      : print "Because you won at least once, footnotes are available, and you will skip over the initial menu choices for tutorials or colored text hints. They can still be set with {tut} and {ch}.";
      : press_any_key ;
   }
   : clear_screen ;
   }
   init_check : subroutine {
      : if (collection_count("footnote_finding_list") != collection_count("footnote_hinting_list")) {
         : print "WARNING footnote finding list length != footnote hinting list length!" ;
      }
      : if (collection_count("footnote_finding_list") != collection_count("footnote_status_list")) {
         : print "WARNING footnote finding list length != footnote status list length!" ;
      }
      : if (collection_count("footnote_finding_list") != collection_count("footnote_text_list")) {
         : print "WARNING footnote finding list length != footnote hinting text length!" ;
      }
   }
   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>" ;
      }
      : increment "score" ;
      }
   add_point_qt : subroutine {
      : increment "points_left_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_point_tq : subroutine {
      : increment "points_right_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : print "<You just found a bonus point!<6>>" ;
         : if (bonus_score == 0) {
             : print {( otn + "There are a few of these in " + qt + ", and " + sco + " will let you know your progress there." )};
         }
      }
      : increment "bonus_score";
      }
   thor_on_seth : subroutine {
      : if (!thor_explained_seth) {
         : print "Beery Thor casually mentions it'd be nice if it disappeared, but not critical. The ring's not there, but if it was, he would've taken care of things, already." ;
         : set_true "thor_explained_seth" ;
         }
      }
   ask_thor_tally : subroutine {
      : set_integer var="tempint2" {( int(collection_get{ collection -> ("ask_list") index -> ( tempint ) }) + 1 )} ;
      : if (tempint2 > 4) {
         : set_integer var="tempint2" value="4";
      }
      : collection_modify { collection = "ask_list" index -> (tempint) content -> ("" + tempint2) }
      : if (tempint2 == 3 && ! have_asked_three) {
         : set_true "have_asked_three";
         : print "{otn}the up-arrow on your keyboard will show your previous command. This is useful for if you typed something wrong, or you want to see what you did, or you typed the right thing at the wrong time and want to save keystrokes. Or, here, you can just adjust the number at the end." ;
      }
      : else_if (tempint2 == 4 && ! have_asked_four) {
         : set_true "have_asked_four";
         : print "{otn}I'll have to ask for some suspension of disbelief, here. Thor's responses for each rule come in cycles of three, the exact same thing every time, and fortunately, unlike us mortals, he never gets bored." ;
      }
      : done ;
   }
   ask_thor : subroutine {
      : if (!talked_to_thor) {
         : print "You should {tlk} to Thor to introduce yourself before interrogating him." ;
         : done ;
      }
      : if (!is_int(original "noun1")) {
         : print "You need a number (1-17) for the rule to ask Thor about." ;
         : done ;
      }
      : gosub "int_from_noun1" ;
      : if (tempint < 1 || tempint > 17) {
         : print "\"There are only seventeen total rules, so just pick any one from one to seventeen. There are no secret numbers, either.\"" ;
         : done ;
      }
      : else_if (tempint == 1) {
         : cycle key = "rule_1" predictable_order = "true" skip_interval = "0" {
            : print {( "\"The first rule in Graham Nelson's Player's Bill of Rights is <not to be killed without warning<#ff0>>.\"" )} ;
            : print "\"This can refer to rooms you step into that just kill you. Even with <UNDO<#f80>> available, they're still a pain and can interrupt the flow of the game. Of course, there are exceptions. Groundhog Day style games where you learn more with each death can be very intricate and well-received.\"" ;
            : print {( "\"Here, there" + ((bonus_point_death_sentence) ? "was" : "'s") + " only one way to potentially die, and even that, well, it's lampshaded or explained.\"" )} ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 2) {
         : cycle key = "rule_2" predictable_order = "true" skip_interval = "0" {
            : print "\"The second rule in Graham Nelson's Player's Bill of Rights is <not to be given horribly unclear hints<#ff0>>.";
            : print "\"There's a delicate balance, of course. It's fun to be able to solve tricky hints, and it's boring if they're too easy. And it's fun for a player to laugh at themselves realizing they missed a hint in plain sight. But sometimes even something that works well and seems simple when it's done requires a lot of fiddling from the author.\"" ;
            : print "\"Here hopefully the pattern of spoonerisms is established. The author tried to throw out a few in descriptions. There's a worry they may be stale if they go on too long.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 3) {
         : cycle key = "rule_3" predictable_order = "true" skip_interval = "0" {
            : print "\"The third rule in Graham Nelson's Player's Bill of Rights is <to be able to win without the experience of past lives<#ff0>>.\"" ;
            : print "\"This can overlap with rule 1 about not getting killed unfairly, and while Groundhog Day games are a thing, that sort of exception may prove the rule. You're generally in a tight loop to start. Then the world expands as you learn more. This isn't just about death, though. Say you have a timed maze where you need to get through in X steps without a map, but you can't go down any dead ends. That creates a lot of busy work which shortly stops feeling like a game.\n\"An exception may be a game where you survive but lose contact with friends (a neutral ending,) and then you piece things together to escape with all your friends. Good-better-best endings are common and add depth to a game. But they should only be there if the player wants more.\"" ;
            : print "\"The author likes to wimp out about this by allowing only joke deaths, or having a MISSED option in Inform for bonus points (for Adventuron, he's still learning!) And of course, if a puzzle is too hard, this rule is less important (The author's done that to players!)\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 4) {
         : cycle key = "rule_4" predictable_order = "true" skip_interval = "0" {
            : print "\"The fourth rule in Graham Nelson's Player's Bill of Rights is <to be able to win without the knowledge of future events<#ff0>>.\"" ;
            : print "\"This ties into being able to win without the experience of past lives. But again there are exceptions, such as where you play as different people and piece together what actually happened.\"" ;
            : print "\"The author avoids this by going in for abstract puzzle-fests. Yet it's sort of neat to have surprises thrown in the way. Just make them surmountable.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 5) {
         : cycle key = "rule_5" predictable_order = "true" skip_interval = "0" {
            : print "The fifth rule in Graham Nelson's Bill of Rights is <not to have the game closed off without warning<#f88>>." ;
            : print "This means more than just not having the game shut down. It means you shouldn't have something arbitrary put it in a non-winnable state. But if, say, you are wearing a watch and need to do something by 10:30 PM, that is permissible. Whether or not these constraints are fair goes beyond the basic bill of rights.";
            : print "Of course, certain fun minor things may be closed off. Here, there were two bonus points in First Base. {ask_5_notes}! While there's a special accomplishment for getting all bonus points, missing either doesn't impact your main quest, finding the {rttr}.\"" ;
         }
         : set_integer var="tempint" "5" ;
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 6) {
         : cycle key = "rule_6" predictable_order = "true" skip_interval = "0" {
            : print "\"The sixth rule in Graham Nelson's Player's Bill of Rights is <not to have to do unlikely things<#f88>>.\"" ;
            : print "\"Of course, in some of the most fun games you do generally unlikely things in real life. But if you veer from swordfights to having to derive the cubic formula, well, that is not so easy to believe.\"" ;
            : print "\"Here, you are constantly doing unlikely things, but they're all related. So hopefully it all makes sense in the small world created here.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 7) {
         : cycle key = "rule_7" predictable_order = "true" skip_interval = "0" {
         : print "\"The seventh rule in Graham Nelson's Player's Bill of Rights is <not to need to do boring things for the sake of it<#f88>>.\"" ;
         : print "\"This was less of a worry when there were fewer games to play, and fewer games to fall back on and compare to, so even the busy work seemed new. But with time, there are certain puzzles everyone groans when they see, even if they were neat the first time: wolf/goat/cabbage, 5- and 4- and 3-liter jugs, Towers of Hanoi. Mazes are a 'favorite,' too, though authors have found many ways to subvert this nuisance or provide a reasonable way to jump through the maze.\"" ;
         : print "\"Here the author realized having too many spoonerisms might ruin things. In fact, the original leadup to here had some buffer puzzles which were just me leading you on. I had a word with him.\"" ; ## put in footnote ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 8) {
         : cycle key = "rule_8" predictable_order = "true" skip_interval = "0" {
            : print "The eighth rule in Graham Nelson's Player's Bill of Rights is <not to have to type exactly the right verb<#f88>>.\"" ;
            : print "\"It's frustrating to have PUT X IN Y fail only to realize you needed to INSERT X IN Y. It's a paradox of parsers that understand a lot of words may actually force the reader to work through their vocabulary. Since parsers are no longer shiny and new and we aren't blown away with being able to type stuff in and get a response, people have seen the advantage of a simplified parser. But authors can also note if there are two words and suggest the player try a different verb. Or a {verbs} command lists all the verbs, and it's pretty clear which to use. USE X ON Y can even be a blanket solution.\"" ;
            : print "\"Uh, oh! Taken at face value, {qt} fails this rule miserably. You need the right pair of words, and they don't generally fall in the standard set of parser verbs. But on the other hand, they're clued pretty strongly. This is one of those cases where the author thinks or at least hopes he broke a rule judiciously to provide a new interesting experience. All authors need to, sometimes.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 9) {
         : cycle key = "rule_9" predictable_order = "true" skip_interval = "0" {
         : print "\"The ninth rule in Graham Nelson's Player's Bill of Rights is <to be allowed to try reasonable synonyms<#f88>>.\"" ;
         : print "\"This should apply to verbs and nouns. Parser command abbreviations over the years have made this easier. Directions were always abbreviated, since they were in real life, but eventually conventions settled on I for inventory and X for examine, and so forth. More commonly, Inform allows for pronouns, and MAN might be a synonym for SORCERER and WOMAN for SORCERESS, and so forth. NEWS and PAPER could cue NEWSPAPER. It's fun to be able to type things out if you want, but it shouldn't be a chore.\"" ;
         : print "\"There are a few synonyms in this game, but because of the oddness of the items, there's not too much that can be done. {qt} also short-circuits this by not making you use many items explicitly.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 10) {
         : cycle key = "rule_10" predictable_order = "true" skip_interval = "0" {
         : print "The tenth rule in Graham Nelson's Player's Bill of Rights is <to have a decent parser<#f88>>." ;
         : print "This rule may have evolved since the initial document to read: to have the game use the parser judiciously. There's a certain thrill in writing your own parser for your own game and programming neat side verbs, but it does not always rub off on players. For instance, a vastly different response for SEARCH and EXAMINE may frustrate players.\n\"One thing that helps provide a buffer is a {verbs} command, so they know how much they need to focus on the right word. I've enjoyed games where you LOOK BEHIND and LOOK UNDER, and the right one is based on the object. But this was prompted by {verbs}." ;
         : print "I used Adventuron's simplified two-word parser. I didn't need any complex actions, so it worked well." ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 11) {
         : cycle key = "rule_11" predictable_order = "true" skip_interval = "0" {
         : print "The eleventh rule in Graham Nelson's Player's Bill of Rights is <to have reasonable freedom of action<#f88>>." ;
         : print "Well, there aren't a ton of verbs implemented, and the first bit was on rails, but I wanted to open it up and have something to do right away in the main area." ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 12) {
         : cycle key = "rule_12" predictable_order = "true" skip_interval = "0" {
         : print "The twelfth rule in Graham Nelson's Player's Bill of Rights is <not to depend too much on luck<#f88>>." ;
         : print "It's difficult, of course. If there is no luck, a game may not be replayable." ;
         : print "Here, there's no luck whatsoever. Perhaps this is outdated, although some parser games encourage the player to strategize for a maximum score based on random events." ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 13) {
         : cycle key = "rule_13" predictable_order = "true" skip_interval = "0" {
         : print "The thirteenth rule in Graham Nelson's Player's Bill of Rights is <to be able to understand a problem once it is solved<#f88>>." ;
         : print "\"Well, in a one-trick pony adventure like this, 'understand it once it's solved' is not really a problem. Of course, a problem from the other side is that the player says yeah, yeah, I get it, already.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 14) {
         : cycle key = "rule_14" predictable_order = "true" skip_interval = "0" {
         : print "The fourteenth rule in Graham Nelson's Player's Bill of Rights is <not to be given too many red herrings<#f88>>." ;
         : print "A too on-rails game is boring, It's fun to have those side ventures." ;
         : print "Here, well, there are a few bonus points I hope you enjoy, but I kept the maze compact and hopefully the funny side locations just add flavor." ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 15) {
         : cycle key = "rule_15" predictable_order = "true" skip_interval = "0" {
         : print "The fifteenth rule in Graham Nelson's Player's Bill of Rights is <to have a good reason why something is impossible<#f88>>." ;
         : print "This isn't a terribly ambitious game, and it doesn't have a ton to interact with. So this doesn't apply. But hopefully if you run into a puzzle where you have the right phrase, the reject makes some sense." ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 16) {
         : cycle key = "rule_16" predictable_order = "true" skip_interval = "0" {
         : print "The sixteenth rule in Graham Nelson's Player's Bill of Rights is <not to need to be American<#f88>>." ;
         : print "\"This was one of the more controversial rules, as the definition is not very exact. But of course, it's not just about being American. Needing to know obscure stuff specific to any culture or trivia might make it hard for people to enjoy things fully, even if along the way you learn interesting things about a culture or hobby.\"" ;
         : print "Oh dear. There's a slang word or two here that originate in the US, but I tried to keep them common." ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 17) {
         : cycle key = "rule_17" predictable_order = "true" skip_interval = "0" {
         : print "\"The seventeenth rule in Graham Nelson's Player's Bill of Rights is <to know how the game is getting on<#f88>>.\"" ;
         : print "\"Progress tracking with points is a staple of text adventures, but it can feel a bit artificial and distracting to look up, even if the score is in the upper right. But a murder mystery may ask you for five pieces of evidence, or you may know a mansion has three stories and you've only visited one.\"" ;
         : print "\"Here, I tried to give an idea of progress by closing off hub areas as you found them.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : print "I missed a case for asking Thor. This should never happen. It's a bug." ;
   }
   evaluate_warp : subroutine {
      : if (latest_warp_number == -2) {
         : set_integer var = "latest_warp_number" "-1";
         : return ;
      }
      : if (latest_warp_number == -1) {
         : collection_clear "jump_order_list" ;
         : return ;
      }
      : set_integer var = "tempint" {( collection_count("jump_order_list") )} ;
      : collection_push { collection = "jump_order_list" content -> ("" + latest_warp_number) }
      : if (collection_count("jump_order_list") == tempint) {
         : collection_clear "jump_order_list" ;
         : set_integer var = "latest_warp_number" "-3" ;
         : return ;
      }
      : if (collection_count("jump_order_list") == 12) {
         : set_true "achieve_cddc_pre" ;
         : return ;
      }
   }
   footnote_lister : subroutine {
      : print "Here's a list of footnote numbers. <Green<#0f0>> descriptions are ones you've found. <Red<#f00>> have clues for ones you've not (yet) found:" ;
      : set_integer var = "tempint" "0";
      : collection_iterate "footnote_finding_list" {
         : set_integer var="tempint2" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( tempint ) }) )} ;
         : if (tempint2 > 0) {
            : print {("" + (tempint + 1) + ". " + item())}
         } : else {
            : print {( "" + (tempint + 1) + ". " + (collection_get{ collection -> ("footnote_hinting_list") index -> ( tempint ) }) )} ;
         }
         : if (tempint == max_footnote_found) {
            : done ;
         }
         : increment "tempint" ;
      }
      : done ;
   }
   footnote_printer : subroutine {
      : if (!is_int(original "noun1")) {
         : print "Footnotes require a number." ;
         : done ;
      }
      : gosub "int_from_noun1" ;
      : if (tempint == 0) {
         : gosub "footnote_lister" ;
         : done ;
      }
      : if (tempint > collection_count("footnote_status_list") || tempint < 0) {
         : print {( "Footnotes must be between 1 and " + collection_count("footnote_status_list") + ", though 0 gives a list of what you've found." )} ;
         : done ;
      }
      : if (int(collection_get{ collection -> ("footnote_status_list") index -> ( tempint - 1)}) == 0 ) {
         : print "You haven't revealed footnote {tempint} yet." ;
         : done ;
      }
      : print {( collection_get{ collection -> ("footnote_text_list") index -> (tempint - 1) } )} ;
   }
   footnote_reveal : subroutine {
      : if (!footnotes_available) {
         : return ;
      }
      : set_integer var="tempint2" {( int(collection_get{ collection -> ("footnote_status_list") index -> (tempint - 1) }) )} ;
      : set_false "reveal_this_footnote" ;
      : if (tempint2 > 0) {
         : return ;
      }
      : if (tempint > max_footnote_found) {
         : set_integer var="max_footnote_found" {( int("" + (tempint - 1)) )} ;
      }
      : set_true "ever_reveal_footnote" ;
      : set_true "reveal_this_footnote" ;
      : collection_modify { collection = "footnote_status_list" index -> (tempint - 1) content -> ("1") ; }
   }
   footnote_hub_history : subroutine {
      : if ((!footnotes_available) || (history_footnote_found)) {
         : return ;
      }
      : set_integer var="tempint" "3" ;
      : gosub "footnote_reveal" ;
      : print "For some history on both West Tiles and East Branch, look at {footnote_reveal_text}." ;
      : set_true "history_footnote_found" ;
   }
   footnote_endgame_check : subroutine {
      : collection_iterate "footnote_status_list" {
         : if (int(item()) == 0) {
            : print "You haven't unlocked the {achievement_tnnt} achievement yet." ;
            : return ;
         }
      }
      : set_true "achieve_tnnt" ;
      : print "For uncovering all the footnotes available, you win the {achievement_tnnt} achievement!" ;
   }
   gain_confidence : subroutine {
      : print {( "You gain " + (confidence_meter > 0 ? "even more " : "") + "confidence from this small contretemps." )};
      : increment "confidence_meter" ;
      : pocket "confidence" ;
      : return ;
   }
   hub_jerk : subroutine {
      : if ((is_at("hub_w_nw") && point_fellow_yield) || (is_at("hub_w_ne") && point_chalice_map) || (is_at("hub_e_nw") && point_grim_tune)) {
         : print "There's no chance or need for chat, after your little nonviolent victory." ;
      }
      : done ;
   }
   item_based_points : subroutine {
      : if (is_carried "fast_vision") {
         : match "vast fission" {
            : if (bonus_point_vast_fission) {
               : print "You've already broken things down enough." ;
            } : else {
               : print "You extrapolate on the fast vision you have and re-interpret events from your past life in many new ways. The mental fission of previous complaints is fast. You make plans for, uh, fishin' for more, once this quest is over." ;
               : set_true "bonus_point_vast_fission" ;
               : gosub "add_bonus" ;
            }
         }
      }
      : if (is_carried "low_song") {
         : match "so long" {
            : if (bonus_point_so_long) {
               : print "A long (re-)good-bye is not really a good-bye." ;
            } : else {
               : print "You use the low song in your head to compose a kiss-off to people whom you don't want to stick in your memory, but they do. It helps lighten a few burdens." ;
               : set_true "bonus_point_so_long" ;
               : gosub "add_bonus" ;
            }
         }
      }
      : if (is_carried "pacing_rations") {
         : match "racing passions" {
            : if (bonus_point_racing_passions) {
               : print "No. Best not get carried away." ;
            } : else {
               : print "You permit yourself to imagine being on a much higher-powered quest. Boy, you showed those boring old pacing rations! And the people who manufactured them! Or, well, you would have, if they were around.\nYour Walter Mitty moment over, you get back to focusing on your main quest." ;
               : gosub "add_bonus" ;
               : set_true "bonus_point_racing_passions" ;
            }
            : done ;
         }
      }
      : if (is_carried "peace_surging") {
         : match "cease purging" {
            : if (bonus_point_cease_purging) {
               : print "One doesn't want to overthink good intentions." ;
            } : else {
               : print "You use the feeling of peace, surging, to formulate what to do to march towards peace, or to make things more peaceful. Naturally there are things society needs to purge, but then there are too many it doesn't." ;
               : set_true "bonus_point_cease_purging" ;
               : gosub "add_bonus" ;
            }
         }
      }
      : if (is_carried "rain_soul") {
         : match "sane role" {
            : if (bonus_point_sane_role) {
               : print "Fighting too hard for perfect sanity undoes the point." ;
            } : else {
               : print "Not that things are insane here, but you justify why working through such apparent nonsense is, indeed, good for the soul, even if it doesn't help society right away." ;
               : set_true "bonus_point_cease_purging" ;
               : gosub "add_bonus" ;
            }
         }
      }
      : if (is_exists "teary_chimes") {
         : match "cheery times" {
            : print "The teary chimes bring back memories of an old couple down the street, when you were a kid. You didn't like the chimes at first, but then when you talked with them, chimes started to remind you of them. They died when you were ten. You haven't heard chimes for a while. While the chimes seem to be saying \"time to move on,\" there's also optimism there will be other, different, good times ahead." ;
            : destroy "teary_chimes" ;
            : gosub "add_bonus" ;
            : set_true "bonus_point_cheery_times" ;
            : done ;
         }
      }
      : if (is_carried("travel_grail")) {
         : match "gravel trail" {
            : if (is_at "plain_base") {
               : print "You look over at Thor. He nods. You summon a gravel trail which appears to the north!" ;
               : print "\"There you go,\" he cheers. \"The rest shouldn't be too hard, if you got this far. But wait, you'd better let me take this grail. I don't think you'll need it, but the next person to stop by might.\"" ;
               : print "You'd sort of grown attached to it, but he is bigger than you, and it is a little heavy.";
               : destroy "travel_grail" ;
               : set_true "point_gravel_trail" ;
               : gosub "add_point" ;
               : update_graphic ;
            } : else {
               : print "Nothing happens. Perhaps you'll want to use the travel grail elsewhere." ;
            }
            : done ;
         }
         : if (!point_gravel_trail) {
            : match "gravel _;_ trail" {
               : gosub "say_half" ;
            }
         }
      }
   }
   int_from_noun1 : subroutine {
      : set_integer var="tempint" {( int("" + original "noun1") )} ;
   }
   list_jump_commands : subroutine {
      : if (jump_commands_notified) {
         : return ;
      }
      : if ((!has_visited("plain_base")) || (!has_visited("west_tiles")) || (!has_visited("east_branch")) || (!has_visited("stealing_hill"))) {
         : return ;
      }
      : set_true "jump_commands_notified" ;
      : print "You've seen all the non-endgame locations in the game. There are several jump commands you can use in case you don't want to fiddle with directions." ;
      : print "" ;
      : print "" ;
      : print "{v_eb} = East Branch" ;
      : print "{v_pb} = Plain Base" ;
      : print "{v_sh} = Stealing Hills" ;
      : print "{v_wt} = West Tiles" ;
   }
   mark_jump : subroutine {
      : if (is_at("plain_base")) {
      } : else_if (is_at("west_tiles")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 1 )} ;
      } : else_if (is_at("east_branch")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 2 )} ;
      } : else_if (is_at("stealing_hill")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 3 )} ;
      } : else {
         : return ;
      }
      : collection_modify { collection = "jump_list" index -> (latest_warp_number) content -> ("1") ; }
   }
   note_diagonal_direction_from_hub : subroutine {
      : print "As you start, Thor calls out to you. \"Oh, hey, those diagonal directions? Sorry about them. Usually not done in a text adventure. It can confuse people. But we have a good excuse. It keeps the map symmetrical. And there are just hubs to the northwest and northeast.\"" ;
      : set_true "noted_diagonal_direction" ;
      : press_any_key ;
   }
   read_book : subroutine {
      : if (!poke_books_yet) {
         : print "You take the time to inspect the whole bookshelf. Perhaps the <rttr> is hidden behind one of the books. You find nothing. You attempt to remove the books, to see if the bookshelf can be pushed. (You have time.) Again, nothing. But hey, some of those titles look interesting!" ;
         : set_true "poke_books_yet" ;
         : done ;
      }
      : cycle key = "books_to_read" predictable_order = "false" skip_interval = "0"  {
         : print "{book_is} <A Will Way Ill<#ff0>>." ;
         : print "{book_is} <To Prep True Pep<#ff0>>." ;
         : print "{book_is} <See Bunny, Be Sunny<#ff0>>." ;
         : print "{book_is} <Chaz, Jess, Jazz, Chess<#ff0>>." ;
         : print "{book_is} <See Pride Preside<#ff0>>." ;
         : print "{book_is} <Thumb, Sing Something<#ff0>>." ;
         : print "{book_is} <Nor Fight For Night<#ff0>>." ;
         : print "{book_is} <My Skill, Sky, Mill<#ff0>>." ;
         : print "{book_is} <Tad, Who HAD To<#ff0>>." ;
         : print "{book_is} <Kenny Muller's Many Colors<#ff0>>." ;
         : print "{book_is} <My Son Simon<#ff0>>." ;
         : print "{book_is} <Two Trolls' True Tolls<#ff0>>." ;
         : print "{book_is} <Socially Show Sully<#ff0>>." ;
         : print "{book_is} <Dang! Big Bang, Dig!<#ff0>>." ;
         : print "{book_is} <Fusty Trite Trustee Fight<#ff0>>." ;
         : print "{book_is} <Mirth, Waking, Worth Making<#ff0>>." ;
         : print "{book_is} <Toil, Anchor, Oil Tanker<#ff0>>." ;
      }
      : increment "books_read";
      : if (books_read == 17) {
         : print "That's all the books. They'll cycle now." ;
         : set_integer var = "books_read" "0" ;
      }
   }
   say_half : subroutine {
      : cycle key = "one_right" predictable_order = "true" skip_interval = "0" max_loops = "1" {
      : print "One of those words felt right, but the other didn't. You must be halfway there." ;
      : print "Again, you feel like you got halfway there." ;
      on_exhausted {
         : print "One word right, one word wrong." ;
      }
   }
   }
   reflexive_warp_reject : subroutine {
      : print "You're already here!";
      : set_integer var = "latest_warp_number" "-1" ;
      : done ;
   }
   think_thoughts : subroutine {
      : if (!think_chalice_map && !think_fellow_yield && !think_grim_tune && !think_healing_still && !think_hunters_grill && !think_master_plan
   && !think_shift_goals && !think_hi_mouse) {
         : print "There's nothing on your mind that you tried to do but weren't able to." ;
         : return ;
      }
      : print "Here is what you tried to do, and you haven't gotten it to work yet:" ;
      : if (think_chalice_map) {
         : print "-- get the CHALICE MAP (west hub, NE)";
      }
      : if (think_fellow_yield) {
         : print "-- make the FELLOW YIELD (west hub, NW)";
      }
      : if (think_grim_tune) {
         : print "-- sing a GRIM TUNE (east hub, NE) once you have a melody and lyric inspiration";
      }
      : if (think_healing_still) {
         : print "-- feel (or discover a) HEALING STILL (Stealing Hill)";
      }
      : if (think_hunters_grill) {
         : print "-- start up the HUNTERS GRILL with a gift of food (west hub, W)";
      }
      : if (think_master_plan) {
         : print "-- have the strength and self-belief to get the MASTER PLAN (west hub, N)";
      }
      : if (think_shift_goals) {
         : print "-- help others out enough to be able to SHIFT GOALS (west hub, SW)";
      }
      : if (think_hi_mouse) {
         : print "-- have a reason to say HI MOUSE to invite it back into your house";
      }
      : gosub "check_additional_meta" ;
      : return ;
   }
   tutorial_choice : subroutine {
      : if (footnotes_available) {
         : return ;
      }
   : ask_bool {
      question   = {qt} has a tutorial mode for the first few puzzles. Would you like to use it?
      yes_answer = Yes, I'd like to use the tutorial.
      no_answer  = No, I don't need the tutorial.
      var        = in_tutorial
      }
      : print {( "Note you can change in and out of tutorial mode with " + tut + " " + yn + " before you have completed the first few tasks, though this may break narrative continuity." )} ;
      : press_any_key ;
      : clear_screen ;
      : ask_bool {
      question   = {qt} also allows for color-coded hinting for important location details. This may help, or it may spoil things, too. You can change this option in-game, but I want the player to be aware of it to start. Would you like to activate it?
      yes_answer = Yes, I'd like color-coded hinting.
      no_answer  = No, I'd prefer not to have color-coded hinting.
      var        = use_color_coding
      }
   }
   long_words_note : subroutine {
      : if (!long_word_warn) {
      : print "<ALSO<#f0f>>: in general, longer words will work, but parser conventions have evolved to help save the player keystrokes." ;
      : set_true "long_word_warn" ;
      }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( footnotes_available ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "footnotes_available";
         : gosub "win_game_stub" ;
      }
   }

   options_cheat : subroutine {
      : match "cheat -" {
         : print "CHEAT alone doesn't work. You need to CHEAT YES or CHEAT NO." ;
         : done ;
      }
      : match "cheat yes" {
         : print "CHEAT is now activated. You don't have to do puzzles in order." ;
         : set_true "cheat_dont_require" ;
         : done ;
      }
      : match "cheat no" {
         : print "CHEAT is now deactivated. You will have to do puzzles in order." ;
         : set_false "cheat_dont_require" ;
         : done ;
      }
      : print "CHEAT requires YES or NO." ;
      : done ;
   }

   options_colorhint : subroutine {
      : match "ch -" {
         : print "CH/COLORHINT alone doesn't work. You need to CH YES or CH NO." ;
         : done ;
      }
      : match "ch yes" {
         : print "Color hints are now activated." ;
         : set_true "use_color_coding" ;
         : done ;
      }
      : match "ch no" {
         : print "Color hints are now deactivated." ;
         : set_false "use_color_coding" ;
         : done ;
      }
      : print "CH/COLORHINT requires YES or NO." ;
      : done ;
   }

   options_list : subroutine {
      : print {( "Many games have options for sound, etc. " + qt + " uses <YOUROPT YES/Y<#88f>> and <YOUROPT NO/N<#88f>> to change them. <YOUROPT <#88f>> shows its status." )} ;
      : if (tutorial_in_options)
      {
         : print {( tut + " is the first option command, " + (tutorial_done ? "but you've finished the tutorial, so I won't mention it again" : "though it's disabled once the tutorial is done" ) + "." )} ;
         : if (tutorial_done) {
            : set_false "tutorial_in_options" ;
         }
      }
      : print "{ch} is used to toggle colored text hints." ;
      : print "{notif} is used to toggle score notification." ;
      : print {( "Note that {qt} uses " + yn + " to toggle options instead of " + on + " and " + off + ", since " + on + " is a preposition, which is rejected by the simplified version of Adventuron's parser  used here." )};
      : print {( "Also note that an option alone will not be recognized. At least, not in the initial version of " + qt + "." )} ;
      : if (in_debug) {
         : print "DEBUG OPTION: CHEAT turns off/on dependencies in hub puzzles so you can complete them in any order." ;
      }
      : gosub "check_additional_meta" ;
   }

   options_notify: subroutine {
      : match "notify yes" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "notify -" {
         : print {( "Toggling <NOTIFY<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "notify *" {
         : print {( "The argument after <NOTIFY<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   options_tutorial: subroutine {
      : match "tutorial yes;tutorial y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "tutorial no;tutorial n" {
         : print "Tutorial mode is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "tutorial -" {
         : print {( "Toggling " + tut + " without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "tutorial *" {
         : print {( "The argument after " + tut + " wasn't recognized. " + notify_string )};
      }
   }
   tutorial_progress : subroutine {
      : if (!tutorial_1_about_done) {
         : print {( tcue + "An author frequently implements an " + abt + " commands page for the player to access. This contains details that might disrupt the cover-screen narrative. You can try it now." )} ;
         : return ;
      }
      : if (!tutorial_2_verbs_done) {
         : print "{tcue}The {verbs} meta-command is useful to see what the most common commands are. A meta-command is defined as a request for game status that doesn't cause time to pass.\nWhile there are other meta-commands to try, {verbs} will give you the most useful information now, so let's try that next." ;
         : return ;
      }
      : if (!tutorial_3_additional_metaverb_done) {
         : print {( tcue + "The " + abt + " and " + verbs + " meta-commands tipped off additional other meta-commands, listed in <orange<#f80>>, that may help you get your bearings. You should try one now." )};
         : return ;
      }
      : if (!tutorial_4_x_me_done) {
         : print {( tcue + (tutorial_x_me_cued ? xme + " is a standard command to start text adventures, to get your bearings. You'll want to type it now to continue the tutorial." : "Now you've looked into the meta-commands, you'll want to have a look at yourself. One convention of text adventures is that " + xme + " provides clues of who you are and what you're doing with relatively few keystrokes. So " + xme + " makes sense as your first in-world command.")  )} ;
         : set_true "tutorial_x_me_cued" ;
         : return ;
      }
      : if (!tutorial_5_inventory_done) {
         : print {( tcue + "Now you examined yourself with " + xme + ", another common command is to take inventory to verify you are carrying the item you found. This can be shortened with <I<#f80>>." )} ;
         : return;
      }
      : if (!tutorial_6_x_ask_done) {
         : print {( tcue + "Now that you verified you found something new, the next thing to do is to examine it with <X TASK<#0f0>>. Adventuron also recognizes <X ASK<#0f0>> and <X OOH<#0f0>>, but not <X TO<#0f0>>, as Adventuron ignores prepositions." )} ;
         : return;
      }
      : if (!tutorial_7_listen_done) {
         : print {( tcue + "sometimes a game will indicate you should use one of your senses. While guess-the-verb is frowned upon in parser games, having only five physical senses should limit the required guesswork nicely." )};
         : return;
      }
      : if (!tutorial_8_talk_voice_done) {
         : print {( tcue + "that voice is talking to you. While it's not likely the voice will talk back, you can still try with {tlk} or <TALK VOICE<#0f0>>." )};
         : return;
      }
      : if (!tutorial_9_go_west) {
         : print {( tcue + "the {cc_whoa_guest} must be a hint. Perhaps you should determine which direction it wants you to go." )} ;
         : return ;
      }
      : if (!tutorial_10_first_base) {
         : print "{tcue}{cc_whoa_guest} had you GO WEST. What about the {cc_burst_face}?" ;
         : return ;
      }
      : print "This is a bug. You should have finished the tutorial by now. Let me know how this happened." ;
   }
   tutorial_shutoff : subroutine {
      : if (in_tutorial) {
         : print {( "Congratulations! You've finished the tutorial. Now on with the game. While the tutorial is over, you can still use " + hint + ", though <HELP<#f80>>, another often useful command, is reserved by Adventuron for general parser guidance." )};
      }
      : set_true "tutorial_done";
      : set_false "in_tutorial";
      : press_any_key;
   }

   meta_about : subroutine {
      : print "{qt} was made for the TALP 2025 jam after years of judging it. I always wanted to write an Adventuron game." ;
      : print "You can see what sort of commands {qt} uses with {verbs}." ;
      : print "You can find specific thanks in the {thx} command." ;
      : if (!tutorial_1_about_done) {
         : set_true "tutorial_1_about_done" ;
         : increment "tutorial_score" ;
      }
   }
   meta_thanks : subroutine {
      : print "Thanks to TALP admins past and future: {tx_ca} and {tx_gf}. Thanks to those who came before who wrote so many great games that made me want to write something more welcoming than usual.";
      : print "Thanks to {tx_ca} for creating Adventuron.";
      : print "Thanks to my testers: {tx_wc}, {tx_gf} (who also helped me with collections,) and {tx_ll}.";
      : print "Thanks to you, for playing this game.";
      : gosub "check_additional_meta" ;
   }

   check_additional_meta : subroutine {
      : if (!in_tutorial || tutorial_done) {
         : return ;
      }
      : if (tutorial_1_about_done && tutorial_2_verbs_done &&  !tutorial_3_additional_metaverb_done) {
         : print {( tnote + "You found one specific meta-command. There are others, but I didn't want to force you to see them all. You can if you want. You just need to know that a robust text adventure takes steps to help the player not feel lost. This wasn't always the case back in the '80s, when disk space was much scarcer." )} ;
         : set_true "tutorial_3_additional_metaverb_done";
         : increment "tutorial_score" ;
      }
   }

   verb_list : subroutine {
      : if (!tutorial_2_verbs_done) {
         : set_true "tutorial_2_verbs_done" ;
         : increment "tutorial_score" ;
      }
      : print {( "While " + qt + " requires you to guess some verbs as part of a puzzle, it has a simplified parser otherwise." )} ;
      : print {( qt + " uses all eight planar directions, N S E W NW NE SE SW (don't worry! The diagonal directions are restricted to two hubs,) and U for up as well. You can use the long form of each direction, but it is not necessary. Also, <OUT<#0f0>> leaves if there is only one exit." )} ;
      : print "You can {tak} an item, but there is no need to <DROP<#0f0>> it. You can also <X<#0f0>> it, which is short for <EXAMINE<#0f0>>." ;
      : print "You can {tlk} (<T<#0f0>>) to people you see. A subject or \"to\" is not necessary, as there will be no more than one other character per room." ;
      : print {( "No other standard commands are needed to win " + qt + ". However, " + meta + " will describe meta-commands, and <OPTIONS<#f80>> shows options that toggle. Also, many verbs have abbreviations." )} ;
      : if (jump_commands_notified) {
         : print {( "To save keystrokes, you can jump around hub locations with " + v_eb + " (east branch.)" + v_pb + " (plain base,) " + (point_healing_still ? "" : v_sh + " (stealing hill,) ") + v_wt + " (west tiles,) " )} ;
      }
      : if (footnotes_available) {
         : print "By winning the game, you've opened up footnotes. {footnote_cue}.";
      }
      : if (in_debug && !footnotes_available) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }
   verb_meta_list : subroutine {
      : print {( abt + " gives info about the game." )} ;
      : print {( thx + " gives info about people who helped with the game. I usually use {cred}, but Adventuron reserves that for its own." )} ;
      : print {( "<THINK<#f80>> reminds you of commands you tried that should work, or will work in the future, but you didn't yet have the resources." )} ;
      : print {( "Adventuron also offers the standard parser meta-commands of <SAVE<#f80>>, <RESTORE<#f80>> and <QUIT<#f80>>, to save a game for later, come back to it, or quit." )} ;
      : print {( "Adventuron-specific " + meta + " commands include <TSTART<#f80>> and <TSTOP<#f80>>, which start and stop a transcript." )} ;
      : gosub "check_additional_meta" ;
   }
   track_achievements : subroutine {
      : if (achieve_ssss) {
         : print "(Already got the {achievement_ssss} achievement for not returning to Thor until you got the grail)" ;
      } : else_if (achieve_ssss_pre) {
         : print "For not returning to Thor until you got the grail, you win the {achievement_ssss} achievement!" ;
         : set_true "achieve_ssss" ;
      } : else {
         : print "You haven't unlocked the {achievement_ssss} achievement yet." ;
      }
      : if (achieve_haih) {
         : print "(Already got the {achievement_haih} achievement for taking inventory with the maximum number of items possible)";
      }
      : else_if (achieve_haih_pre) {
         : print "For taking inventory when carrying around the maximum number of items possible, you win the {achievement_haih} achievement!" ;
         : set_true "achieve_haih" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_haih} achievement yet." ;
      }
      : gosub "track_achievements_qwwq" ;
      : gosub "track_achievements_kssn" ;
      : if (achieve_cnnc) {
         : print "(Already got the {achievement_qwwq} achievement for finding all bonus points)" ;
      }
      : else_if (bonus_score == max_bonus_score) {
         : print "For finding all the bonus points, you win the {achievement_cnnc} achievement!" ;
         : set_true "achieve_cnnc" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_cnnc} achievement yet. You got {bonus_score} of {max_bonus_score} bonus points this time around." ;
      }
      : if (achieve_tmmt) {
         : print "(Already got the {achievement_tmmt} achievement for a three-room jump)" ;
      } : else_if (achieve_tmmt_pre) {
         : print "For making a three-room jump, you win the {achievement_tmmt} achievement!" ;
         : set_true "achieve_tmmt" ;
      } : else {
         : print "You haven't unlocked the {achievement_tmmt} achievement yet." ;
      }
      : if (achieve_cjjc) {
         : print "(Already got the {achievement_cjjc} achievement for trying to jump to a blocked-off room)" ;
      } : else_if (achieve_tmmt_pre) {
         : print "For trying to jump to a blocked-off room, you win the {achievement_cjjc} achievement!" ;
         : set_true "achieve_cjjc" ;
      } : else {
         : print "You haven't unlocked the {achievement_cjjc} achievement yet." ;
      }
      : if (achieve_dbbd) {
         : print "You already unlocked the {achievement_dbbd} achievement." ;
      } : else {
         : collection_subtract {
            collection_1 = jump_list
            collection_2 = jump_list
            result       = jump_set
         }
         : if (collection_count("jump_set") == 1) {
            : print "For performing all twelve jumps between jumpable rooms, you win the {achievement_dbbd} achievement!" ;
            : set_true "achieve_dbbd" ;
         } : else {
            : print "You haven't unlocked the {achievement_dbbd} achievement yet." ;
         }
      }
      : if (achieve_cddc) {
         : print "You already unlocked the {achievement_cddc} achievement." ;
      } : else_if (achieve_cddc_pre) {
         : print "For performing all twelve possible warp jumps without duplicating one path, you win the {achievement_cddc} achievement!" ;
            : set_true "achieve_cddc" ;
      } : else {
            : print "You haven't unlocked the {achievement_cddc} achievement yet." ;
      }
      : if (achieve_srrs) {
         : print "You already unlocked the {achievement_srrs} achievement." ;
      } : else {
         : if (hub_think_needed == 7) {
            : print "For trying to flip all seven hub rooms, including the hill, before you were ready, you win the {achievement_srrs} achievement!" ;
            : set_true "achieve_srrs" ;
         } : else {
            : print "You haven't unlocked the {achievement_srrs} achievement yet." ;
         }
      }
      : if (achieve_gssg) {
         : print "You already unlocked the {achievement_gssg} achievement." ;
      } : else {
         : if (hub_think_needed == 0) {
            : print "For not flipping any hub rooms out of order, you win the {achievement_gssg} achievement!" ;
            : set_true "achieve_gssg" ;
         } : else {
            : print "You haven't unlocked the {achievement_gssg} achievement yet." ;
         }
      }
      : if (achieve_tnnt) {
         : print "You already unlocked the {achievement_tnnt} achievement." ;
      } : else {
         : gosub "footnote_endgame_check" ;
      }
   }
   track_achievements_kssn : subroutine {
      : if (achieve_kssn) {
         : print "(Already got the {achievement_kssn} achievement for ASKing Thor three times about everything)";
      }
      : collection_iterate "ask_list" {
         : if (int(item()) < 3) {
            : print "You haven't unlocked the {achievement_kssn} achievement yet." ;
            : return ;
         }
      }
      : print "For asking Thor three times about all the rules in the Player's Bill of Rights, you win the {achievement_qwwq} achievement!" ;
      : set_true "achieve_kssn" ;
   }
   track_achievements_qwwq : subroutine {
      : if (achieve_qwwq) {
         : print "(Already got the {achievement_qwwq} achievement for ASKing Thor about everything)";
         : return ;
      }
      : collection_iterate "ask_list" {
         : if (int(item()) == 0) {
            : print "You haven't unlocked the {achievement_qwwq} achievement yet." ;
            : return ;
         }
      }
      : print "For asking Thor about all the rules in the Player's Bill of Rights, you win the {achievement_qwwq} achievement!" ;
      : set_true "achieve_qwwq" ;
   }

   footnote_read_from_survivors : subroutine {
      : collection_modify { collection = "footnote_status_list" index -> (0) content -> ("" + footnote_1_status) }
      : collection_modify { collection = "footnote_status_list" index -> (1) content -> ("" + footnote_2_status) }
      : collection_modify { collection = "footnote_status_list" index -> (2) content -> ("" + footnote_3_status) }
      : collection_modify { collection = "footnote_status_list" index -> (3) content -> ("" + footnote_4_status) }
      : collection_modify { collection = "footnote_status_list" index -> (4) content -> ("" + footnote_5_status) }
      : collection_modify { collection = "footnote_status_list" index -> (5) content -> ("" + footnote_6_status) }

   }
   footnote_write_to_survivors : subroutine {
      : set_integer var="footnote_1_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 0 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 1 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 2 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 3 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 4 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 5 ) }) )} ;
   }
   win_game_stub : subroutine {
      : gosub "footnote_write_to_survivors" ;
      : win_game ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not here.
   ask_new_game                                   = Would you like to restart {qt}?
   ask_quit                                       = Do you wish to quit {qt}?
   invalid_choice                                 = {YN_or_12}
   post_quit = I hope you enjoyed the experience. Pressing any key will restart {qt}.
   you_cant_go_that_direction                     = {exitserr}
   unknown_verb                                   = Nothing comes from that. {verbs} gives a list of basic standard verbs{unknown_begin_note}.
   }
      }
   }

# end subroutines

## On_debug and on_startup both call the INIT/TUTORIAL subroutine, but on_debug sets a flag or flags to allow for cheat commands and also checks to make sure the footnote collections all have the same length, since we can't define objects or classes

on_debug {
   : set_true "in_debug" ;
   : print "Note to self and testers: remind me to comment out first two lines of on_debug if this appears." ;
   : gosub "init_check" ;
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

on_startup {
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

## on_tick is primarily used for the tutorial
## main on_tick (for searching)

on_tick {
   : if (in_tutorial) {
      : gosub "tutorial_progress" ;
   }
   : if (!hill_aware_you_stole && is_carried("travel_grail") && !is_at("stealing_hill")) {
      : print "As you walk away, you hear the hill screaming. It realizes you have stolen something. Something valueless to it, but the principle's the important thing." ;
      : set_true "hill_aware_you_stole" ;
   }
   : if ((latest_warp_number != -3) && (!achieve_cddc_pre)) {
      : gosub "evaluate_warp" ;
   }
   : if (!ever_note_footnote && ever_reveal_footnote) {
      : set_true "ever_note_footnote" ;
      : print "{otn}you can view footnotes with {footnote_cue}. Each individual footnote's notification only appears once. I won't reveal how many there are, but you can figure the precise number out by guessing and getting different error messages.";
      : print "You can also type <FOOTNOTE 0<#f80>> to get a list of footnotes." ;
   }
}

## on_describe is for moving around

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_pre_command {
   : match "west _" {
      : if (is_beside "cheering_voice") {
         : if (in_tutorial && !tutorial_8_talk_voice_done) {
            : print "That's the way to go, but since this is a tutorial, there's another hoop to walk through, first." ;
            : done ;
         }
      : gosub "add_point" ;
      : set_integer var="tempint" "4" ;
      : gosub "footnote_reveal" ;
      : print "The voice says \"Yes, yes. That is the right way.\"{footnote_reveal_text} The fogginess clears a bit, but as you go west, you can't see anyone.\n\"Just a little more vetting. You'll meet someone who, uh, failed. Don't worry, though. They're obnoxious but harmless.\"";
      : set_true "point_go_west" ;
      : set_true "tutorial_9_go_west" ;
      : increment "tutorial_score" ;
      : press_any_key ;
      : goto "burst_face" ;
      : redescribe ;
      }
   }
   : if (!examine_warn) {
      : match "examine *;look *" {
         : if (original "verb" == "examine") {
            : print {( otn + " to save keystrokes, you only need to type <X<#0f0>> (noun) to examine." )} ;
            : gosub "long_words_note" ;
            : set_true "examine_warn" ;
            : press_any_key ;
         }
      }
   }
   : if (!look_warn) {
      : match "look -" {
         : if (original "verb" == "look") {
            : print {( otn + " you only need to type <L<#0f0>> to look." )} ;
            : gosub "long_words_note" ;
            : set_true "look_warn" ;
            : press_any_key ;
            : redescribe ;
         }
      }
   }
   : if (!inventory_warn) {
      : match "inventory _" {
         : if (original "verb" == "inventory") {
            : print {( otn + " you only need to type <I<#0f0>> to take inventory." )} ;
            : gosub "long_words_note" ;
            : set_true "inventory_warn" ;
            : press_any_key ;
         }
      }
   }
}

## main on_command

on_command {
   : match "credits _" {
      : if (!credits_to_thanks_note) {
         : mask {
            : print "{otn}Since Adventuron reserves {cred}, {thx} is the command to use to see people who helped specifically with {qt}." ;
            : press_any_key ;
            : set_true "credits_to_thanks_note" ;
         }
      }
   }
   : match "footnote _" {
      : if (footnotes_available) {
         : gosub "footnote_printer" ;
         : done ;
      }
      : else {
         : print "Footnotes aren't available until after you've won the game." ;
      }
      : done ;
   }
   : if (jump_commands_notified) {
      : match "sh -" {
         : if (point_healing_still) {
            : print "{stealing_hill_mad}" ;
            : if (!achieve_cjjc_pre) {
               : print "(However, just trying to find this sort of loophole, making it back to a room the developer shut off, shows you're an enterprising adventurer and might be a very good tester for other games. It's an important part of the whole process, as testers often see programmers' blind spots. And it can maybe help start you on the way to making your own game! Okay, ignore this if you already have. But either way, a small silly achievement awaits at game's end for trying this.)" ;
            }
            : set_true "achieve_cjjc_pre" ;
            : done ;
         }
         : if (is_at "stealing_hill") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "12";
         : gosub "mark_jump" ;
         : goto "stealing_hill" ;
         : redescribe ;
      }
      : match "wt -" {
         : if (is_at("hub_e_n") || is_at("hub_e_ne") || is_at("hub_e_e") || is_at("hub_e_se") || is_at("hub_e_s") || is_at("hub_e_w") || is_at("hub_w_nw")) {
            : set_true "achieve_tmmt_pre" ;
         }
         : if (is_at "west_tiles") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "4";
         : gosub "mark_jump" ;
         : goto "west_tiles" ;
         : redescribe ;
      }
      : match "eb -" {
         : if (is_at "east_branch") {
            : gosub "reflexive_warp_reject" ;
         }
         : if (is_at("hub_w_n") || is_at("hub_w_ne") || is_at("hub_w_e") || is_at("hub_w_s") || is_at("hub_w_sw") || is_at("hub_w_w") || is_at("hub_w_nw")) {
            : set_true "achieve_tmmt_pre" ;
         }
         : set_integer var = "latest_warp_number" "8";
         : gosub "mark_jump" ;
         : goto "east_branch" ;
         : redescribe ;
      }
      : match "pb -" {
         : if (is_at "plain_base") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "0";
         : gosub "mark_jump" ;
         : goto "plain_base" ;
         : redescribe ;
      }
   }
   : gosub "item_based_points" ;
   : match "salesmen _"  {
      : if (is_at "nameless_lameness") {
         : print "Good guess, if this were an anagram game." ;
         : done ;
         }
      }
   : match "talk _" {
      : match "talk me" {
         : print "\"Me so see-mo'!\", you mumble to yourself in encouragement." ;
         : done ;
      }
      : match "talk *" {
         : print "Nobody here like that to talk to." ;
         : done ;
      }
      : print "I couldn't find anyone here to talk to." ;
      : done ;
   }
   : match "take _" {
      : if (!take_note) {
         : print {( "{tak} is not widely used in {qt}. Most of what you take, you take automatically. There " + (point_take_crackers ? "was that" : "may be a") + " special-case exception, though." )};
         : set_true "take_note" ;
         : done ;
      }
      : print {( "This " + (point_take_crackers ? "wasn't" : "isn't" ) + " where you need to {tak}." )} ;
      : done ;
   }
   : if (has_visited "plain_base") {
      : match "theory bore" {
         : if (is_beside "beery_thor" && bonus_point_theory_bore) {
            : print {( "Thor is " + (point_first_base ? "" : "likely ") + "bigger than you. Best not to overplay this." )} ;
         }
         : else {
            : print {( is_beside("beery_thor") ? "You worry Thor will be upset by this observation, but he booms \"Ha! Good one. I was sort of hoping you'd figure that. I actually don't mind people saying that. It implies I said something too smart. Better than being called a musclehead or whatever.\"" : "You snicker at what you've found, but then figure you better not do so to Thor's face." )} ;
            : set_true "bonus_point_theory_bore" ;
            : gosub "add_bonus" ;
         }
      }
   }
   : match "turkey quest" {
      : if (bonus_point_turkey_quest) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke might make things a bit stale." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point." ;
         : set_true "bonus_point_turkey_quest" ;
         : gosub "add_bonus";
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;

   }
   : match "exits _" {
      : if (is_at "nameless_lameness") {
         : print "There's a puzzle here to start, before you get a clue which way to go. The tutorial can walk you through it." ;
      } : else_if (is_at "burst_face" ) {
         : print "The way forward is beyond the {cc_burst_face}. It's not a direction, but it's similar to changing WHOA GUEST to GO WEST." ;
      }
   }
   : match "think _" {
      : gosub "think_thoughts" ;
   }
   : match "verbs _" {
      : gosub "verb_list" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "thanks _" {
      : gosub "meta_thanks" ;
   }
   : match "drop _" {
      : print {( drop_referenced ? "No need to <DROP<#0f0>> anything." : "While classic text adventures often required the player to use <DROP<#0f0>> due to inventory limits, this is often regarded as needless fiddling today. Modern text adventures, such as this, often take steps to keep the player's inventory manageable so they can focus on puzzles, finding plot-plausible reasons to dispose of items that are no longer necessary. Plus there aren't many items to carry here." )};
      : set_true "drop_referenced" ;
   }
   : match "xyzzy _" {
      : set_integer var="tempint" "2" ;
      : gosub "footnote_reveal" ;
      : print "A low voice booms \"Vexing howl? Hexing?! VOWELS!\"{footnote_reveal_text}";
   }
   : match "listen _" {
      : if (point_see_glimmering && !summoned_teary_chimes && (is_at "gravel_trail" || is_at "my_house")) {
         : print "You locate where the tone is coming from. Teary chimes, at the front of your house. They remind you of many things. Maybe there's something concrete to reflect on." ;
         : create "teary_chimes" target="gravel_trail" ;
         : set_true "summoned_teary_chimes" ;
         : done ;
      }
      : print "You don't hear anything right now." ;
      : if (!listen_no_subject_note) {
         : print "{otn} listening is a general command. It will ignore any subject." ;
      }
      : done ;
   }
   : match "x ooh" {
      : if (is_carried "ooh_task" && !tutorial_6_x_ask_done) {
         : mask {
         }
      }
   }
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "Your <tutorial score<3>> is " + tutorial_score + " out of <" + max_tutorial_score + "<#ff0>>." )} ;
      }
      : print {( "Your <core score<4>> is " + score + " out of <" + max_score + "<#f00>>." )} ;
      : if ((has_visited "west_tiles") && (has_visited "east_branch")) {
         : print {("You've solved " + points_left_side + " of 7 parts of West Tiles and " + points_right_side + " of 7 parts of East Branch.")}
      }
      : print {( bonus_score_string )} ;
      }
   : match "option _;options _;opts _;opt _" {
      : gosub "options_list";
   }
   : if (in_debug) {
      : match "cheat _" {
         : gosub "options_cheat" ;
      }
   }
   : match "i _" {
      : if (carried() == 9) {
         : set_true "achieve_haih_pre" ;
      }
   }
   : match "notify _" {
      : gosub "options_notify" ;
   }
   : match "tutorial _" {
      : gosub "options_tutorial" ;
   }
   : match "meta _" {
      : gosub "verb_meta_list" ;
   }
   : match "ch _;colorhint _" {
      : gosub "options_colorhint" ;
   }
}

# end on_command

## assets are arranged by room, in approximate discovery order. QT is listed below TQ, with F

assets {
   graphics {
      nameless_lameness : dynamic_graphic {( tutorial_7_listen_done ? "nameless_lameness_2" : "nameless_lameness_1" )} ;
      nameless_lameness_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4dLS0v/AACAgICPj49CHXltAAAB6UlEQVRYw+XYLZaDMBAHcHKEvFe9Ar0OiUXVIbhCe4TKWnoABBdAILFcANFb4LkC29eGlkxmhoRAzf59y+8lM/kKAhUhVYZX+uiZ9pPwlbtK/sytVMlU0ul/ZPJM/c5pykXlOj4SvDP97kcDxBDwOwG6rQFiAdCggBICsun7hxfguBYwEIA7Dij8AQEKiKgSAIDMACQJmANbwGAJ0EqgMAAHd4DQAaANGhaQGYDEGwCKIAQ1eJ/PwGwAUgg4rgb0c0ADAfmXASEAdNQMpKAEPoBKff9sWYR6EVgD5OaAGAXkXwAMGEAbAGQV8AAIAhBhgDwn1sF0PUA6ALo1gJoHwK0AAJrdAdIFAA8D5F7IAi7/DlBxAEECYgzQbQ6QC4CWWwhnVSgluRfwUyDNLhy0/RjbizYEiK0AKQ2ovgs4kIATBpAkIGYAnzNxaQFgzwPLgGZ7wOgB6CCgIO4ls0PhG3DmALMu7HcGXO0ALQe47QqIXAClATAuBhUAjCPWhr6AjAbUqwBxy3UBUgQMoGIA5GbYugLMIqiJlWgJ0GOX42VA5gkAp3LyecIAlJ4AYQD49xEaYKyF1O306gRo9gYYp/LeFVBQhyJjBlQbAIDA3icMQOgAkNRKqPUh/0YVw/cRGwCcA2MAtLX4D/JD09PQHmHUAAAAAElFTkSuQmCC";
      nameless_lameness_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4dLS0v/AACAgICPj49CHXltAAAB80lEQVRYw+XYLZaDMBAHcHKAFXkPvQK9DolF1SG4QnuESiw9AIILIJBYLoDoLfBcgd22oZDJzED4qNm/b/m9ZCZfjqMipEr3Sus/U4/xXrmrpM/ccpVYJRr+R4bPlO+ch1xVkv4vztcjD8Hwu28NEEDAzwBo9gaIGUCFAnIIiIfvuy/AaS2gIwB3HJBtBzgowKdKAABiAxCGYA4IwBi9CGcBWglkBsBdChhHQOgA0AYVC4gNQGg/AgAAisADNXifzsBkACIIOK0GtFNABQHphwEeADTUDESgBEZAob5/WViEehEsBsjdAQEKSD8A6DCANgDIKrABIAiAjwHSlFgHo/UAaQFo1gBKHgC3AgCoDgdIGwA8DJB7IQu4/jtAwQEECQgwQLM7QM4Aam4hnFShlORewE+BNLuw0/ZjbC/aESD2AkQ0oPgswCUBZwwgSUDAAMYzcb4AwJ4H5gHV/oB+A6CBgIy4l0wOhW/AhQNMurA9GJAsA9Qc4HYowLcB5AbAuBgUAND3WBtuBcQ0oFwFCGquC5AiYAAFAyA3w9oWYBZBSaxEc4AWuxzPA+KNAHAqJ58nDEC+ESAMAP8+QgOMtZC6nSZWgOpogHEqb20BGXUoMmZAtQEACOx9wgB4FgBJrYRaH1L3ghYAvOUAOAfGAGhr8S96lNUYSAJIWgAAAABJRU5ErkJggg==";

      first_base : dynamic_graphic {( point_bro_poor ? "first_base_after_bro_poor" : "first_base_before_bro_poor" )} ;
      first_base_before_bro_poor : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAADStIwAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP+lKioA//////9h8viPAAABXUlEQVRYw8WYTWrEMAyFX5ddFCUnGJgL5Cg9X1Y9z0AhJyhzBXnZRVFlx83Psn5BNjMQBjJ8fJae4sCoNa7r1v4P4ABSJegB8PO8RAEB8OWLV0BswUrAKiAAVK5QAKZ83AFdBQSAvDvAk1UAYgf8bgcgFRAA+Zv3gFMAqn+QATgFhIF5zq3IxiHa9c/zh+kbG4cEwOtsCnoiNAKgtIGCH4po70EDzkNxGAOLEOUjp+cCebnFASggh7uzgsF0jGxDk8/lpMCvGxQwUbwsRwVD/m2MBDA3oLuCcvV/BYyBxxYEWUG4AZPHfdJNQXwNmHxPk4fR1gbhXQC77wDhOfA3EEz3KAxNwgqAChA+C2oYehrqYRxaFwChBFBFiDIOhRJwAQAngEnCDSD1eSp2gBrEvc4FqI9kqdPJyP2vAL3Oht6CpQZSr9Nx3gHQAtoBtAKkXm9ISgmAFkACCC3AfgHKKpPEICpolwAAAABJRU5ErkJggg==";
      first_base_after_bro_poor: base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAADStIylKiqAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////8EusaTAAABiklEQVRYw8WXwXHDIBBFN7l4ckJEBTBxBxoV4JZ0cy05pZU0oHRgdxBAKcCbZcFOruZ7YGc0nEBvHrsLENeGzeEYC6qeuRWCbgAPUgAAqIJxtt0AVME8Tq4bQM6CyXYDUAXjhGUBBJAUzGAhQACsO4AVAgbwgF6AAXA2gCgAAXAFIADeDlEAUbCXsN0A2L4qgOsGsBELwJvtBsCGfxAFMEA0nBRUFwIOwAemBOC6AAQBEIgEYFsDXNIXdAE1UKkAAPDMPmgOsALY1gBnfxEAfnn/KACuOcB6CnmFDGDbA3wHrUN63lefCLgBJjLAoQgAnM6rN5EoQoci0Ae8XwPRcdmRAe4FSCPyXzL/KGEABVAn/CSzKwBZwWBbAkSZS1eArMA8uZYAUoAxAZApt8OBo20IQKIgahaacjuU8W4FAICUoJHfEy0m3w6HpMU2BSC6bYEo0OFeBfUA8QpAZY2tsYGYkkAF3J4IbXOA0h4IwPL3QmhaBbIDUoX0X0DTPhBTEaahZGBuhRWd8BffnJc/jN0UowAAAABJRU5ErkJggg==";

      burst_face_only : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4f//4AAAECAgICPj49XvJqTAAAC10lEQVRYw62YDY70IAiG8QAmeP8raTIHaO/ytYI/qBXcfE122tnuDI/w+kIX7uH4gTzkTRfWh99+x/Q93THd2H4QPuIH2H6HASA+P1dawftlAkYSBCUB+X6Mb4hU//DKAFeJ/QXv5wRAd0XXHcEyPnA8ihUFQCy3vj7sxwSAQ758z3RdCQBgW4LEr1ctQVKq9wIQWI1fakCxIacEYXtMAHEpwo8P08m1+AHxfY+Z4Xl1XA0DQMFIK4Df9jsc6628wrv2DMCZMAAkKn0nOkMCBgDk6M/J0VuHjPZ9eN5rsQW/ZoAf2DKQF8xCQGibArcAkaJecekDyQBAMnxXzUrAEDotbmtwS7HPTpizA1oGePXvVVZiEARo12DvA80EdAAu9+MDpESSAaVFl4AIHFsGtjY4aoADQqk5XUE4AohNg7kE8QCgC8jZb281gCS9aLENdQVysvuuzOVQAR71lzZAPkzb4U8Aohe2xrTfhddCBdeZDxQAXMwDihX6PrI4gaAy+JCTBSiLx/0+GAG6kKVL6zUo+ocVALvi1gdeCVxrI0qWGpRW4Fw/CUFxBEMKojoTGgCepTYA5DbMfVlLwWiEyToPCIDQAOpcVLuD1YpSLXsDiElJwRi2b0ZYd6iagmq8qZWAahOjEaAS1F85KGSWFKQeBG5zDdzkPK0o5I+5X541xAlATwG2kViaYR6TVIBUpw/jk1FLQGn6ciR+I2NpEKhPhYmSX4VwAEAZd1iLLUWpzoWiE6YiAritNXBdI4ROiaUSYAPohZiOAChEzT4OCQjuCOBbA/c3AHbjJ8L4nKoB+OnRJKvxCMCFyYPCYApoeTLhqSSr4AQgOJyfz0Ei4W4kETNZOi9Bq3tZd98hlNG898CtBn6aE7flopwMtgB+HIr/AwAO/yZxu8l04YGnTigB3BR/uw387IGcDDOAG6NN/7DabQPpgf1e/CsAzpPhZhv40QPb8Q/bUeMLJVVwzgAAAABJRU5ErkJggg==";

      east_branch : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABj0lEQVRYw+2WYY6EIAxGv+wegCts8AKb8f536g1YCqiIONtS+TdNJKiEPp9Fgf8/lvWI13ZxbeLt4DcBwRjfS3QH0LtmBug91Q2AVoAMoPdYNwBaAUKAznP1AdQChAAxHZQhFCAFWFYXVEFCAVIArwfwzwIsjqLXeLjgAqU2OMREnA2xw+cUe+DTOOT1MIDnBJwOgZMjnVAGoBBcAUgt3yY/C4A4D7cpGTd8oAbg27MBcp6A3M1AlYEwEQAbADgNOgCpJGYBpHLbCy/lPgGkImQuOcAqjGKANoD99bcG0iKMy1AYWgBOXIqQDgBXFWEulHkA1TJ0BYBCXnmhALipAOT2DxEKQHrzfK28gvQhmgGg+xR/AJ4G0O8HHga4id9v4wQfAPG/4LQNPXYbP1/dnat8VjlAf/4KwKt3xDqA/vQ1wJAC2AScAIYUwCbgDDCiADYBZ4ARBbAJaAAGFMAmoAEYUACbgBZArwA2AS2AXgFsAi4AagWwCbgAqBXAJuAKoFUAm4ArgFYBbAI6AEoFf6Nz3WvHUTc3AAAAAElFTkSuQmCC";
      west_tiles : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABbklEQVRYw+2WUY6EIAxAm50DcIUNXmAy3v9OvUEXJKwCxWkpOj9TIwFDyuOJCPj3sax7vPLDtYrTzicBgj6eG6gHwD0zA3Cz6gBoBcgAuGl1ALQChADMvHgAtQAhQBgOlCEUIAVYVkeqQKEAKYDXA/i5AIsjhHCH1BSrFEpCpCA7VGIZbtrasenwNRnAuzhuBkgXuVhPE6a97WIn9NMBQtqUO5cbz8cAiJKSDgDdAbDV0xooASgulhsAgAoDh0VI6OQAqzAaAGhewbGN0rwaAHTnizC38RqAbYT/T5D7DK8GCBtR3oLqjahYhGkjugBAuRV/AWYD6M8DkwE68XwYE3wBxP+C4hi6nzZ+f9iTqzyrHIDPfwDw6hOxDoBPfwQYUgA2AQXAkAKwCSgBRhSATUAJMKIAbAIqgAEFYBNQAQwoAJuAGkCvAGwCagC9ArAJaADUCsAmoAFQKwCbgBZAqwBsAloArQKwCWAAlAr+ADhk6qlVb5HUAAAAAElFTkSuQmCC";

      hub_w_n : dynamic_graphic {( point_master_plan ? "hub_w_n_after_master_plan" : "hub_w_n_before_plaster_man" )} ;
      hub_w_n_before_plaster_man : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAhElEQVRYw+3UywkAIQyE4RRg/0XkYgtbgLCteA7CrGwJIvz7yNwlH0OiNTiWgAQkIAHLL88BAyQWcErj3w3MHShwA8PoHThQgKSOAwoK6FYK3IDRgNES8AmAL2YCwjfkvYC6SWCr46PKa4CAKXBHAeIBAQOcBsQDAGIB9yliH9GuJCABF2/W9E17T7/QAAAAAElFTkSuQmCC";
      hub_w_n_after_master_plan : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAiUlEQVRYw+3VuRGAMAxEUfdfihI1QkVKFl+4ATPzk9VArIcu2gNHM8AAAwwwwAADDDDAAANwQMBxA9B8K4UAVOPpyZWFAE5acS2IXfwkAD13ja9XLwUyA70DWg2AAPEBKoqbgdsBvN6CNYTQHThrWNAdiNV8UXcgdw1UyoDWMPdfgGnBzEoCfosXzzjyF/ZYz+8AAAAASUVORK5CYII=";

      hub_w_ne : dynamic_graphic {( point_chalice_map ? "hub_w_ne_after_chalice_map" : "hub_w_ne_before_malice_chap" )} ;
      hub_w_ne_before_malice_chap : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw8XWQY7DIAwFUEtedeU7TC5g1Rftdu5Uaa7CAUbKGChtIGwIg22lqZRF/eLyE+BrrORYLMiop+ri4A/CBIBZD0RBtANs7QAU0IzgbgbQxsgAiqgEpgCgfQ9gCWj676kagR3g1V8FLgBBChTbBwosHgCIvfMHrABVCinfffq6nsM5wO9P/rgA8AhgI8AxBCEngPL5cgxmAYXhBgDTCWxNCt9PojqHdxsAa1utDEAHgMYw7BQgvZDEBiAtgCgaWoCYAXQJegI47gUg/QXoAhAqGWgGsAywyWkEnQwMrsIZQNmRgHgBJO8JxQog54q74s5lO0BMgSOAIRUaAbbe7eeaWASXAIzH7sXAaAYos68LV0+g1/+ZjrNgMeCVvgQIzzz/ei2ungC+50Cfe2fDCXxCkF+IcD2H8B8pnMnhJOBbywsQl8ANbg94dB6GKwAyAhAjQO8RMAj4A7zBbqsBSRiFAAAAAElFTkSuQmCC";
      hub_w_ne_after_chalice_map : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAbklEQVRYw+3S0QkAMAxCQWdpNoj779YVIlRKQAeQ+3g4yjiadIlVgJoBOgAbgHwfQQCrADUFdAAmAGmIIAAYEpAiCACOBJQIAlgEKAXQARgApCWCAGBJQIggAHgSmEcQwBpAqYAO4DGANEXwHXABCrUdDkSf978AAAAASUVORK5CYII=";

      hub_w_e : dynamic_graphic {( point_fell_short ? "hub_w_e_after_fell_short" : "hub_w_e_before_shell_fort" )} ;
      hub_w_e_after_fell_short : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABLUlEQVRYw8XWQRKDIAwF0N9tFky5gGdPt5wKL+AZah3bWqsQSDJ+ddwovJGQEdN58i3OweQc1AT+BlQF7gbUBd4GCATOBkgEvgaIBK4GyASeBggFjgZIBX4GiAXmBpwRzgXGhoxwTCgJyoYxNgEWQjgglAXV7zC2LAPWydEkODUM6z22Gf4JGYIcDRetyjEjVnOfQmXkQUMIWUKoZRw0m9KEoOsLPYTQvTOsCMflKapPI8KnxVl1x2aCQjD3RxMC0N8ov60pbcICwvZ5/Ly9S0zlUOJ1FAWBQYUpHmUB0+tUEsqCWnj5ECoCiKAQLBNDRQCzSrDDdBB4OS4lEPF8XUtg5uRCEPyxvMsZZLUS6N1RVxP8FqKB4FWOLSvhtClb3mOmiwkJVoJk1WUVeQKxBKKctnM+FgAAAABJRU5ErkJggg==";
      hub_w_e_before_shell_fort : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABHUlEQVRYw9XWQY6DMAwF0N+tF1G5wJzd65wqvQBnKBOVKbQB7NhWNB/YBXjCsQXm45TbtASzLpNy/YwrgdagFpwQVoH+O3gR3oJoAwSCYAMkglgDRAKR4fHjSPgWCAy9giahJQisBaSCOAPEAncDjgjHAmdDQWoTzgSehlIJqUE4F3gaUI9vwpWgbehrx1WwJxQI4j6SsBNMl7nPKbIjUpEQYpvynxLScAIwmvA34rymo5pgECzz0YVgKMNmNOVNWEDYrsfubmUo8+spBgKD+gVMv6eRYBLUT2AkgMhShvpimAhgNgk+MB0ErsdQAhEv11gCM+cQguCPZd3OIK9KoLejRhPiCqEgRG1HTSWCmlJzHzMNJmR4CbLXlDXkCVh7pDUhiROjAAAAAElFTkSuQmCC";

      hub_w_s : dynamic_graphic {( point_take_crackers ? "hub_w_s_after_take_crackers" : "hub_w_s_before_cake_trackers" )} ;
      hub_w_s_before_cake_trackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABN0lEQVRYw92VwW7DIBBEV/6D9c0nWv9xjvxkkXuuMjGx4xoSt4GxN2r3gkZC8GCGRT5eXPJ3AYBBpwJwtgUIiKUOU91GI4Awb4fp7PEisNTxAOF7s24kcFcQoB5BSo1fAfhTvIQhBSiNg1TvP57c+yWF1QQEgFPtvC1ASAEQCfwdAMwscNGG7nUWdDohWAJkr8BHBF0aksErSGKgt2cAwz6QIgxXBAfLTpgxDGsDzH/Dx8aHw0L45MrH9YF85Rko57IDmPUGl4EFGwCFCFKfgA0LCk0QMgF0CoRMAJ0CIRNQkfsqANzp1AL8Mp8FCF9nSvMA2Sdbqn8C6J8qkHq7pG5aqWYB3qSh9D8AwGfL6B1uAMroPSx4bwm9SwaU0DxA3/TrI5XqXQD6tl7zAM04T9tqzXfC4+oCbO+g76wTpBYAAAAASUVORK5CYII=";
      hub_w_s_after_take_crackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAADXUlEQVRYhc2Yy2oqQRCGhSGg7e1VBoqAEjznFQLi+whushRcucs6K8FlNj6AC2HWA4L74AMcyKnqduyqmp6bCSYVGVMO2t/8dZue1tsPW+s3ALy2mN3bpw86a2/k9/beyB9+eiO/++6N/H7qjfz2izfyBx/eyH+YeSOAV7b+cok+W3+3Q5+tfz6jz9bfbNBn6x8O6LP153P02frHI/ps/efnlhSgs5QC9HZSgOFZCtDdSAH6BylAey4FGBylAA8IIARYL6UA+50U4PMsBXjfSAHSgxTgZS4F+DhKAWYIwBOigwDc7yEA94cIwP0uAnC/jwDcbyMA9wcIwP0HAhARQAARAQQQEUAAEQEEEBFAABEBBBARQAARgSAArfSPAQDa30YACwkAf+zq+FYIAGMGcMZU4wAxWjMAGOHigEcLcAKg9emtCAAvcfyNCkCMay/wWw4A/yEJ6M0CTCH7uwLEEJcANFYA6OIhgmh0VeAEXoEpZJYBrMjRIbAYTAF7zAC2AE9XgCRNAFJ7sAB07UAUMLrmAImQ5UAIIOYATgGLwRSwRweAy0f0/QxgAhBP0hQmDoBORiMGYOMPvgpg+uheBQo4gGIFtsSLLxTBAdirQQnSWxVQOaBDoBWwV2hfXgFgCjTPAVcFKygIgVYALgrEEM6BGlXgQgCiD1AceCf0CrgC8ApgCjgFnkQVeIBAH+AKzDIBHkUnXKFkZQCsCogg9kmYB8h3woocIKMPxgzAh0AroMswD5CbBaIKQiGwAJEAKFFAN6LkAhBlAPHoGxRo0IqpBFJdBQtYwJdyoH4rTiJwEmR9gDKU9YEaVUCjSFdBfQVsEbJZcGlEDfqAbQO+D+z9NCpSQCShBrC/zVtxZQ5cG+EFwN8QhIfRVs0CBWDPtX0jqpwFJD5wgKACvBHlZoErwuRGBfwwDAPkWrGaBbYK8OwEbsyBnAIqBLlhpGYBpX9if7B2Fag7Ip0DFQpgCshZQArEXoHKPpC7JwSAMoBcKyYCNgt0DlR1wtBN6XhdEoJAK94GZkHZvkBWQem+wCgFjFLAqEZkFIBRAMZtTFwaIIBRAKZVd2/qFLh1b3qCgr3pmwIwCsCozbFRAEYBGAVg1ObYKACjAO7+eIIe0fDdqqGHNvf1f8VDqh+1/zZPM48vP43iAAAAAElFTkSuQmCC";

      hub_w_sw : dynamic_graphic {( point_shift_goals ? "hub_w_sw_after_shift_goals" : "hub_w_sw_before_gift_shoals" )} ;
      hub_w_sw_before_gift_shoals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACA0lEQVRYw83XMYvCMBQA4IcPB6lH/8LhTW7BrIJ/wSWzf0nc8i/ci3DQVVBwFKfuR+FwE3JpXtuktnJyzRHfZpW+ry8vLxW+gkXGKSAcgQcnlEWAgAQSMAxN0IJwBFoHDNkLnIduxyw8gb8QgYUiZOGr8CoEwNAEhsGrwF6jFwIO6LoVg1XBLUIYQuYWgcO+b/C/Bav3hHfC6fREeqRjmvZEb0LqjLnirsfjsRw5bszn7idofAc+ijCb1Q8XXS7JFk2WxcKmGY/H0EiMngmDwaBMwJLdOYno/nEcF1fNot/2BwUPlsUHgW0mU0kJLkUkhsBW6ipKQqz2Ks/dVnBq4YMwkhO5XlMRknPyRoShUGK5pE4ofnjI7XNX3eKFoLtxNtExNYQo2SXbnSEslI4rEWJ1U7lDaO5ND4SR3Mi1ITCAI0REGIqVWBKBKXVQ8X8RtIBJOZUjIhTrQAQmxFUMiQCgt4NqEbDcn/0JAHo7yHsCgN4OgghmHVoEakrsTeDlOrQIZh0eErCaT6w3Ie0kbPkzBPQzF3gnAbsJ2CAwP4TUIaAlcEtAS/jsHs89CdwS3uvJFKEl5HYsqLR9TvU/rFOH8FET6PZE+LaErqkA3CNhTU9VjCa0hGV1QmgCdhDQJ6GVwBCqPwpwd1L7OymrBHRSN19UzGh67hWuP6Gzy3+97MQPgAAKM+EiMO8AAAAASUVORK5CYII=";
      hub_w_sw_after_shift_goals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABAklEQVRYw83VSw6DMAwEUEtzIUu+/4ptb5F9z9BWSUOoIJ/GMGSNxGM8OPKknWDxCI9gdEIKQYiEKFCwCW8BjxDnAGYXzNh1DHyC3YigLELgp3AXgoBNUNBT0Ht0gbigcxVpKZQhcAihDMHkMXvsv6P5n6AQPq9G/iemCUux5noJ2wfFMYTvrunh4BzC8dDrmRAIa1rwJJRDaHchXVA+hNRGlcbAKxk5EVaBoPjYKwjL8ZybB8nuTuh2xIcwTTjqG9oBSL6sfUPYhlElwGcvjOzhH4L6EJZq9yuNgNt2HPnwvcfmL+udJqgMbUk7gTB2SeESQk8WblUYGsE5BHSUf/e8ANvyi1Q9HJa2AAAAAElFTkSuQmCC";

      hub_w_w : dynamic_graphic {( point_hunters_grill ? "hub_w_w_after_hunters_grill" : "hub_w_w_before_grunters_hill" )} ;
      hub_w_w_before_grunters_hill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA/0lEQVRYhe2UQRKDMAhFOQs7Nh6WXa7XA3iGQlRM0mg3/nFDxnbSeV/mCaa0vrwoBVIgBVIgBVIgBfqf7Gu5jj/P6QfflEBwmvGLChBOU858f/+DnOZ8UgHEQ+AzBMYuongIjHx8CBS/E+A/BR7hFFy4FGVV24iqFE8szf0gTjEhEf+U4pdazpNRAccpGmSBImZYg4ZtI9FFHKcYkPiKgH2b6lEAyClekD5gimwj23qI5LQeR9Tw1iITU95jtQCUU5wJ95P6lu4TqgFG81aA92NyBLxFjOadgK0zUHvVF0BwahLnOZXaIRl6COFNB5p/KrFNGWeI4cQvrxRIgdcFvqhcaqJm8QFwAAAAAElFTkSuQmCC";
      hub_w_w_after_hunters_grill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAnUlEQVRYhe3SQQqAIBAF0LEDBO5aRjdt58ozumzVGRKtIJUWJn8I5y9yCpLnL9qZQwIQgAA+vW0LU1+ArTD1BbCFqS8A+ydgBzSIAH4NcPQMHKB0yGTiCgekBcAB6j57WOGArAA0QF1njz0QOSwgK2AEA3wBZtXnJfwBWEBeQC1gqcucAvyjqo1aAQZuQOU2HwCvtwIQgAAAgGZhBxx22kRKCATdGwAAAABJRU5ErkJggg==";

      hub_w_nw : dynamic_graphic {( point_fellow_yield ? "hub_w_nw_after_fellow_yield" : "hub_w_nw_before_yellow_field" )} ;
      hub_w_nw_before_yellow_field : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAkUlEQVRYhe3USwrAIAwEUO9/g8FcRHqCQKAXKtiPbroNgak0g5+V8FSSYuSUBKwJEJ0jASxAYPIFvABcYQJUxiQB1HQ3O8QCCF7AvREBotL7vZIA4+7zHSgAmAJiEXXgAyieRJSBuxEFtYF1ARrzAQn4AmDzpQHVefSdZQGoDVzAMxLAA7Q65n8BcUlAAhJAB5yoo1vNe3aQ+AAAAABJRU5ErkJggg==";
      hub_w_nw_after_fellow_yield : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAMklEQVRYhe3OwQAAAAgAsfyVUggqjPtsBJuLjYCAgICAgICAgIBAHtiYgICAgICAQB543dVo4odGjOkAAAAASUVORK5CYII=";

      hub_e_n : dynamic_graphic {( point_fly_score ? "hub_e_n_after_fly_score" : "hub_e_n_before_sky_floor" )} ;
      hub_e_n_after_fly_score : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw+1VO7LDIAxU48L25WhyL1p31Knocyf7BhAwkZYYz6ui58wEzWQi2M1q+SlEPXp8RSxW0vkh6d1xdjMyOS6SPnzLpOF2ogomTXdqVRdrUX+GqhOmQf0Rqr5hpvpDqwpmqj9Ro5qcWqx/xqqcODVY/4hV+SMzr39oVMHM65+oUbUEAyQGHLGsIRggMeCJZcHM1YdGFcxcnQ1Uqt1AN2DxYmf0ASev2+DFjugDXl43mKm69AGogpmqSx+oVH/ewNV9uBvo0ePqWC+Oo4EY/uZ/HG8MxELJX/FE7eN4NhAZTJ8tRiaKgCpOeU4wOM6DLb5STZwNBJhLWdmjLUBADT83UGYSL6zaOBuI9U2RzdpEQA0/GijnFvdxKCNdnIpNIezPo+zWfk9XbZxqY3w5w35CLKCLU30yr8tZfvYmoIdTfTPkwMKJgBJeGwhv2XZopEr41/0b/ns8ARQDOnILAl1wAAAAAElFTkSuQmCC";
      hub_e_n_before_sky_floor : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtklEQVRYw+2VawrDQAiEvf9h1xto6yPGLKG/Om2hDmRJ9pvIsBpCNBqNRqPRaDQajf5e68vaA7C+9r+dk+2pX45Vb95B8gxwAFWxNaFWARy3FqhwgEqcrtyEcgvAEid0eNzAZwEop8VGmn0vAObPANIPpqRVAMvJVvYNjX7tBcCcls9onEt9Lmnw8GCeAbxL3Me1R0XyChDDEQkv3QLzFoDPtnUHmFNMqNS6Lnf9GcN/7m/4cT0AR9iROk1tXK0AAAAASUVORK5CYII=";

      hub_e_ne : dynamic_graphic {( point_bending_truth ? "hub_e_ne_after_bending_truth" : "hub_e_ne_before_trending_booth" )} ;
      hub_e_ne_before_trending_booth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA5klEQVRYw+2UMQ6DMAxFc4CKKGuH+lRZcy+2zFWPwiGydI0aNiYXB5AQ7UJb5asiH4koGeLH9zcqgqX+FsC86lIWgIiY8mt6EgBgkUk0blEAnAEYB4BzQBLAPAMAMgCfgkRJvj6xeDFumMoCrPovAZAVBABzgLcOmOIOJCkuGTA5C3S0KUADLNXCckNoIABBc77i7pqIAej7h9S3LmIANDM30VrrFKYFemhHAKADYWilBQ6XgSmEDjYF8xi69dE+gOuHOk+LP3Vqc7RPXwJ4deu8ggC8+RVXgApQAQ4G8CtVgAoAB3gCmp0r2VJT7KYAAAAASUVORK5CYII=";
      hub_e_ne_after_bending_truth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAsUlEQVRYw+3UsQ3DMAwEQK/ANoV/KrUaMHu5NcAJPqYcu0mAGEmgh2F+oULV4UVqmMUZTguw14ydAYTRCafBAXh3gMPc24GIaQBLA0+AqAEIG4jn32eAggb0W7AUEP2vuyBoIF4/9iBmQTIDDcAGkDbAtQFTALg9ASX/gHwLxIDx0FU/wFS1gKloAaWUizcwV/UMVPUW/AC4f5nboavPOS/gzVecgAQk4GKAfyUBCZADHjetW6UpE8lUAAAAAElFTkSuQmCC";

      hub_e_e : dynamic_graphic {( point_boring_way ? "hub_e_e_after_boring_way" : "hub_e_e_before_warring_bay" )} ;
      hub_e_e_before_warring_bay : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABlklEQVRYw+2WT4qDMBSHA9JFETyLEFwIhR5Csp1LucpmzuD+DV5gegg3XRTBLmY/zqsxkyf4B2NjCjO/xbdQ2nz8En2yxnvYTuvU/wovoFA2NUA5pcH2qQAwaOJxIwoIwwK8noWCAQu9KtTQxedGwMcnXB6n4Q8r9NswuRX7tNDH50YAY/hELCh8DzFxyVahwPWZV4W6wF0owrmH8iZxFQOtcBUUW2YEYAsQ1rMK95ZA5d7iwgabR8TkkNilBfVMzA3rqnlvIgN9K2reKoKt74ZyVuEmKwKd6ioqgs3fDLOfLEcZUegcREThVAFPAIVOdwIMnClwTMpzCp0sGWAxp4tVOoU8HUAn4RnFcjYoyDSn0BFJRuGqBqZ//jXEyAVXNTxX4WSvkEpcx0ApJILCXQ1a4dwSPHJucWEDhzU8uQVuqxDj2yAwUH8W8CwmcFeDUkhlTKASJyImcFeD2oijDChUDiKgcFbD71mg6F+OYgBnNfQKY0Ni7YiwrUEpjA6J1SPCsgalMDokVo8IyxoYf35eQGFlDT9WOnx8tQJVYQAAAABJRU5ErkJggg==";
      hub_e_e_after_boring_way : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyklEQVRYw+3UMQrDMAwFUO2GXkarDu1doBP0ENkFOkOTlAYvMbSk+oL2o8WL/ZCFKOChL927EB21nT2fEHEbCkNYhgIRxiZYuKqdMVJmwUPXrJLkWRij1DppQAl7kATX3npT5EeoztrwGwTXI4brQt/eb9iPaLoxoIRO1KAEn0xCEsGeBMcR/LUdDbigY7Kfswh+OglphAiLP2FK4Osi949yJYELEARP4AIEwRO4AEHwBC5AEDyBCxAET+ACBMETuABB8AQuQHizDQ/W01/UqIsntQAAAABJRU5ErkJggg==";

      hub_e_se : dynamic_graphic {( point_dirt_home ? "hub_e_se_after_dirt_home" : "hub_e_se_before_hurt_dome" )} ;
      hub_e_se_before_hurt_dome : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABi0lEQVRYw8WXXY7FIAiFzw5Yf1c1W+G1Twwo/lRvJrk0Mr1pa65RP+EAFvLmgl4k76aID+W6uDL8DwBjb2UCMPChmQiAvnF9M6UDsN3Up+BsgLo2lmYiAJrzWwyEnYA3EWCvqZkIAO5CcPdz1AQxANoBJBOAHWASIb9T0/c5oBrCNEAOEPQBYjFYVlNDQMUHnwdpADARaCFi014RgcYiBU0QAahrwYTwoz91P1WqJAD2Uei1gNwvSQC6Ho0o7C+S0NkEAQn2rdM8hRoCOQDSt4r7uq6mPcR8gNCItulb5OZhjkgcIBADw/szQOs7DVB3SaMCeh2MngoQkEDzgyUC8jTQKkIWgGXgsnah0AckC2DOPvYoMbkE5lEAmgdSEyUtvSctQH8A4DwAu7tHMEznYwTTypcanI6iNEdkuTMAbPeuuv51XOQoWQAl+KjV4RoGUknOA0D6Aez5beiZiE4D9GW2r2PE4jAGsIzkYf0cAKzGxrNKHQfY5MaPrhwAbDU6GYC2v/MA+DMAQgC/9ff8qf8Ctc8AAAAASUVORK5CYII=";
      hub_e_se_after_dirt_home : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAy0lEQVRYw+3VMQ6DMAyF4XcFlJNY7M19uRZ7lxwgLUKiHYhkWy/JgD0gFqKPP0Hg7RhZbid51oLjmX1pzGsQQFqANAbQDOBKAGIAVwIwA3gSgBnAkwDUAI4EoAZwJAA3gD0BuAHsCUAOYE4AcgBzArADWBOgWkY0gGRa0gQoq2pyN0DWAUovQKk6QM2dAFkLKL22QAuojwGcX93v9jtjAWmV4/J3K88AXK0DMOsQxhYE4Dh5MvkQnoBZ/4LrVQMQAApgs4wOYFpyOuAD2wKbyFO+eg8AAAAASUVORK5CYII=";

      hub_e_s : dynamic_graphic {( point_pouring_rain ? "hub_e_s_after_pouring_rain" : "hub_e_s_before_roaring_pain" )} ;
      hub_e_s_before_roaring_pain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyElEQVRYw+3VOw6DMBAE0CkjFz5zSp8iovaptk3jM8QmRWK8KEixdxLhEUICgebxWUAiBxPw6QCBf9u63ctiBxDk0ABrOw2AVwgAVLEG1O2XcE2WgG17jh1AmnZLgCjXrgAGfYjU9mB2B0Rvt7sDorfbAzbtOwAMAuR5D0cA9b+pF+BZRAOkdBzg8wnCBMBDwASUbzX1EQyZgv8CsKcgj8DZAej9EiDmuLJaYhOn7VKO+ya/DWizuLIQAf0zAROAnXE7GSBOADEPrgZwvE2iMzYAAAAASUVORK5CYII=";
      hub_e_s_after_pouring_rain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA1ElEQVRYw+2XMQ6DMAxFvRVxWrasHr1xhc4+YccGEimgOslA7SDhL4uF4T/lxUgA0ZrnUxvSDOSK1qwF8v8DuUJuSWkczvWBUi0fPsJEvSO6MrBX194ixEz2ClL29gRgrWC7nCUDFMApdgryYp7yCovZFkjtMQuZKDhcutKeAQwUSO3hAKCroNJeALQVoNwezBSg3G6nAOV2YwVx30MNQF9BKmoAaG9BB0BbQRdA/0PkClzB3RUo/5iMBuCYeXu8+Scz6+feAOwADvAsAH4yADvAwHwBk0EBGBu+j74AAAAASUVORK5CYII=";

      hub_e_w : dynamic_graphic {( point_funny_mountain ? "hub_e_w_after_funny_mountain" : "hub_e_w_before_money_fountain" )} ;
      hub_e_w_before_money_fountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABQElEQVRYw+2WTQ6EIAyFu+f+l5jNdN+EC5F4gNnMGKNofxAEjJkElkbK5+P1WXg9vGAADIABMADMp9/7VhHA+0aAzwD4F4DpnjUAmgACUv4Ecr4fgCiGAD6HFABcNwBRLDgkUVwjza+g7wUgigVE4h9sIJFz5E8u4xLAodhyHIETAAppIoR1j30Z1wBisRUAxZVrpIlman9yGdcAYrGE4BrpcGzUjzm1xQPacoYHduGjfmxbSxcYTae7YLfeph+nrMuBZLhEJCOjNv24U6uSMBcuthTbLu7UKoBcuGgzLJKtunGnVgGIPLACmAcCk6zFAypckv8EHghcsvou0OGSbD4eCFyy+hxIeMAIYMEkJWudB+RfUQewuBUhWftAwnPACGDhy5O26TGSGR4on0q6zIRG6hTPZV0AimbDMZYXA/wAWFjFQbCRejAAAAAASUVORK5CYII=";
      hub_e_w_after_funny_mountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABkUlEQVRYw+2VsXKDMAyGPfqxPQoPdDVv4MuTMZU1U2ls6kbC0p2N1WaJBi5wf+DzJwvM51jt+/41eAsz9vftgbC/FiERjGow4xJGNZhxCaMahhDWjwMBXocAkAnuMP8jwkYkAGQNACCH1BFI2+FZsxjSRtjw7l8RAkghdQSy+zEB1tA7Iqb7NcBKQBq6X5hdCGkA7jMnAWkgIW2ENQ1AWW+WMC3puASkgYTUEch6889pSscQkAZuRNQQVtz24wRbgDqkjkDaDnXNVagR4dZa8fkwcoIv01BjtSOgZ/kbR/C4TEPaCPGn57n9ZbHTkiuUhZOQOkLZ+XkILI/gScgrI0TAC3TF9oFQzhwJgTLCqe1EQzhf7dsNpnscftdblWNGRA+hepxlECwzImoIETV+kTS4KgSKCFDf3QoSSMirIUQ8gkFovGNCoIZARlDqvOVCXgmB/SCcNbAz0qTBXBkHToMF6buhgBAFBNcgoUWDuSyBLtxKIa+AEEUE1yChQYO5LgEv3cohr/WZ+sN6I7wRSn0DBQfyymiAZ7AAAAAASUVORK5CYII=";

      hub_e_nw : dynamic_graphic {( point_grim_tune ? "hub_e_nw_after_grim_tune" : "hub_e_nw_before_trim_goon" )}
      hub_e_nw_before_trim_goon : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABWElEQVRYw9XYMW7DMAwAQG4dNBj9Qld/LhsHD32Hp3yB8KKBn9JmZFIpKZaUtEEBGSARwgYyhSdKTGjD10Dwi9gGvgvOAYjZWQIclVsZMNf8LqWnJlAH0P0yAjhZO4DUgewAECPoA1r+KUqEJti0AL4Acv4ksAEQxSAEuZ2zAeTs2WAEiDV0AdIE38sd8JmvCmBNAPUAZwCYprYFIZgBwqQPkDMY9wMA8ADYlAD7XrqwboEzAHAPYAtA6oLbul77NtQAzD1glbAE3BLg2gFYE5AOQalAYBsAHWfAGQGOPugKoAHgBjgmojPPJiMAEkCZgcpMyNoAGYVrVpmK61OSUwNwHYOpO4GgU4E8kxP+BmCpihZA/o8RMfVByB/YI7AiwKNklLwfiJcEWBgXzQrk5T/F4A/BKMA/51+0AK3l/1j+QBucAFTDqdc07w3wj9uvApj/A/C7AX4Ap0wt9uYREV0AAAAASUVORK5CYII=";
      hub_e_nw_after_grim_tune : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA4UlEQVRYw+3UMQ7CMAwFUOOFlZ4Ay0sGbtelZ+EarDkEV2FlMmmngpQmtah+EfHc1k/J/yV1TMzMzfEtagDHO5ccIDbAvwCy+z0pbIAKAIMBTAIFMHUfgnwJPDUoAqQ7GwMBIp3dkQA9nMwe+wIs7HeksJwBsytjAU+DApSMhJCA8RHhugxuAhDityNYBMTvA2gahQGE0wlU/wY2AhASQCOAa0vgSGERoGAAT4DQwwAy9uA4DDBAmpDWh8oMrk9hJUB7IEB1fgMQgM5CiAGo7gdQ2L+6Bg3wc4BSBlenEA54AT/8ZRfOt2AhAAAAAElFTkSuQmCC";

      ## stealing hills

      stealing_hill : dynamic_graphic {( point_healing_still ? "stealing_hill_after" : "stealing_hill_before" )} ;
      stealing_hill_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAjklEQVRYw+3Ryw2AMAyDYc+SAdh/HgboDAghXiUxl1q9uDf0legnoE0+cIADHOAABzjAAe/H2M9SXx/v+DAZoXBkXkyQOFKP4O8PdOSeTBD5FbB2F/otqhxF4OcjVM4C4mfAEAfx5xpljuIPdRN0DhZ4b1Hn4B5N7eB+7FDpID/oHCB1xOTjAAc4wAEO2AC0LOen6hBz4QAAAABJRU5ErkJggg==";
      stealing_hill_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtElEQVRYw+2TOw7EMAhE5yx0NHvYdFwvB8gZVtkiCgScxqOsFJAb69mj5w/YHi60QAu0QAu0QAu0gJ/KXp96+XyOCx5EMDgyXiRQOFIuMt4/kSPnSQKJHwJrWBBvkcXhBNXKQ7C4FzBdqgQWhxNcxIprpHGcX0h/I0vgcYQvqvln5XGEFskDiByhRTVrFiZHaFFLAqgcfu7b5FrzeRCw8X4CDwI3ByBwyMP1bzfQT9ACLxT4AnDS/G/6PRvaAAAAAElFTkSuQmCC";

      ## gravel trail

      gravel_trail : dynamic_graphic {( point_missing_house ? "gravel_trail_after" : "gravel_trail_before" )} ;
      gravel_trail_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABx0lEQVRYw+2V22rDMAyG/94WYie3g62vnt0W9i7uA4ikL1D8AkGT5Ba24kG1bA6DiR78q1T+rEOMy8aGf4C/D/BVhNAIAAibAsxBd6pBoA0A9KgI2AxAjh4kC3OopKYVAOZKxR/d/ycA5hoAWo2h9gAqBw6/DzDbyXUKNAtX56DmqcBqAN0y3MIMV/OEXQ/Q74aS8fNt/+Hl8QSsBjjL/mK74ZPh0gxgqFpwABxX2ev92UsC9o9H+D7AOI4KULVjCwAzotOmAG9EtBZg3BvFaCRwyq6egSdPKGAvHyPyXpYx++Su3gKeUGDO0Bcjsiy8srb/wROqOFhAcuSofpcctAR3ZehdoVTrW7woaC5JaekpdR+2f6beFeqGIE4TTjll6ifYJPSQVOSO+OQLJbmQZCgXW2GckpIwTKmsp+XQxeXkCoWMAmROqY1bJpHJZAL16KhzhRKHJEH70XqC3ZK0E66SUpKvxRcq2izEzNGQVkoB6JLrv7qQsbDhKCOyRpL/v5YT1mYov7aXttRMqOT20uawdKZBNZfIdhvAChPLw7qptEcTcpTCSEbs6dxWGpK2hX7o3dBc6nXI4mLzc3MJu5/MX67J1vIdXMI7pO04lggAAAAASUVORK5CYII=";

      gravel_trail_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAz0lEQVRYw+2VsQ0EMQgEN3ZC/5njL+5FB/yy6FtYJ5zuLA+XjDAYfB8/WIEVWIEVWIEVWIEV+Dx+VuC9wD2yuDLBAwQOl4s83EbaEVWJfgtR3NhxAkWRjIqOm7G5P0Yxamb8KzAo8CNzwWS0V+lg3IjECCnIs3EjA0xC16NqovwY6oXICinZsTdsCzXHtIgZlZPqYpi/ftS2M9FYflQfTmVKyo5ITQPoYGIuayvqakIGD4YZ0e3sRSl1WfTSs8GOPQ6LoVK87AjNJ8VnTLrxB+2I7rJIpDHPAAAAAElFTkSuQmCC";

      ## my house
      my_house : dynamic_graphic {( point_see_glimmering ? "my_house_after" : "my_house_before" )} ;
      my_house_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgAD/gAAAAICAAIBAAACAgIDAwMD/AAAA/wD//wAAAP//AP8A///////lVppUAAAB6ElEQVRYw+3WQU6EMBQG4BeTJnXVwUSjK0Z3Ll14DzYcwI1rj1BWkswR9BLuSHSjJ2JOUKFQ3itThoFpGRc+yJCZBPjmp68U7pzF87pk7qPaq5y57wTOX9d54R0gpwB4URQEEGGN3Q3a4juAgQjAHcBmQ07NCEAClgsgVFMOgDwcwDdF/omnRhSgL69vUzoBUG1CuADuCNwAO4GrZ1NP4wChSuUBYI2BSQAQZUU4GmB1weXXY7s9uADWYBDKEyA/GAAsgZ0ExHIASKuCXheUywEkqwEJP6ANwwB0ACQC3YQg/AKi4YmoCYBEUHVgvfsF7GnDNgCMQE9EsByAGUBiJeB5DNz8vN83+3cPIBHAyRgQywHSrnjALhgGAAJg9HUcAsAQkIwtSEIAJAXwcIDB9QAZAt0gCAGw2pBORNUXMxFZTz0kwL50mhpA0ARWr/yl2bM/BoA0MQCWwgkArP7nTTHah5m1jD8BIFamrk8CyLr7b/3PAz0Avo4JAAOIArdhNw3oicARwDYwAN89dGmOccWeAKu3i/OPdf1x2wcw17soVlsdQKz+AUcDmsdLAWAXHYRdrXrH+YB2fUUA2GFNIYD8GPeOfC5Amm7GUnMA5VyAUKOFue8BmAimAqTyVeU8gPAGaCNwAn4BMMLXgqxDTGkAAAAASUVORK5CYII=";
      my_house_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgAD/gAAAAICAAIBAAACAgIDAwMD/AAAA/wD//wAAAP//AP8A///////lVppUAAABzklEQVRYw+3WMVKEMBQG4DfOZCZWWZzR0YrVztLCe9BwABtrjxAquYNewt5GTwQniJAQ3gsbFhYTsPDBLLM7A3z7kxcCd97iZVuyDFHdVc78dwLvr/syPECeAuAuIMGauht0xQ8AIxHAkQDsqQUBSMDyAYQy5QHI+QDunppQgL68vk3lBUCzCeED+COYA7h6tvU0DRCqUpsCQFQNISzg8vOx2x58AGcwCLU6AFgGBwmI9QCQNwWDLqjWA0jWAjI+ow3jAHQAJALdhBC4C5LxicgEQCJoOrDdV2vDLgCMQE9EsB6AWUDmJBB4DNx8v9+b/WsAkAjgZAyI9QB5XzxiF4wDAAEw+TqOAWAIyKYWJDEAkgJ4PMDoeoAMgX4QxAA4bUgnouaLnYicpx4T4F46zy0gagK7V/5i9uKPASDPLIDlsAGAtf/cFKN9WDjL+A0AqbJ1vQmg6O9fh58HBgB8HRMABpBEbsN+GtATgSeAOjIA3z10aY5xpYEAu7eL8499+3E7BDDfuyhVtQ4gVf+AXwPM46UAcIsOwr52g+NyQLe+IgDsMFMIID+mgyNfCpC2m7HUEkC1FCDUZGHuRwA2glMBUoWqahlABAN0EXgBPxNU1ZDbzkZoAAAAAElFTkSuQmCC";

   }
}

# end assets
