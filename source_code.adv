## warning about this code: even the variable names contain spoilers!
## so you may want to play through the game first.

start_at = nameless_lameness
start_theme = my_theme

game_settings {
   enable_standard_all_behaviour = false
   rewind_enabled   = true
   rollback_enabled = true
}

## we start with simplest defined then move to more complex

## Booleans and integers

booleans {
   ## testing booleans
   in_debug : boolean "false" ;
   cheat_dont_require : boolean "false" ;

   ## game cue state booleans
   footnotes_available : boolean "false" scope="survivor" ;
   footnote_shortcut_noted : boolean "false" scope="survivor" ;
   xme_twice : boolean "false" ;
   credits_to_thanks_note : boolean "false" ;
   apostrophe_warn : boolean "false" ;

   ## game option booleans
   score_notify : boolean "true" ;
   tutorial_in_options : boolean "true" ;
   use_color_coding : boolean "true" ;

   ## game progress booleans
   tutorial_done : boolean "false" ;
   talked_to_thor : boolean "false" ;
   know_hold_bub : boolean "false" ;
   hill_aware_you_stole : boolean "false" ;
   noted_north_from_east : boolean "false" ;
   noted_north_from_west : boolean "false" ;
   bend_seen_yet : boolean "false" ;

   ## footnote check booleans
   revealed_footnote_1 : boolean "false" scope="survivor" ;
   read_footnote_1 : boolean "false" scope="survivor" ;
   revealed_footnote_2 : boolean "false" scope="survivor" ;
   read_footnote_2 : boolean "false" scope="survivor" ;
   revealed_footnote_3 : boolean "false" scope="survivor" ;
   read_footnote_3 : boolean "false" scope="survivor" ;
   revealed_footnote_4 : boolean "false" scope="survivor" ;
   read_footnote_4 : boolean "false" scope="survivor" ;
   revealed_footnote_5 : boolean "false" scope="survivor" ;
   read_footnote_5 : boolean "false" scope="survivor" ;
	revealed_footnote_6 : boolean "false" scope="survivor" ;
	read_footnote_6 : boolean "false" scope="survivor";

   ## verb notifications
   jump_commands_notified : boolean "false" ;
   drop_referenced : boolean "false" ;

   ## regular point tally booleans
   point_first_base : boolean "false" ;
   point_bold_hub : boolean "false" ;

   ## west tile (hub) goals, north then clockwise
   point_master_plan : boolean "false" ;
   point_chalice_map : boolean "false" ;
   point_fell_short : boolean "false" ;
   point_take_crackers : boolean "false" ;
   point_shift_goals : boolean "false" ;
   point_hunters_grill : boolean "false" ;
   point_fellow_yield : boolean "false" ;

   ## TQ goals, north then clockwise
   point_fly_score : boolean "false" ;
   point_bending_truth : boolean "false" ;
   point_boring_way: boolean "false" ;
   point_dirt_home : boolean "false" ;
   point_pouring_rain : boolean "false" ;
   point_funny_mountain : boolean "false" ;
   point_grim_tune : boolean "false" ;

   point_travel_grail : boolean "false" ;
   point_missing_house : boolean "false" ;
   point_see_glimmering : boolean "false" ;
   point_hi_mouse : boolean "false" ;

   ## endgame points
   point_healing_still : boolean "false" ;
   point_gravel_trail : boolean "false" ;

   ## bonus point tally booleans
   ## any time points first
   bonus_point_turkey_quest : boolean "false" ;
   bonus_point_theory_bore : boolean "false" ;

   ## bane place
   bonus_point_bane_place : boolean "false" ;
   bonus_point_death_sentence : boolean "false" ;

   ## the hubs
   bonus_point_test_wiles : boolean "false" ;
   bonus_point_beast_ranch : boolean "false" ;

   ## beyond the hubs
   bonus_point_racing_passions : boolean "false" ;

   ## "think" booleans: alphabetical so it is not spoiled in-game
   think_chalice_map : boolean "false" ;
   think_fellow_yield : boolean "false" ;
   think_grim_tune : boolean "false" ;
   think_healing_still : boolean "false" ;
   think_hunters_grill : boolean "false" ;
   think_master_plan : boolean "false" ;
   think_shift_goals : boolean "false" ;

   ## "ask" booleans
   ask_1_yet : boolean "false" ;
   ask_2_yet : boolean "false" ;
   ask_3_yet : boolean "false" ;
   ask_4_yet : boolean "false" ;
   ask_5_yet : boolean "false" ;
   ask_6_yet : boolean "false" ;
   ask_7_yet : boolean "false" ;
   ask_8_yet : boolean "false" ;
   ask_9_yet : boolean "false" ;
   ask_10_yet : boolean "false" ;
   ask_11_yet : boolean "false" ;
   ask_12_yet : boolean "false" ;
   ask_13_yet : boolean "false" ;
   ask_14_yet : boolean "false" ;
   ask_15_yet : boolean "false" ;
   ask_16_yet : boolean "false" ;
   ask_17_yet : boolean "false" ;

   ## achievement booleans
   achieve_tyyt: boolean "false" ;
   achieve_cnnc: boolean "false" ;

   ## tutorial booleans, organized by order you see/do them in
   in_number_choice: boolean "true" ;
   in_tutorial: boolean "false" ;
   tutorial_about_done : boolean "false" ;
   tutorial_verbs_done : boolean "false" ;
   tutorial_additional_metaverb_done : boolean "false" ;
   tutorial_x_me_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;
   tutorial_inventory_done : boolean "false" ;
   tutorial_inventory_cued : boolean "false" ;
   tutorial_item_taken: boolean "false" ;
   tutorial_x_ask_done : boolean "false" ;

   ## parser shortcut booleans
   look_warn: boolean "false" ;
   examine_warn: boolean "false" ;
   inventory_warn : boolean "false" ;
   long_word_warn : boolean "false" ;
}

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "1";
   score : integer "0" ;
   max_score : integer "22" ;
   points_left_side : integer "0" ;
   points_right_side : integer "0" ;
   bonus_score : integer "0" ;
   max_bonus_score : integer "6" ;
   tempint : integer "0" ;
}

## strings

strings {

   tempstr: string "" ;
   tempstr2: string "" ;

   ## short stubs
   # meta verbs in orange
   abt : string "<ABOUT<#f80>>" ;
   cred : string "<CREDITS<#f80>>" ;
   exits : string "<EXITS<#f80>>" ;
   exitserr : dynamic_string {( is_beside "cheering_voice" ? "No, that's not the way out. Trial and error might get it. Or figuring what the voice really means." :
      (tutorial_x_ask_done && is_at "nameless_lameness") ? "You don't want to wandering off without any direction, but maybe that voice could offer a clue." :
      is_at "nameless_lameness" ? "In this nameless lameness, any move without figuring where to go could get you even more lost. You need some clue, first." :
      (is_at "burst_face") ? "It's still a bit blurry here. You sense there's another puzzle to solve before moving on." :
      (is_at "my_house") ? "You can only really go south, but there's no need, since you can just wrap things up here." :
      (is_at "plain_base" || is_at "stealing_hill") ? "There's no exit that way. Looking should re-list the exits." : "There are no hidden passages beyond. You can just go OUT to return to the hub." )} ;
   hint : string "<HINT<#f80>> or <HINTS<#f80>>" ;
   meta : string "<META<#f80>>" ;
   sco : string "<SCORE<#f80>>" ;
   thx : string "<THANKS<#f80>>" ;
   tx_ca : string "<Chris Ainsley<#0f0>>" ;
   tx_gf : string "<Gerry Francis<#0f0>>" ;
   tx_wc : string "<Wade Clarke<#0f0>>" ;
   tut : string "<TUTORIAL<#88f>>" ;
   verbs : string "<VERBS<#f80>>" ;

   # yes-or-no
   yn : string "<YES<#f88>>/<Y<#f88>> or <NO<#f88>>/<N<#f88>>" ;
   on : string "<ON<#f88>>" ;
   off : string "<OFF<#f88>>" ;

   # options in blue 00f
   notif : string "<NOTIFY<#88f>>" ;

   # game title
   qt : string "<Quirky Test<#ff0>>" ;

   # regular commands in green
   lishea : string "<LISTEN<#0f0>> or <HEAR<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;

   # warp commands in orange
   v_pb : string "<PB<#f80>>" ;
   v_wt : string "<WT<#f80>>" ;
   v_sh : string "<SH<#f80>>" ;
   v_eb : string "<EB<#f80>>" ;

   # tutorial stuff in purple
   tnote : string "<TUTORIAL NOTE:<#f0f>> " ;
   tcue : string "<TUTORIAL CUE:<#f0f>> " ;
   otn : string "<ONE-TIME NOTE:<#f0f>> " ;

   ## dynamic strings

   YN_or_12 : dynamic_string {( in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}

   my_score : dynamic_string {( score + "/" + max_score )}
   notify_string : string {( "You need to specify " + notif + " " + yn + " for score notification changes." )}

   unknown_begin_note : dynamic_string {( point_first_base ? "" : ", though special commands are cued in puzzles throughout {qt}" )}
   bonus_score_string : dynamic_string {( "Your <bonus score<#f80>> is " + bonus_score + " out of <" + max_bonus_score + "<#f00>>." )}

   ## location strings
   burst_face_after : string "You're at first base now." ;
   burst_face_before : string "You're at a burst face. You feel about ready to take an initial step." ;

   describe_seth_denton : dynamic_string {( is_beside "seth_dentons" ? "\nAn establishment called Seth Denton's is off to the side here. You have a feeling you don't want to ENTER, and maybe you can figure why.{footnote_5_reveal}" : "" )} ;
   describe_gravel_trail : dynamic_string {( point_travel_grail ? ", and your travel grail opened up a path north" : ", and it seems weirdly fuzzy north, as if something should be there but isn't" )} ;

   sub_hub: dynamic_string {( "Here in the " + (is_at "west_tiles" ? "west" : "east" ) + " mini-hub, you can go south back to the plain base or " + (has_visited("stealing_hill") ? "back to the stealing hill" : "up to a hill") + ".\n{spokes_left}" )};
   spokes_word: dynamic_string {( tempint == 6 ? "one" :
      tempint == 5 ? "two" :
      tempint == 4 ? "three" :
      tempint == 3 ? "four" :
      tempint == 2 ? "five" :
      tempint == 1 ? "six" :
      "(error, bug, {tempint})"
      )};
   spokes_left: dynamic_string {( tempint == 0 ? "You haven't gotten anything yet from any of the seven outward spokes here. (South leads back to the hub.)" : (tempint == 7 ? "You've taken care of business in all the side areas here." : "You still need to take care of things in {spokes_word} of the seven planar directions.") )};

   ## west tiles seeding for dynamic strings, starting north and going clockwise
   qt_plaster_man : string "A {cc_plaster_man} stands here. Perhaps there is something inside it." ;
   qt_master_plan : string "With the plaster man destroyed, there's not much left here." ;
   qt_malice_chap : string "You feel the malice here from the {cc_malice_chap}." ;
   qt_chalice_map : string "You got the chalice map here. There can't really be anything left to do." ;
   qt_shell_fort : string "A {cc_shell_fort} sits here. It occasionally fires rounds that get close to you. While there's no danger of you getting hit, it's still annoying and gets in the way of trying to find anything." ;
   qt_fell_short : string "The shell fort lies barren now. You even ransacked it for rations." ;
   qt_cake_trackers : string "{cc_cake_trackers} mope about here, looking for cake, mumbling about how they only have boring food to eat. They are nonspecific about what boring food it is, but maybe you can figure that out." ;
   qt_take_crackers : string "Man! Those folks sure had a lot of crackers. But they were greedy and wanted cake. You've taken all you possibly need, and there are still several boxes left over." ;
   qt_gift_shoals : string "{cc_gift_shoals} are here. Yet no matter how many gifts they wash up, you don't see anything you like." ;
   qt_shift_goals : string "The shoals seem more peaceful now that you have fixed your mindset." ;
   qt_grunters_hill : string "Grunts from a big hill, here. That must make it a {cc_grunters_hill}. It's like people are trying to forage for food, but of course their grunts scare off prey. Said grunts are mainly about not having enough food." ;
   qt_hunters_grill : string "Well, you've had your feast, and it was delicious. It's filled you up for the journey ahead. Hanging around here wouldn't burn any calories, so you should probably get going." ;
   qt_yellow_field : string "Someone is blocking you here in this {cc_yellow_field}. Why, or from what, you're not sure." ;
   qt_fellow_yield : string "The yellow field is pretty to look at, but there's nobody and nothing here that can help you further." ;

   ## east branch seeding for dynamic strings, starting north and going clockwise
   tq_sky_floor : string "The {cc_sky_floor} here gives you poetic thoughts. Well, maybe not quite poetic, maybe wordless. You're not quite sure, but when you figure it out, you're sure you'll think up something cool." ;
   tq_fly_score : string "It was inspirational to think up a neat little tune here, but you want to share it now." ;
   tq_trending_booth : string "A {cc_trending_booth} sits here, spouting all sorts of things you can and should be doing that are more exciting than silly old text adventuring. The arguments seem convincing, and yet ..." ;
   tq_bending_truth : string "Noise continues to emanate from the trending booth, but you sort of recognize a lot of its rhetorical tricks, so you can ignore it and leave when you want." ;
   tq_warring_bay : string "You don't know how or why a war started in this {cc_warring_bay}. Everyone seems quite excited to be dedicated to their own cause, whatever it is." ;
   tq_boring_way : string "Well, you made this a boring way. You feel content having contributed to peace, but all the same, this being a boring place, you can't imagine having anything interesting to do here." ;
   tq_hurt_dome : string "A {cc_hurt_dome} sits here. Fortunately, it just looks hurt and doesn't seem to want to actively hurt anyone or anything. But it'd still be nice to make sure." ;
   tq_dirt_home : string "The dirt home you summoned stands here, infinitely less menacing than its previous form" ;
   tq_roaring_pain : string "You feel {cc_roaring_pain}. While there's some shelter here from above, it doesn't help with the internal stuff." ;
   tq_pouring_rain : string "The shelter keeps you safe from the pouring rain, which shows no sign of letting up. Probably just have to make a run for it when you can." ;
   tq_money_fountain : string "A {cc_money_fountain} is here. People dive in, trying to get the money, but they somehow come up empty. It's very upsetting and soul-draining for them." ;
   tq_funny_mountain : string "A mountain with a cheery face somehow carved in its side makes all who walk by laugh or smile as they go on their day. It helps you, too, though you recognize true happiness is a journey that extends away from here, and the mountain just gives a temporary boost." ;
   tq_trim_goon : string "A {cc_trim_goon} sits here, ready to rough you up if provoked. Fortunately, you've given them no cause, but boy, it'd be fun to tweak them and win a psychological victory. You suspect it's what Thor would want." ;
   tq_grim_tune : string "You sit and bask in the area, now barren, which only reenforces the grim tune you whipped up. You see, with some modifications, it could work against non-physical cruelty." ;

   ## stealing hill
   stealing_hill_desc: dynamic_string {( point_healing_still ? "The stealing hill seems quiet, for now, but it will probably figure someone stole its grail, eventually." : "A {cc_stealing_hill} glares at you (the hills have eyes, you know) as if to say, you're not getting anything useful from it! And yet, there's so much junk lying around, if you know what to get and have a plan to get there, you can nab it quickly."
   )};
   loc_stealing_hill : dynamic_string {( "THE STEALING HILL\n{stealing_hill_desc}\nYou can go " + ( has_visited("west_tiles") ? "back west to West Tiles" : "west" ) + " or " + ( has_visited("east_branch") ? "back east to East Branch" : "east" ) + "." )};
   stealing_hill_mad: dynamic_string {( "You don't have any reason to risk the full wrath of the stealing hill. You got something useful" + (point_gravel_trail ? "" : ", you're pretty sure") + "." )} ;

   gravel_trail_house : dynamic_string {(
      point_missing_house ? ", or you can go NORTH inside the house you made" : ""
   )};

   my_house_description : dynamic_string {( point_see_glimmering ? "Stuff is glimmering all around, and maybe the ring is somewhere, but you'll never reach it on your own. Boy, {cc_my_house} being this big is a problem." : "{cc_glee_simmers} here as you think, yes, this really is {cc_my_house}!\nAnd yet, owning a house is nice and all, but ... what about Thor's quest? You glance again at your inventory."
   )};

   ## color code stuff

   ## intro first
   cc_whoa_guest : dynamic_string {( use_color_coding ? "<\"Whoa! Guest!\"<#f88>>" : "\"Whoa! Guest!\"" )} ;
   cc_burst_face : dynamic_string {( use_color_coding ? "<burst face<#f88>>" : "burst face")} ;
   cc_hold_bub : dynamic_string {( use_color_coding ? "<HOLD, BUB<#f88>>" : "HOLD, BUB")} ;

   ## west hub
   cc_plaster_man : dynamic_string {( use_color_coding ? "<plaster man<#f88>>" : "plaster man" )} ;
   cc_malice_chap : dynamic_string {( use_color_coding ? "<malice chap<#f88>>" : "malice chap" )} ;
   cc_shell_fort : dynamic_string {( use_color_coding ? "<shell fort<#f88>>" : "shell fort")} ;
   cc_cake_trackers : dynamic_string {( use_color_coding ? "<Cake trackers<#f88>>" : "Cake trackers")} ;
   cc_gift_shoals : dynamic_string {( use_color_coding ? "<Gift shoals<#f88>>" : "Gift shoals")} ;
   cc_grunters_hill : dynamic_string {( use_color_coding ? "<grunters' hill<#f88>>" : "grunters' hill")} ;
   cc_yellow_field : dynamic_string {( use_color_coding ? "<yellow field<#f88>>" : "yellow field")} ;

   ## east hub
   cc_sky_floor : dynamic_string {( use_color_coding ? "<sky floor<#f88>>" : "sky floor")} ;
   cc_trending_booth : dynamic_string {( use_color_coding ? "<trending booth<#f88>>" : "trending booth")} ;
   cc_warring_bay : dynamic_string {( use_color_coding ? "<warring bay<#f88>>" : "warring bay")} ;
   cc_hurt_dome : dynamic_string {( use_color_coding ? "<hurt dome<#f88>>" : "hurt dome")} ;
   cc_roaring_pain : dynamic_string {( use_color_coding ? "<roaring pain<#f88>>" : "roaring pain")} ;
   cc_money_fountain : dynamic_string {( use_color_coding ? "<money fountain<#f88>>" : "money fountain")} ;
   cc_trim_goon : dynamic_string {( use_color_coding ? "<trim goon<#f88>>" : "trim goon")} ;

   ## endgame
   cc_stealing_hill : dynamic_string {( use_color_coding ? "<stealing hill<#f88>>" : "stealing hill")} ;
   cc_travel_grail : dynamic_string {( use_color_coding ? "<travel grail<#f88>>" : "travel grail")} ## may not be used
   cc_hissing_mouse : dynamic_string {( use_color_coding ? "<hissing mouse<#f88>>" : "hissing mouse")} ;
   cc_glee_simmers : dynamic_string {( use_color_coding ? "<Glee simmers<#f88>>" : "Glee simmers")} ;
   cc_my_house : dynamic_string {( use_color_coding ? "<my house<#f88>>" : "MY HOUSE")} ;

   ## footnote notifications and other dynamic strings
   footnote_1_reveal : dynamic_string {( revealed_footnote_1 || !footnotes_available ? "" : " (<FOOTNOTE 1<#f80>>)" )} ;
   footnote_2_reveal : dynamic_string {( revealed_footnote_2 || !footnotes_available ? "" : " (<FOOTNOTE 2<#f80>>)" )} ;
   footnote_3_reveal : dynamic_string {( revealed_footnote_3 || !footnotes_available ? "" : " (<FOOTNOTE 3<#f80>>)" )} ;
   footnote_4_reveal : dynamic_string {( revealed_footnote_4 || !footnotes_available ? "" : " (<FOOTNOTE 4<#f80>>)" )} ;
   footnote_5_reveal : dynamic_string {( revealed_footnote_5 || !footnotes_available ? "" : " (<FOOTNOTE 5<#f80>>)" )} ;
	footnote_6_reveal : dynamic_string {( revealed_footnote_6 || !footnotes_available ? "" : " (<FOOTNOTE 6<#f80>>)" )} ;

   achievement_tyyt : string "<Too Yacky: You, Tacky<#f80>>" ;
   achievement_cnnc : string "<Clever! Nap? Never! (Clap!)<#f80>>" ;
}

## Objects with vocabulary

objects {
  # in inventory
   ooh_task : object "Ooh Task to Ask ('Ooh Task')" msg="It is a request to find the <Rare-Thing-There Ring<#a33>>.";

  # scenery
  cheering_voice : scenery "cheering voice" msg="It gives a cheery {cc_whoa_guest}" conspicuous="false";
  seth_dentons : scenery "Seth Denton's" msg="It looks forbidding, but you're not sure why." at="plain_base" conspicuous="false";

   ## NPC(s)
   beery_thor : object "Beery Thor" msg="Big and strong and friendly.";

   ## found later
   crackers: object "Crackers" msg="More crackers than you could ever want." ;
   pacing_rations: object "pacing rations" msg="Very sensible rations for any sort of long journey, obviously completely well-thought-out and unemotional and stuff." ;
   travel_grail : object "Travel Grail" msg="It doesn't look that valuable, but perhaps it can find somewhere new." ;
   hissing_mouse: scenery "A hissing mouse" at= "gravel_trail" conspicuous="false" ;

}

vocabulary {
   : noun / aliases = [ooh, task, ask]
   : noun / aliases = [hill, hills]
   : noun / aliases = [hunter, hunters]
   : noun / aliases = [no, n]
   : noun / aliases = [yes, y]
   : verb / aliases = [ab, about]
   : verb / aliases = [ask, rule]
   : verb / aliases = [f, foot, footnote, footnotes]
   : verb / aliases = [glimmer, glimmers, glimmering]
   : verb / aliases = [ch, colorhint]
   : verb / aliases = [exit, out]
   : verb / aliases = [hi, high]
   : verb / aliases = [not, noti, notif, notify]
   : verb / aliases = [t, talk]
   : verb / aliases = [tx, thx, thank, thanks, credits]
   : verb / aliases = [opt, opts, option, options]
   : verb / aliases = [tut, tutorial]
   : verb / aliases = [verb, verbs]
}

## Locations and location-specific parser rules

locations {
   nameless_lameness : location "You are surrounded by nameless lameness. It's all very, very grey. You can't really see much beyond yourself. But you need to start somewhere." graphic = "lameness_16" {
      on_command {
         : if (verb_is "i" && is_carried "ooh_task") {
            : set_true "tutorial_inventory_done" ;
         }
         : if (is_carried "ooh_task" && !tutorial_x_ask_done && noun1_is "task" ) {
            : print "But the ring's probably not here. Where can you go? You feel you are stumbling around. You hear the silence shattered. Perhaps you can use one of your senses and pick up a clue." ;
            : set_true "tutorial_x_ask_done" ;
         }
         : if ((verb_is "inventory") && in_tutorial && !tutorial_x_me_done) {
            : print "Taking inventory is a good thing to do early in a text adventure, but we're not there yet in the tutorial. Once you've found an item, the tutorial will nudge you to do take inventory.";
         }
         : match "listen _; hear _" {
            : if (tutorial_x_ask_done) {
               : print "You hear a voice. It's a happy one. For whatever reason, you mark it up as a Veering Choice Cheering Voice. It greets you, sort of, with a {cc_whoa_guest} You'd like to see where it's from. But which direction is that?" ;
               : create "cheering_voice" ;
               : return ;
            }
         }
         : match "x me" {
            : if (in_tutorial && (!tutorial_about_done || !tutorial_verbs_done || !tutorial_additional_metaverb_done)) {
               : print {( "While " + xme + " is a useful command, and one you'll be using in this tutorial, we're a bit on rails. There are meta-commands to acquaint yourself with first." )};
            }
            : else_if (is_carried "ooh_task") {
               : print "As AFGNCAAPy as ever!{footnote_1_reveal}" ;
               : if (!xme_twice) {
                  : print "Oh, and nothing further was hidden on you." ;
                  : set_true "xme_twice" ;
               }
               : if (!revealed_footnote_1) {
                  : set_true "revealed_footnote_1" ;
               }
               : gosub "f_footnote_notify" ;
            }
            : else {
               : pocket "ooh_task" ;
               : print "You search yourself, wondering if you forgot something, and hoping something will turn up. And guess what? There's something called <Ooh, Task to Ask<#88f>>." ;
               : print "You're not sure who slipped it in there, or how, but all the same, you're glad you might have some direction, now." ;
               : set_true "tutorial_x_me_done";
            }
         }
      }
      on_describe {
         : set_false "in_number_choice" ;
         : if ( is_beside "cheering_voice") {
            : print "The cheering voice still floats around. You can {lishea} it.";
         }
         : else_if (is_carried "ooh_task" && tutorial_x_ask_done) {
            : print "But it's no longer silent. Perhaps you can <LISTEN<#0f0>> or <HEAR<#0f0>>.";
         }
      }
   };
   burst_face : location "{ point_first_base ? burst_face_after : burst_face_before }" {
      on_command {
         : match "east _" {
            : print {( "There's no way back. Not that you'd want to go back. Anyway, Thor would probably just yank you back from your trip back. He's bigger than you.{footnote_6_reveal}" )} ;
            : set_true "revealed_footnote_6";
         }
         : match "talk _;talk thor"  {
            : if (!talked_to_thor) {
               : print "\"Well, there's one last thing to do, here. You managed to GO WEST after hearing me say {cc_whoa_guest} What can you do with the burst face?\"";
               : set_true "talked_to_thor";
               : if (in_tutorial) {
                  : print "Congratulations! You've finished the tutorial." ;
               }
            }
            : else_if (point_bold_hub) {
               : print "Ask me about any rule in Graham Nelson's Player's Bill of Rights, with ASK (1-10). (Not implemented) I can't give you spoilers." ;
            }
            : else {
               : print {( point_first_base ? "\"This is just meant to be a fun little adventure. But there's some education here. You had the tutorial with basic commands, but I wanted to give a little theory, too. About what you can expect from a text adventure in terms of fairness. I'm cribbing from Graham Nelson's Player's Bill of Rights and showing you how it applies to your adventure here. You can ask me about it at any time with RULE (1-10). Here's where I boom {cc_hold_bub}. What am I hiding from you? Just one more test before you get to the main area.\"" : "\"You need to figure what to do with the burst face that's blocking your way.\"" )};
               : set_true "know_hold_bub" ;
            }
         }
         : match "first base" {
            : if (point_first_base) {
               : print "You already changed things here." ;
               : return ;
            } : else_if (!talked_to_thor) {
               : print "\"That's the right idea, but I'm bigger than you. I'm going to make you talk to me first. Don't worry, I'm interesting. Or I think I am.\"";
               : return ;
            }
            : print "\"Ah, there we go. That'll make paths clearer. Now let's have another little TALK, about what we're doing here and why.\"";
            : set_true "point_first_base" ;
            : create "beery_thor" ;
            : gosub "add_point" ;
            : done ;
         }
         : match "first _;_ base" {
            : if (!talked_to_thor) {
                  : print "\nThor raises an eyebrow. \"Looks like you have some ideas, there. But how about we TALK first?\n";
               } : else {
                  : gosub "say_half" ;
               }
            : done ;
         }
         : if (know_hold_bub) {
            : match "bold hub" {
               : print "\"Yes, that's where we'll go next.\"" ;
               : set_true "point_bold_hub" ;
               : gosub "add_point" ;
               : press_any_key ;
               : create "beery_thor" target = "plain_base" ;
               : goto "plain_base" ;
               : redescribe ;
               : done ;
            }
            : match "bold _;_ hub" {
               ## don't need any other condition -- saying so moves us to next room
               : gosub "say_half" ;
            }
         }
      }
   };
   plain_base : location "You are in a plain base. While it's rather plain, it links to other places that look more interesxting. You notice paths that start off east and west, though they seem to bend away{describe_gravel_trail}. You don't see any way back to the burst face.{describe_seth_denton}" {
      on_command {
         : if (is_beside "seth_dentons") {
            : match "death sentence" {
               : print "\"Yes, that's it. This is one of those traps where you're given adequate warning that going somewhere might kill you.\"";
               : set_true "bonus_point_death_sentence" ;
               : destroy "seth_dentons" ;
               : gosub "add_bonus" ;
            }
         }
         : match "ask *" {
            : gosub "ask_thor" ;
         }
      : if (!noted_north_from_west) {
         : match "west _" {
            : gosub "note_north_bend_from_hub" ;
         }
      }
      : if (!noted_north_from_east) {
         : match "east _" {
            : gosub "note_north_bend_from_hub" ;
         }
      }
      : match "plain base" { # no say_half for a bonus point
         : if (!bonus_point_bane_place) {
            : print "Thor chuckles a bit. \"Very observant. Yes, plain, but it does the job.\"";
            : gosub "add_bonus" ;
            : set_true "bonus_point_bane_place" ;
         } : else {
            : print "You already pointed out the, uh, functionality of this location. Don't be a rude guest.";
         }
         : done ;
      }
      }
      on_describe {
         }
   };

   west_tiles : location "WEST TILES\n{sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_left_side)} ;
      }
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   east_branch : location "EAST BRANCH\n{sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_right_side)} ;
      }
      on_command {
         : match "beast ranch" {
            : if (!bonus_point_beast_ranch) {
               : print "You wonder if, with your brains, you could tackle a huge beast ranch with mind over matter or something. Then common sense kicks in. But you have fun imagining." ;
               : set_true "bonus_point_beast_ranch" ;
               : gosub "add_bonus" ;
            } : else {
               : print "You don't want to tempt something like that into existence too often." ;
            }
            : done ;
         }
      }
      on_describe {
         : gosub "list_jump_commands" ;
         : gosub "footnote_3_check_function" ;
      }
   };

   stealing_hill : location "{loc_stealing_hill}" {
      on_command {
      : match "healing still" {
         : if (point_healing_still) {
         : print "You already found the healing still that contained the travel grail." ;
         }
         : else_if ((!point_chalice_map || !point_master_plan) && (!cheat_dont_require)) {
            : print "With the stealing hill watching you, it'll be tough to nab anything. You'll need to know what you want and how to get there." ;
            : set_true "think_healing_still" ;
         }
         : else
         {
            : print "With the chalice map handy as well as the master plan, you know what to look for and where. Of course, it takes a while to get there, as the stealing hill tends to look around a lot, but it gets distracted by other passers-by. Eventually you find the travel grail. But where can it take you?" ;
            : gosub "add_point" ;
            : set_true "point_healing_still" ;
            : set_false "think_healing_still" ;
            : pocket "travel_grail" ;
            : update_graphic ;
         }
         : done ;
         }
      : if (!point_healing_still) {
         : match "healing _;_ still" {
            : gosub "say_half" ;
         }
      }
      }
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   qt_n : location "{point_master_plan ? qt_master_plan : qt_plaster_man}" {
      on_command {
      : match "master plan" {
         : if (point_master_plan) {
            : print "You already got the master plan.";
            }
         : else_if ((!point_shift_goals || !point_hunters_grill) && (!cheat_dont_require)) {
            : print "You sort of hope there's a master plan inside the plaster man, but you're not sure. You sense either you're not focused on what really matters, or you're not nourished enough to break him down." ;
            : set_true "think_master_plan" ;
         }
         : else
         {
            : print "You have reason to find a master plan, and your feast with the hunters has left you stronger. Without much trouble, you bust open the master plan and find it." ;
            : set_true "point_master_plan" ;
            : set_false "think_master_plan" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_master_plan) {
         : match "master _;_ plan" {
            : gosub "say_half" ;
            }
         }
      }
   };
   qt_ne : location "{point_chalice_map ? qt_chalice_map : qt_malice_chap}" {
      on_command {
      : match "chalice map" {
         : if (point_chalice_map) {
            : print "You already got the chalice map from the malice chap.";
            }
         : else_if ((!point_fellow_yield || !point_grim_tune) && (!cheat_dont_require)) {
            : print "This guy's tough. Maybe if you've built experience and confidence blowing off two other belligerent fellows, you could outsmart him." ;
            : set_true "think_chalice_map" ;
         }
         : else
         {
            : print "You offer to relieve the malice chap of his chalice map. You're surprised he accepts." ;
            : set_true "point_chalice_map" ;
            : set_false "think_chalice_map" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_chalice_map) {
         : match "chalice _;_ map" {
            : gosub "say_half" ;
            }
         }
      }
   };
   qt_e : location "{point_fell_short ? qt_fell_short : qt_shell_fort}" {
      on_command {
      : match "fell short" {
         : if (point_fell_short) {
            : print "You already managed to make the artillery miss you. No need to taunt.";
            }
         : else
         {
            : print "You believe in yourself and use the power of words to make the artillery fall short. The people inside give up on you. They have much easier targets.\nOh! And what did they leave behind? Some very, very sensible pacing rations. They taste bleah enough so you pace yourself eating them, but not so bleah they're inedible. You take them." ;
            : set_true "point_fell_short" ;
            : pocket "pacing_rations" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_fell_short) {
         : match "fell _;_ short" {
            : gosub "say_half" ;
         }
      }
      }
   };
   qt_se : location "{point_take_crackers ? qt_take_crackers : qt_cake_trackers}" {
      on_command {
      : match "take crackers" {
         : if (point_take_crackers) {
            : print "Don't get greedy! You have enough crackers.";
            }
         : else
         {
            : print "While the cake trackers aren't looking, you pinch a box of crackers. They don't notice at first, but when they fail to find any cake, they start getting mad and accusing each other." ;
            : set_true "point_take_crackers" ;
            : gosub "add_point_qt" ;
            : pocket "crackers" ;
         }
         : done ;
         }
      : if (!point_take_crackers) {
         : match "take _;_ crackers" {
            : gosub "say_half" ;
            }
         }
      }
   };
   qt_sw : location "{point_shift_goals ? qt_shift_goals : qt_gift_shoals}" {
      on_command {
      : match "shift goals" {
         : if (point_shift_goals) {
            : print "But you don't want to shift your goals back." ;
            }
         : else_if ((!point_funny_mountain || !point_boring_way) && (!cheat_dont_require)) {
            : print "You want to shift your goals, but you don't know if you can. You haven't helped others shift theirs away from Needing More enough yet.";
            : set_true "think_shift_goals" ;
         }
         : else
         {
            : print "You stop looking for something direct from the gift shoals. You begin, like, meditating and stuff." ;
            : set_true "point_shift_goals" ;
            : set_false "think_shift_goals" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_shift_goals) {
         : match "shift _;_ goals" {
            : gosub "say_half" ;
            }
         }
      }
   };
   qt_w : location "{point_hunters_grill ? qt_hunters_grill : qt_grunters_hill}" {
      on_command {
      : match "hunters grill" {
         : if (point_hunters_grill) {
            : print "But you already had enough of a feast. Any more, and you wouldn't be able to move around." ;
            }
         : else_if ((!point_take_crackers || !point_fell_short) && (!cheat_dont_require)) {
            : print {( "You try to start up a feast, but alas, you don't have enough food to do so. You need something besides the " + (point_take_crackers ? "crackers" : "pacing rations") + "." )} ;
            : set_true "think_hunters_grill" ;
         }
         : else
         {
            : print "You tell people to stop whining and start making a fire, or something. You're surprised they agree with you, especially when you show them your crackers and pacing rations." ;
            : set_true "point_hunters_grill" ;
            : set_false "think_hunters_grill" ;
            : destroy "pacing_rations" ;
            : destroy "crackers" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_hunters_grill) {
         : match "hunters _;_ grill" {
            : gosub "say_half" ;
         }
      }
      }
      on_tick {
         : if (!apostrophe_warn) {
            : print "{otn}Adventuron doesn't like apostrophes, so you don't want to use it here, even if it's in the description.";
         }
      }
   };
   qt_nw : location "{point_fellow_yield ? qt_fellow_yield : qt_yellow_field}" {
      on_command {
      : match "fellow yield" {
         : if (point_fellow_yield) {
            : print "You feel no need to relive past victories." ;
            }
         : else_if ((!point_dirt_home || !point_bending_truth) && (!cheat_dont_require)) {
            : print "You'd like to convince the fellow to yield, but you either aren't sneaky enough, or you can't give him a safe place to go once he's yielded." ;
            : set_true "think_fellow_yield" ;
         }
         : else
         {
            : print "You take a balanced tone of friendship and defiance. You're surprised how well it works." ;
            : set_true "point_fellow_yield" ;
            : set_false "think_fellow_yield" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      : if (!point_fellow_yield) {
         : match "fellow _;_ yield" {
            : gosub "say_half" ;
            }
         }
      }
   };

   tq_n : location "{point_fly_score ? tq_fly_score : tq_sky_floor}" {
      on_command {
      : match "fly score" {
         : if (point_fly_score) {
            : print "You already imagined a fly score, but you recite it again, so you don't forget it." ;
            }
         : else
         {
            : print "The poetic nature of the sky floor embeds itself in your head, and you think up a tune you're surprised you were able to." ;
            : set_true "point_fly_score" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_fly_score) {
         : match "fly _;_ score" {
            : gosub "say_half" ;
         }
      }
      }
   };
   tq_ne : location "{point_bending_truth ? tq_bending_truth : tq_trending_booth}" {
      on_command {
      : match "bending truth" {
         : if (point_bending_truth) {
            : print "You've seen through the trending booth's lies. Rehashing that sort of thing too much makes you go in circles." ;
            }
         : else
         {
            : print "You realize that the trending booth's Stone Cold Facts are ice-cold when it comes to universal truths. You take some time to pause and think how and why the overgeneralizations and out-of-context anecdotes and such are inaccurate. Yet you also realize there's a place for brevity and not having to explain every detail. Some of the rhetorical tricks will stay with you." ;
            : set_true "point_bending_truth" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_bending_truth) {
         : match "bending _;_ truth" {
            : gosub "say_half" ;
         }
      }
      }
   };
   tq_e : location "{point_boring_way ? tq_boring_way : tq_warring_bay}" {
      on_command {
      : match "boring way" {
         : if (point_boring_way) {
            : print "The way is now plenty boring. You don't want to risk dying of boredom after preventing so much death from war. That'd make for an embarrassing headstone!" ;
            }
         : else
         {
            : print "You somehow manage to get into the fighters' heads that it's not as exciting as it seems. At first they're mad, but after a while, they realize it's all for the best. Peace may be boring, but then again, the excitement of war is draining." ;
            : set_true "point_boring_way" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_boring_way) {
         : match "boring _;_ way" {
            : gosub "say_half" ;
            }
         }
      }
   };
   tq_se : location "{point_dirt_home ? tq_dirt_home : tq_hurt_dome}" {
      on_command {
      : match "dirt home" {
         : if (point_dirt_home) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "Poof! The hurt dome transforms into a dirt home." ;
            : set_true "point_dirt_home" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_dirt_home) {
         : match "dirt _;_ home" {
            : gosub "say_half" ;
            }
         }
      }
   };
   tq_sw : location "{point_pouring_rain ? tq_pouring_rain : tq_roaring_pain}" {
      on_command {
      : match "pouring rain" {
         : if (point_pouring_rain) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "As your pain resides, you feel a drip from above. Then another. Then two, then four. Thank goodness for the shelter nearby! You sit there and find watching the rain surprisingly poetic." ;
            : set_true "point_pouring_rain" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_pouring_rain) {
         : match "pouring _;_ rain" {
            : gosub "say_half" ;
            }
         }
      }
   };
   tq_w : location "{point_funny_mountain ? tq_funny_mountain : tq_money_fountain}" {
      on_command {
      : match "funny mountain" {
         : if (point_funny_mountain) {
            : print "You already changed the scenery here for the better. Making the mountain bigger might destabilize it." ;
            }
         : else
         {
            : print "Nothing happens at first. Then a slow rumbling. A small hill pokes through the ground, sending the money in the fountain everywhere. Outside of the fountain, the money flies into the mountain and helps enlarge it. There must be a lot of money in the fountain, because it takes a while. The resulting funny mountain is an improvement, though the scavengers don't think so." ;
            : set_true "point_funny_mountain" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_funny_mountain) {
         : match "funny _;_ mountain" {
            : gosub "say_half" ;
            }
         }
      }
   };
   tq_nw : location "{point_grim_tune ? tq_grim_tune : tq_trim_goon}" {
      on_command {
      : match "grim tune" {
         : if (point_grim_tune) {
            : print "You already thought up a grim tune. Any more, and you might be so depressed you forget what you wrote, or you wonder why even bother to share it." ;
            }
         : else_if ((!point_fly_score || !point_pouring_rain) && (!cheat_dont_require))
         {
            : print "You'd like to think of a grim tune, but you don't have a combination of music and lyrics, yet." ;
            : set_true "think_grim_tune" ;
         }
         : else
         {
            : print "You sing your grim tune at the trim goon. They immediately have a rush of discomfort with their lot in life. Don't they deserve more? They go off to join a pyramid scheme, in hopes of finding it. Unfortunately, they get fleeced by people more awful than they, but fortunately, they learn a lesson from it and dedicate the rest of their life to helping other people.\n\nOkay, not really. They just come back and mope about how society is out to get them. But that's actually better for society than before." ;
            : set_true "point_grim_tune" ;
            : set_false "think_grim_tune" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      : if (!point_grim_tune) {
         : match "grim _;_ tune" {
            : gosub "say_half" ;
            }
         }
      }
   };
   gravel_trail : location "This is a gravel trail. You can go back south to the plain base{gravel_trail_house}." {
      on_describe {
         : if (is_beside "hissing_mouse") {
            : print "A {cc_hissing_mouse} hisses here! It's not lethal, but it doesn't seem to belong here, and it's not happy about that." ;
         }
      }
      on_command {
         : if (is_beside("hissing_mouse")) {
            : match "x mouse" {
               : print "The mouse's hissing appears more defensive than anything." ;
               : done ;
            }
            : match "get mouse" {
               : print "Certainly not in its current agitated state." ;
            }
         }
         : match "missing house" {
            : if (point_missing_house) {
               : print "You already brought the house back." ;
            }
            : else {
               : print "BOOM! A missing house appears. The mouse squeaks with joy and then goes and hides under it. And yet, it seems to wave at you before you enter." ;
               : set_true "point_missing_house" ;
               : destroy "hissing_mouse" ;
               : gosub "add_point" ;
            }
         }
         : if (!point_missing_house) {
            : match "missing _;_ house" {
               : gosub "say_half" ;
            }
         }
      }
   };
   my_house : location "{my_house_description}" {
      on_command {
         : match "see glimmers;see glimmering" {
            : if (point_see_glimmering) {
               : print "You already found something unusual in the house. You need an assistant to look through it." ;
            }
            : else {
               : print "You remember what you came for. The rare-thing-there ring. Where could it be? Well, there are a lot of glimmering things, here. It would take you a while to search, especially since they are in odd corners. If only you had someone or something willing to help with the busy work!" ;
               : set_true "point_see_glimmering" ;
               : gosub "add_point" ;
            }
            : done ;
         }
         : if (!point_see_glimmering) {
            : match "see _;_ glimmering;_ glimmers" {
               : gosub "say_half" ;
            }
         }
         : match "hi mouse;high mouse" {
            : if (point_see_glimmering) {
               : print "Yes! The mouse uncovers the rare thing there ring. You're glad to give it a cut of the useless but shiny trinkets. You win. (Fill in Thor's congratulations later and create a final image.)";
               : if (!footnotes_available) {
                  : print "Thor congratulates you, noting that footnotes will be available on replay, if you choose to have them." ;
               }
               : gosub "add_point" ;
               : set_true "footnotes_available" ;
               : gosub "track_achievements" ;
               : print "{bonus_score_string}" ;
               : win_game ;
               : done ;
            }
            : else {
               : print "Hmm, it might be worth calling the mouse back to look around, but you don't have anything concrete for it to search. Maybe look around." ;
            }
            : done ;
         }
         : match "hi _;high _;_ mouse" {
            : gosub "say_half" ;
         }
      }
   }
};

# connections between locations. There are warps for the first few areas, but after that, it's a pretty standard map.

connections {

   from, direction, to = [

      ## two-way stuff first
      west_tiles, north, qt_n,
      west_tiles, northeast, qt_ne,
      west_tiles, east, qt_e,
      west_tiles, southeast, qt_se,
      west_tiles, southwest, qt_sw,
      west_tiles, west, qt_w,
      west_tiles, northwest, qt_nw,

      east_branch, north, tq_n,
      east_branch, northeast, tq_ne,
      east_branch, east, tq_e,
      east_branch, southeast, tq_se,
      east_branch, southwest, tq_sw,
      east_branch, west, tq_w,
      east_branch, northwest, tq_nw,

      ## one-way facilitations
      qt_n, leave_oneway, west_tiles,
      qt_ne, leave_oneway, west_tiles,
      qt_e, leave_oneway, west_tiles,
      qt_se, leave_oneway, west_tiles,
      qt_sw, leave_oneway, west_tiles,
      qt_w, leave_oneway, west_tiles,
      qt_nw, leave_oneway, west_tiles,

      tq_n, leave_oneway, east_branch,
      tq_ne, leave_oneway, east_branch,
      tq_e, leave_oneway, east_branch,
      tq_se, leave_oneway, east_branch,
      tq_sw, leave_oneway, east_branch,
      tq_w, leave_oneway, east_branch,
      tq_nw, leave_oneway, east_branch,

      ## one-way between connected rooms
      ## hub bending paths

      plain_base, west_oneway, west_tiles,
      west_tiles, south_oneway, plain_base,
      plain_base, east_oneway, east_branch,
      east_branch, south_oneway, plain_base,

      ## Stealing Hill bending paths
      east_branch, up_oneway, stealing_hill,
      west_tiles, up_oneway, stealing_hill,
      stealing_hill, west_oneway, west_tiles,
      stealing_hill, east_oneway, east_branch,

      ## endgame stuff
      plain_base, north, gravel_trail,
      gravel_trail, north, my_house
   ]
}

barriers {
   block_qt_n : block {
      location = qt_n
      block_when = point_master_plan
      message = You got the master plan, so you don't really need to go back north.
   }
   block_qt_ne : block {
      location = qt_ne
      block_when = point_chalice_map
      message = You got the chalice map, so you don't really need to go back northeast.
   }
   block_qt_e : block {
      location = qt_e
      block_when = point_fell_short
      message = You dismantled the shell fort, so you don't need to go back east.
   }
   block_qt_se : block {
      location = qt_se
      block_when = point_take_crackers
      message = You already got some crackers from the cake trackers. There can't be anything more back southeast.
   }
   block_qt_sw : block {
      location = qt_sw
      block_when = point_shift_goals
      message = With your goals shifted, you've gotten all the mindfulness or whatever you need from the shoals to the southwest.
   }
   block_qt_w : block {
      location = qt_w
      block_when = point_hunters_grill
      message = You helped the hunters fire up their grill. There's nothing really left to do to the west.
   }
   block_qt_nw : block {
      location = qt_nw
      block_when = point_fellow_yield
      message = You got the fellow to yield in the yellow field, which was pretty barren otherwise. So you don't need to go back northwest.
   }

   block_tq_n : block {
      location = tq_n
      block_when = point_fly_score
      message = You don't feel as though the sky/floor to the north has anything more to offer you, with the fly score stuck in your head. Well, maybe you can go back for new artistic inspiration, after you completed the quest for Thor.
   }
   block_tq_ne : block {
      location = tq_ne
      block_when = point_bending_truth
      message = You already bent the truth a bit to the northeast. You don't want to do too much of that sort of thing. At least, I hope you don't.
   }
   block_tq_e : block {
      location = tq_e
      block_when = point_boring_way
      message = You cooled off the warring bay to the east. While you wouldn't die of boredom in the now-boring way to the east, hanging around there wouldn't get you any closer to your goals.
   }
   block_tq_se : block {
      location = tq_se
      block_when = point_dirt_home
      message = You changed the hurt dome to a dirt home. You can't think of anything else you need to do to the southeast.
   }
   block_tq_sw : block {
      location = tq_sw
      block_when = point_pouring_rain
      message = You changed the roaring pain to pouring rain. You really can't see any reason to go get soaked more do to the southwest.
   }
   block_tq_w : block {
      location = tq_w
      block_when = point_funny_mountain
      message = You changed the funny mountain to a money fountain. You can't think of anything else you need to do to the west.
   }
   block_tq_nw : block {
      location = tq_nw
      block_when = point_grim_tune
      message = You chased the trim goon with a grim tune. You can't think of anything else you need to do to the northwest.
   }
   block_stealing_hill: block {
      location = stealing_hill
      block_when = hill_aware_you_stole
      message = {stealing_hill_mad}
   }
   block_gravel_trail: block {
      location = gravel_trail
      block_when_not = point_gravel_trail
      message = Thor looks over. "Perhaps there'll be something there, but you'll need a magic object to see the way through."
   }
   block_my_house: block {
      location = my_house
      block_when_not = point_missing_house
      message = The hissing mouse guards the way. Besides, there's nothing there. Well, not yet.
   }
}

subroutines {
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : print "Submitted for the 2025 TALP competition." ;
   : press_any_key ;
   : if (footnotes_available) {
     : print "Because you went through once, footnotes are now available.";
     : press_any_key ;
     }
   : clear_screen ;
   }
   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>" ;
      }
      : increment "score" ;
      }
   add_point_qt : subroutine {
      : increment "points_left_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_point_tq : subroutine {
      : increment "points_right_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : print "<You just found a bonus point!<6>>" ;
         : if (bonus_score == 0) {
             : print {( otn + "There are a few of these in " + qt + ", and " + sco + " will let you know your progress there." )};
         }
      }
      : increment "bonus_score";
      }
   ask_thor : subroutine {
      : if (!is_int(original "noun1")) {
         : print "You need a number (1-17) for the rule to ask Thor about." ;
         : done ;
      }
      : match "ask 1" {
         : print {( "The first rule in Graham Nelson's Player's Bill of Rights is <not to be killed without warning<#ff0>>. There" + ((bonus_point_death_sentence) ? "was" : "'s") + " only one way to die, and, well, I think it's lampshaded right here." )} ;
         : set_true "ask_1_yet" ;
         : return ;
      }
      : match "ask 2" {
         : print "\"The second rule in Graham Nelson's Player's Bill of Rights is <not to be given horribly unclear hints<#ff0>>. Well, the author has a penchant for tough puzzles, but he also hoped to establish a pattern here. You should see the spoonerisms by now? It would have been no fun to spell it out immediately.\"" ;
         : set_true "ask_2_yet" ;
         : return ;
      }
      : match "ask 3" {
         : print "The third rule in Graham Nelson's Player's Bill of Rights is to be able to win without the experience of past lives. The author likes to wimp out about this by making games polite on the cruelty scale. And some of the puzzles may require trial and error, and some that build on each other may have tenuous links in the real world. But the author tried, honest!" ;
         : set_true "ask_3_yet" ;
         : return ;
      }
      : match "ask 4" {
         : print "The fourth rule in Graham Nelson's Player's Bill of Rights is to be able to win without the knowledge of future events. The author likes to wimp out about this by making games polite on the cruelty scale. There's some overlap here, though not as much as George Carlin pointed out about the Ten Commandments." ;
         : set_true "ask_4_yet" ;
         : return ;
      }
      : match "ask 5" {
         : if (!ask_5_yet) {
            : print "The fifth rule in Graham Nelson's Player's Bill of Rights is ..." ;
            : press_any_key ;
            : print "You know what? I could go for some lunch right now. I think I'll just kick you to a side room without warning. That seems fair, right?" ;
            : press_any_key ;
            : print "      * * * GAME OVER * * *";
            : press_any_key ;
            : print "Okay, not really. But that would violate the fifth rule, <not to have the game closed off without warning<#f88>>. This could mean putting the game in an unwinnable state." ;
         }
         : else {
            : print "Also, a general side rule of style is, if you text-dump the player once, try to abbreviate things the next time. The TLDR here: don't lead the player down blind alleys." ;
         }
         : set_true "ask_5_yet" ;
         : return ;
      }
      : match "ask 6" {
         : print "The sixth rule in Graham Nelson's Player's Bill of Rights is <not to have to do unlikely things<#f88>>. Of course, in some of the most fun games you do generally unlikely things in real life. But if I suddenly switched to anagrams or palindromes, that'd violate this." ;
         : set_true "ask_6_yet" ;
         : return ;
      }
      : match "ask 7" {
         : print "The seventh rule in Graham Nelson's Player's Bill of Rights is <not to need to do boring things for the sake of it<#f88>>. I'm worried we pushed things by making it to the hub, but I also wanted to give you simple puzzles to start. And the main swath of puzzles -- well, I hope they're about the right length. I also didn't want to force you to make a detailed map." ;
         : set_true "ask_7_yet" ;
         : return ;
      }
      : match "ask 8" {
         : print "The eighth rule in Graham Nelson's Player's Bill of Rights is <not to have to type exactly the right verb<#f88>>. Oh dear! You need the right pair of words, and they don't generally fall in the standard set of parser verbs. But on the other hand, they're clued pretty strongly. And there's some latitude for spelling." ;
         : set_true "ask_8_yet" ;
         : return ;
      }
      : match "ask 9" {
         : print "The ninth rule in Graham Nelson's Player's Bill of Rights is <to be allowed to try reasonable synonyms<#f88>>. With the way these puzzles are formulated, and the relative lack of standard action verbs, this largely doesn't apply. But parser command abbreviations over the years have made this easier. People type I for inventory and X for examine, and so forth." ;
         : set_true "ask_9_yet" ;
         : return ;
      }
      : match "ask 10" {
         : print "The tenth rule in Graham Nelson's Player's Bill of Rights is <to have a decent parser<#f88>>. Adventuron's parser is that and more. From my end I wanted to make sure you got some clue if you got one word right, because that's a big help in this game. The player should know if they are close." ;
         : set_true "ask_10_yet" ;
         : return ;
      }
      : match "ask 11" {
         : print "The eleventh rule in Graham Nelson's Player's Bill of Rights is <to have reasonable freedom of action<#f88>>. Well, there aren't a ton of verbs implemented, and the first bit was on rails, but I wanted to open it up and have something to do right away in the main area." ;
         : set_true "ask_11_yet" ;
         : return ;
      }
      : match "ask 12" {
         : print "The twelfth rule in Graham Nelson's Player's Bill of Rights is <not to depend too much on luck<#f88>>. Well, there's no luck here whatsoever. Perhaps this is outdated, although some parser games encourage the player to strategize for a maximum score based on random events." ;
         : return ;
         : set_true "ask_12_yet" ;
      }
      : match "ask 13" {
         : print "The thirteenth rule in Graham Nelson's Player's Bill of Rights is <to be able to understand a problem once it is solved<#f88>>. Well, in a one-trick pony adventure like this, that's not really a problem." ;
         : set_true "ask_13_yet" ;
         : return ;
      }
      : match "ask 14" {
         : print "The fourteenth rule in Graham Nelson's Player's Bill of Rights is <not to be given too many red herrings<#f88>>. Well, there are a few bonus points I hope you enjoy." ;
         : set_true "ask_14_yet" ;
         : return ;
      }
      : match "ask 15" {
         : print "The fifteenth rule in Graham Nelson's Player's Bill of Rights is <to have a good reason why something is impossible<#f88>>. This isn't a terribly ambitious game, and it doesn't have a ton to interact with. So this doesn't apply. But hopefully if you run into a puzzle where you have the right phrase, the reject makes some sense." ;
         : set_true "ask_15_yet" ;
         : return ;
      }
      : match "ask 16" {
         : print "The sixteenth rule in Graham Nelson's Player's Bill of Rights is <not to need to be American<#f88>>. Oh dear. There's one slang word here that originate in the US, but it's a pretty common one. Of course, it's not just about being American. Obscure stuff specific to any culture might make it hard for people to enjoy things fully." ;
         : set_true "ask_16_yet" ;
         : return ;
      }
      : match "ask 17" {
         : print "The seventeenth rule in Graham Nelson's Player's Bill of Rights is <to know how the game is getting on<#f88>>. That's done a bit artificially here, with points, and with the hub areas being closed off as you finish them. Of course, having a score hard-coding all this may be too on-the-nose." ;
         : set_true "ask_17_yet" ;
         : return ;
      }
      : print "\"There are only seventeen total rules, so just pick any one from one to seventeen. There are no secret numbers, either.\"" ;
   }
   footnote_printer : subroutine {
      : match "f 1" {
         : if (!revealed_footnote_1) {
            : print "You haven't revealed footnote 1 yet." ;
            : done ;
         }
         : print "AFGNCAAP is a self-depreciating joke from Zork: Grand Inquisitor, meaning Ageless, Faceless, Gender Neutral, Culturally Ambiguous Adventure Person, to describe you. This was who you were throughout the Zork series.";
         : print "\"As good-looking as ever\" is the default response in Inform for {xme}. It's an inside joke among experienced players and programmers that anyone who leaves this in is a bit of a novice, and the rest of the game may be underimplemented.";
         : print "It's a joke I like a lot, because I throw in a lot of AFGNCAAPs. I've never really felt qualified to put forth a protagonist with a strong culture or heritage. Some people interpret this a solipsism. But I think it helps to focus on the puzzles." ;
         : set_true "read_footnote_1" ;
         : done ;
      }
      : match "f 2" {
         : if (!revealed_footnote_2) {
            : print "You haven't revealed footnote 2 yet." ;
            : done ;
         : print "XYZZY is a sort of in-joke for parser players and programmers. Some love it and some hate it. It, along with other commands like PLUGH, YOHO and PLOVER, summoned a hollow voice saying \"FOOL!\" in the original Adventure." ;
         : set_true "read_footnote_2" ;
         : done ;
      }
         : print "I couldn't find a footnote numbered {noun}. At least, not one I revealed, yet.";
         : done ;
      }
      : match "f 3" {
         : if (!revealed_footnote_3) {
            : print "You haven't revealed footnote 3 yet." ;
            : done ;
         }
         : print "I originally based the hub names on the ease of finding spoonerisms. Then I changed the hub names to signs in Plain Base. You may've noticed that everything in West Tiles (formerly Quickie Trips) requires just switching leading letters, while East Branch requires both switching leading letters and changing letters after." ;
         : print "After designing everything to decide which puzzles depended on which others, I also realized that five of West Tiles's puzzles depended on other puzzles, while only one of East Branch did. But I didn't want to uproot a whole game plan just to bring different puzzles together. So I left the quickie trips to be tricky in their own way and vice versa." ;
         : set_true "read_footnote_3" ;
         : done ;
      }
      : match "f 4" {
         : if (!revealed_footnote_4) {
            : print "You haven't revealed footnote 4 yet." ;
            : done ;
         }
         : print "I wanted the initial bit to be an escape-the-room, but I didn't want the verb to be too hard. I was drawing a blank until I thought of Hulk Handsome's game, Go West, which ... well, the title is a bit of a spoiler. Nah, I thought, I couldn't just copy that, and the Village People, and the Pet Shop Boys." ;
         : print "\nBut I never thought of anything better, and besides, it made me laugh a bit. Also, Adventuron allowed for different sorts of syntax, so you can just type <W<#f80>>. I do enjoy getting and giving keyboard shortcuts." ;
         : print "Also, I encourage you to play his game, <In a Manor of Speaking<#f80>>, if you haven't, yet. It's very funny and fun." ;
         : set_true "read_footnote_4" ;
         : done ;
      }
      : match "f 5" {
         : if (!revealed_footnote_5) {
            : print "You haven't revealed footnote 5 yet." ;
            : done ;
         }
         : print "I'm proud of Seth Denton's, since the name itself doesn't quite make a spoonerism without the apostrophe, and it doesn't seem particularly ominous." ;
         : print "Other names that need a plural include Sean Kent's conscience (if you don't pronounce PRECISELY) and Fran Blake's bran flakes. Well, you can have one bran flake, but many of them as cereal would be more common." ;
         : print "Hearty Pat's came to mind as a store, too. But that's not a proper name." ;
         : set_true "read_footnote_5" ;
         : done ;
      }
		: match "f 6" {
			: if (!revealed_footnote_6) {
				: print "You haven't revealed footnote 6 yet." ;
				: done ;
			}
			: print "It's fun to reward the player for looking into things or even trying to break the game a bit. Here, though, and in the hub, I wanted to restrict movement to places you were done with, so you'd have less \"opportunity\" to wander down a dead end. Which can be fun for a bit, until it really, really isn't." ;
			: set_true "read_footnote_6" ;
			: done ;
		}
      : print {( "I couldn't find a footnote numbered " + original "noun1" + ". At least, not one I revealed, yet." )} ;
      : done ;
   }
   f_footnote_notify : subroutine {
      : if (!footnote_shortcut_noted) {
         : set_true "footnote_shortcut_noted" ;
         : print "{otn}you can view footnotes with <FOOTNOTE<#8f0>> # or, for brevity, <F<#f80>> #. I won't reveal how many there are, but you can figure them out by guessing and getting different error messages.";
      }
   }
   footnote_3_check_function : subroutine {
      : if (revealed_footnote_3 || !footnotes_available) {
         : return ;
      }
      : print {( "For some history on both West Tiles and East Branch, look at{footnote_3_reveal}." )} ;
      : set_true "revealed_footnote_3" ;
   }
   list_jump_commands : subroutine {
      : if (jump_commands_notified) {
         : return ;
      }
      : if ((!has_visited("plain_base")) || (!has_visited("west_tiles")) || (!has_visited("east_branch")) || (!has_visited("stealing_hill"))) {
         : return ;
      }
      : set_true "jump_commands_notified" ;
      : print {( "You've seen all the non-endgame locations in the game. There are several jump commands you can use in case you don't want to fiddle with directions.\n\n" + v_pb + " = plain base\n" + v_wt + " = west tiles\n" + v_sh + " = Stealing Hill\n" + v_eb + " = east branch" )} ;
   }
   note_north_bend_from_hub: subroutine {
      : mask {
         : if (!bend_seen_yet) {
            : set_string var = "tempstr" {( verb_is "east" ? "west" : "east" )} ;
            : set_string var = "tempstr2" {( verb_is "east" ? "east" : "west" )} ;
            : print {( "Interesting. The path bends north after a bit. So though you're going " + tempstr2 + ", you'll need to go south instead of " + tempstr + " to get back to Plain Base." )} ;
         } : else {
            : print {( "This path bends north, too, like the other one " + tempstr2 + " from Plain Base." )} ;
         }
         : set_true "bend_seen_yet" ;
         : press_any_key ;
      }
   }
   say_half : subroutine {
      : cycle key = "one_right" predictable_order = "true" skip_interval = "0" max_loops = "1" {
      : print "One of those words felt right, but the other didn't. You must be halfway there." ;
      : print "Again, you feel like you got halfway there." ;
      on_exhausted {
         : print "One word right, one word wrong." ;
      }
   }
   }
   think_thoughts : subroutine {
      : if (!think_chalice_map && !think_fellow_yield && !think_grim_tune && !think_healing_still && !think_hunters_grill && !think_master_plan
   && !think_shift_goals) {
         : print "There's nothing on your mind that you tried to do but weren't able to." ;
         : return ;
      }
      : print "Here is what you tried to do, and you haven't gotten it to work yet:" ;
      : if (think_chalice_map) {
         : print "-- get the CHALICE MAP (west hub, NE)";
      }
      : if (think_fellow_yield) {
         : print "-- make the FELLOW YIELD (west hub, NW)";
      }
      : if (think_grim_tune) {
         : print "-- sing a GRIM TUNE (east hub, NE) once you have a melody and lyric inspiration";
      }
      : if (think_healing_still) {
         : print "-- feel (or discover a) HEALING STILL (Stealing Hill)";
      }
      : if (think_hunters_grill) {
         : print "-- start up the HUNTERS GRILL with a gift of food (west hub, W)";
      }
      : if (think_master_plan) {
         : print "-- have the strength and self-belief to get the MASTER PLAN (west hub, N)";
      }
      : if (think_shift_goals) {
         : print "-- help others out enough to be able to SHIFT GOALS (west hub, SW)";
      }
      : return ;
   }
   tutorial_choice : subroutine {
      : if (footnotes_available) {
         : return ;
      }
   : ask_bool {
      question   = {qt} has a tutorial mode for the first few puzzles. Would you like to use it?
      yes_answer = Yes, I'd like to use the tutorial.
      no_answer  = No, I don't need the tutorial.
      var        = in_tutorial
      }
      : print {( "Note you can change in and out of tutorial mode with " + tut + " " + yn + " before you have completed the first few tasks, though this may break narrative continuity." )} ;
      : press_any_key ;
      : clear_screen ;
      : ask_bool {
      question   = {qt} also allows for color-coded hinting for important location details. This may help, or it may spoil things, too. You can change this option in-game, but I want the player to be aware of it to start. Would you like to activate it?
      yes_answer = Yes, I'd like color-coded hinting.
      no_answer  = No, I'd prefer not to have color-coded hinting.
      var        = use_color_coding
      }
   }
   long_words_note : subroutine {
      : if (!long_word_warn) {
      : print "<ALSO<#f0f>>: in general, longer words will work, but parser conventions have evolved to help save the player keystrokes." ;
      : set_true "long_word_warn" ;
      }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( footnotes_available ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "footnotes_available";
         : win_game ;
      }
   }

   options_cheat : subroutine {
      : match "cheat -" {
         : print "CHEAT alone doesn't work. You need to CHEAT YES or CHEAT NO." ;
         : done ;
      }
      : match "cheat yes" {
         : print "CHEAT is now activated. You don't have to do puzzles in order." ;
         : set_true "cheat_dont_require" ;
         : done ;
      }
      : match "cheat no" {
         : print "CHEAT is now deactivated. You will have to do puzzles in order." ;
         : set_false "cheat_dont_require" ;
         : done ;
      }
      : print "CHEAT requires YES or NO." ;
      : done ;
   }

   options_colorhint : subroutine {
      : match "ch -" {
         : print "CH/COLORHINT alone doesn't work. You need to CH YES or CH NO." ;
         : done ;
      }
      : match "ch yes" {
         : print "Color hints are now activated." ;
         : set_true "use_color_coding" ;
         : done ;
      }
      : match "ch no" {
         : print "Color hints are now deactivated." ;
         : set_false "use_color_coding" ;
         : done ;
      }
      : print "CH/COLORHINT requires YES or NO." ;
      : done ;
   }

   options_list : subroutine {
      : print {( "Many games have options for sound, etc. " + qt + " uses <YOUROPT YES/Y<#88f>> and <YOUROPT NO/N<#88f>> to change them. <YOUROPT <#88f>> shows its status." )} ;
      : if (tutorial_in_options)
      {
         : print {( tut + " is the first option command, " + (tutorial_done ? "but you've finished the tutorial, so I won't mention it again" : "though it's disabled once the tutorial is done" ) + "." )} ;
         : if (tutorial_done) {
            : set_false "tutorial_in_options" ;
         }
      }
      : if (in_debug) {
         : print "DEBUG OPTION: CHEAT turns off/on restrictions in hub puzzles so you can do them in any order." ;
      }
      : print {( "The only main option is " + notif + ", for score notification." )};
      : print {( "Note that we use " + yn + " to toggle options instead of " + on + " and " + off + ", since " + on + " is reserved by Adventuron." )};
      : print {( "Also note that a verb alone will not be recognized. At least, not in the initial version of " + qt + "." )} ;
   }

   options_notify: subroutine {
      : match "notify yes" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "notify -" {
         : print {( "Toggling <NOTIFY<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "notify *" {
         : print {( "The argument after <NOTIFY<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   options_tutorial: subroutine {
      : match "tutorial yes;tutorial y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "tutorial no;tutorial n" {
         : print "Tutorial mode is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "tutorial -" {
         : print {( "Toggling " + tut + " without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "tutorial *" {
         : print {( "The argument after " + tut + " wasn't recognized. " + notify_string )};
      }
   }
   tutorial_progress : subroutine {
      : if (!tutorial_about_done) {
         : print {( tcue + "An author frequently implements an " + abt + " commands page for the player to access. This contains details that might disrupt the cover-screen narrative. You can try it now." )} ;
         : return ;
      }
      : if (!tutorial_verbs_done) {
         : print {( tcue + "The " + verbs + " meta-command is useful to see what the most common commands are. A meta-command is defined as a request for game status that doesn't cause time to pass.\nYou should try " + verbs + " now." )};
         : return ;
      }
      : if (!tutorial_additional_metaverb_done) {
         : print {( tcue + "The " + abt + " and " + verbs + " meta-commands tipped off additional other meta-commands, listed in <orange<#f80>>, that may help you get your bearings. You should try one now." )};
         : return ;
      }
      : if (!tutorial_x_me_done) {
         : print {( tcue + (tutorial_x_me_cued ? xme + " is a standard command to start text adventures, to get your bearings. You'll want to type it now to continue the tutorial." : "Now you've looked into the meta-commands, you'll want to have a look at yourself. One convention of text adventures is that " + xme + " provides clues of who you are and what you're doing with relatively few keystrokes. So " + xme + " makes sense as your first in-world command.")  )} ;
         : set_true "tutorial_x_me_cued" ;
         : return ;
      }
      : if (!tutorial_inventory_done) {
         : print {( tcue + "Now you examined yourself with " + xme + ", another common command is to take inventory to verify you are carrying the item you found. This can be shortened with <I<#f80>>." )} ;
         : return;
      }
      : if (!tutorial_x_ask_done) {
         : print {( tcue + "Now that you verified you found something new, the last thing to do is to examine it with <X TASK<#0f0>>. Adventuron also recognizes <X ASK<#0f0>> and <X OOH<#0f0>>, but not <X TO<#0f0>>, as that's a reserved word." )} ;
         : return;
      }
      : if (!is_beside "cheering_voice") {
         : print {( tcue + "sometimes a game will indicate you should use one of your senses. While guess-the-verb is frowned upon in parser games, the lack of senses hopefully makes the guessing straightforward." )};
         : return;
      }
      : print {( tcue + "the {cc_whoa_guest} must be a hint. Perhaps you should determine which direction it wants you to go." )} ;
      : return ;
   }

   meta_about : subroutine {
      : print {( qt + " was made for the TALP 2025 jam after years of judging it. I always wanted to write an Adventuron game." )} ;
      : print {( "You can find specific thanks in the " + thx + " command." )} ;
      : set_true "tutorial_about_done" ;
   }
   meta_thanks : subroutine {
      : print "Thanks to TALP admins past and future: {tx_ca} and {tx_gf}. Thanks to those who came before who wrote so many great games that made me want to write something more welcoming than usual.";
      : print "Thanks to {tx_ca} for creating Adventuron.";
      : print "Thanks to my testers: {tx_wc}, {tx_gf}.";
      : print "Thanks to you, for playing this game.";
      : if (in_tutorial && !tutorial_done) {
         : gosub "check_additional_meta" ;
      }
   }

   check_additional_meta : subroutine {
      : if (!tutorial_additional_metaverb_done) {
         : print {( tnote + "You found one specific meta-command. There are others, but I didn't want to force you to see them all. You can if you want. You just need to know that a robust text adventure takes steps to help the player not feel lost. This wasn't always the case back in the '80s, when disk space was much scarcer." )} ;
      }
      : set_true "tutorial_additional_metaverb_done";
   }

   verb_list : subroutine {
      : set_true "tutorial_verbs_done" ;
      : print {( "While " + qt + " requires you to guess some verbs as part of a puzzle, it has a simplified parser otherwise." )} ;
      : print {( qt + " uses all eight planar directions, N S E W NW NE SE SW (don't worry! The diagonal directions are restricted to two hubs,) and U for up as well. You can use the long form of each direction, but it is not necessary. Also, <OUT<#0f0>> leaves if there is only one exit." )} ;
      : print "You can <TAKE<#0f0>> an item, but there is no need to <DROP<#0f0>> it. You can also <X<#0f0>> it, which is short for <EXAMINE<#0f0>>." ;
      : print "You can <TALK<#0f0>> (<T<#0f0>>) to people you see. Adding \"to\" will actually throw Adventuron's parser off" ;
      : print {( "No other standard commands are needed to win " + qt + ". However, " + meta + " will describe meta-commands, and <OPTIONS<#f80>> shows options that toggle. Also, many verbs have abbreviations." )} ;
      : if (jump_commands_notified) {
         : print {( "To save keystrokes, you can jump around hub locations with " + v_pb + " (plain base,) " + (point_healing_still ? "" : v_sh + " (stealing hill,) ") + v_wt + " (west tiles,) " + v_eb + " (east branch.)" )} ;
      }
      : if (footnotes_available) {
         : print "By winning the game, you've opened up footnotes. <FOOTNOTE<#f80>> # or <F<#f80>> #.";
      }
      : if (in_debug && !footnotes_available) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }
   verb_meta_list : subroutine {
      : print {( abt + " gives info about the game." )} ;
      : print {( thx + " gives info about people who helped with the game. I usually use {cred}, but Adventuron reserves that for its own." )} ;
      : print {( "<THINK<#f80>> reminds you of commands you tried that should work, or will work in the future, but you didn't yet have the resources." )} ;
      : print {( "Adventuron also offers the standard parser meta-commands of <SAVE<#f80>>, <RESTORE<#f80>> and <QUIT<#f80>>, to save a game for later, come back to it, or quit." )} ;
      : print {( "Adventuron-specific " + meta + " commands include <TSTART<#f80>> and <TSTOP<#f80>>, which start and stop a transcript." )} ;
      : set_true "tutorial_additional_metaverb_done";
   }
   track_achievements : subroutine {
      : if (achieve_tyyt) {
         : print "(Already got the {achievement_tyyt} achievement for ASKing Thor everything)";
      }
      : else_if (ask_1_yet && ask_2_yet && ask_3_yet && ask_4_yet && ask_5_yet && ask_6_yet && ask_7_yet && ask_8_yet && ask_9_yet && ask_10_yet && ask_11_yet && ask_12_yet && ask_13_yet && ask_14_yet && ask_15_yet && ask_16_yet && ask_17_yet) {
         : print "For asking Thor about all the rules in the Player's Bill of Rights, you win the {achievement_tyyt} achievement!" ;
         : set_true "achieve_tyyt" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_tyyt} achievement yet." ;
      }
      : if (achieve_cnnc) {
         : print "(Already got the {achievement_tyyt} achievement for finding all bonus points)" ;
      }
      : else_if (bonus_score == max_bonus_score) {
         : print "For finding all the bonus points, you win the {achievement_cnnc} achievement!" ;
         : set_true "achieve_cnnc" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_cnnc} achievement yet. You got {bonus_score} of {max_bonus_score} this time around." ;
      }
      : press_any_key ;

   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not here.
   ask_new_game                                   = Would you like to restart {qt}?
   ask_quit                                       = Do you wish to quit {qt}?
   invalid_choice                                 = {YN_or_12}
   post_quit = I hope you enjoyed the experience. Pressing any key will restart {qt}.
   you_cant_go_that_direction                     = {exitserr}
   unknown_verb                                   = Nothing comes from that. {verbs} gives a list of basic standard verbs{unknown_begin_note}.
   }
      }
   }

## On_debug and on_startup call the INIT subroutine, but on_debug sets a flag or flags to allow for cheat commands

on_debug {
   : set_true "in_debug" ;
   : print "Note to self and testers: remind me to comment out first two lines of on_debug if this appears." ;
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

on_startup {
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

## on_tick is primarily used for the tutorial
## main on_tick (for searching)

on_tick {
   : if (in_tutorial) {
      : gosub "tutorial_progress" ;
   }
   : if (!hill_aware_you_stole && is_carried("travel_grail") && !is_at("stealing_hill")) {
      : print "As you walk away, you hear the hill screaming. It realizes you have stolen something. Something valueless to it, but the principle's the important thing." ;
      : set_true "hill_aware_you_stole" ;
   }
}

## on_describe is for moving around

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_pre_command {
   : match "west _" {
      : if (is_beside "cheering_voice") {
      : gosub "add_point" ;
      : print "The voice says \"Yes, yes. That is the right way.\"{footnote_4_reveal} The fogginess clears a bit, and as you go west, a large, strong man waves to you. \"I'm Beery Thor. Nice to meet you. Got a few things to share with you. Just TALK to me...";
      : set_true "revealed_footnote_4" ;
      : if (in_tutorial) {
         : print {( "Congratulations! You've finished the tutorial. Now on with the game. While the tutorial is over, you can still use " + hint + ", though <HELP<#f80>>, another often useful command, is reserved by Adventuron for general parser guidance." )};
      }
      : set_true "tutorial_done";
      : set_false "in_tutorial";
      : press_any_key;
      : goto "burst_face" ;
      : create "beery_thor" ;
      : redescribe ;
      }
   }
   : if (!examine_warn) {
      : match "examine *;look *" {
         : if (original "verb" == "examine") {
            : print {( otn + " to save keystrokes, you only need to type <X<#0f0>> (noun) to examine." )} ;
            : gosub "long_words_note" ;
            : set_true "examine_warn" ;
            : press_any_key ;
         }
      }
   }
   : if (!look_warn) {
      : match "look -" {
         : if (original "verb" == "look") {
            : print {( otn + " you only need to type <L<#0f0>> to look." )} ;
            : gosub "long_words_note" ;
            : set_true "look_warn" ;
            : press_any_key ;
            : redescribe ;
         }
      }
   }
   : if (!inventory_warn) {
      : match "inventory _" {
         : if (original "verb" == "inventory") {
            : print {( otn + " you only need to type <I<#0f0>> to take inventory." )} ;
            : gosub "long_words_note" ;
            : set_true "inventory_warn" ;
            : press_any_key ;
         }
      }
   }
}

## main on_command

on_command {
   : match "credits _" {
      : if (!credits_to_thanks_note) {
         : mask {
            : print "{otn}Since Adventuron reserves {cred}, {thx} is the command to use to see people who helped specifically with {qt}." ;
            : press_any_key ;
            : set_true "credits_to_thanks_note" ;
         }
      }
   }
   : match "footnote _" {
      : if (footnotes_available) {
         : gosub "footnote_printer" ;
         : done ;
      }
      : else {
         : print "Footnotes aren't available until after you've won the game." ;
      }
      : done ;
   }
   : if (jump_commands_notified) {
      : match "sh -" {
         : if (point_healing_still) {
            : print "{stealing_hill_mad}" ;
            : done ;
         }
         : if (is_at "stealing_hill") {
            : print "You're already here!";
            : done ;
         }
         : goto "stealing_hill" ;
         : redescribe ;
      }
      : match "wt -" {
         : if (is_at "west_tiles") {
            : print "You're already here!";
            : done ;
         }
         : goto "west_tiles" ;
         : redescribe ;
      }
      : match "tq -" {
         : if (is_at "east_branch") {
            : print "You're already here!";
            : done ;
         }
         : goto "east_branch" ;
         : redescribe ;
      }
      : match "pb -" {
         : if (is_at "plain_base") {
            : print "You're already here!";
            : done ;
         }
         : goto "plain_base" ;
         : redescribe ;
      }
   }
   : if (is_carried "pacing_rations") {
      : match "racing passions" {
         : if (bonus_point_racing_passions) {
            : print "No. Best not get carried away." ;
         }
         : else {
            : print "You permit yourself to imagine being on a much higher-powered quest. Boy, you showed those boring old pacing rations! And the people who manufactured them! Or, well, you would have, if they were around.\nYour Walter Mitty moment over, you get back to focusing on your main quest." ;
            : gosub "add_bonus" ;
            : set_true "bonus_point_racing_passions" ;
         }
         : done ;
      }
   }
   : if (is_carried("travel_grail")) {
      : match "gravel trail" {
         : if (is_at "plain_base") {
            : print "You look over at Thor. He nods. You summon a gravel trail which appears to the north!\n\"There you go,\" he cheers. \"The rest shouldn't be too hard, if you got this far. But wait, you'd better let me take this grail. I don't think you'll need it, but the next person to stop by might.\"\nYou'd sort of grown attached to it, but he is bigger than you, and it is a little heavy.";
            : destroy "travel_grail" ;
            : set_true "point_gravel_trail" ;
            : gosub "add_point" ;
            : update_graphic ;
         }
      : else {
         : print "Nothing happens. Perhaps you'll want to use the travel grail elsewhere." ;
         }
      }
      : if (!point_gravel_trail) {
         : match "gravel _;_ trail" {
            : gosub "say_half" ;
         }
      }
   }
   : match "salesmen _"  {
      : if (is_at "nameless_lameness") {
         : print "Good guess, if this were an anagram game." ;
         }
      }
   : match "theory bore" {
      : if (is_beside "beery_thor" && bonus_point_theory_bore) {
         : print {( "Thor is " + (point_first_base ? "" : "likely ") + "bigger than you. Best not to overplay this." )} ;
      }
      : else {
        : print {( is_beside("beery_thor") ? "You worry Thor will be upset by this observation, but he booms \"Ha! Good one. I was sort of hoping you'd figure that. I actually don't mind people saying that. It implies I said something too smart. Better than being called a musclehead or whatever.\"" : "You snicker at what you've found, but then figure you better not do so to Thor's face." )} ;
       : set_true "bonus_point_theory_bore" ;
       : gosub "add_bonus" ;
    }
   }
   : match "turkey quest" {
      : if (bonus_point_turkey_quest) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke might make things a bit stale." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point." ;
         : set_true "bonus_point_turkey_quest" ;
         : gosub "add_bonus";
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;

   }
   : match "exits _" {
      : if (is_at "nameless_lameness") {
         : print "There's a puzzle here to start, before you get a clue which way to go. The tutorial can walk you through it." ;
      }
   }
   : match "think _" {
      : gosub "think_thoughts" ;
   }
   : match "verbs _" {
      : gosub "verb_list" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "thanks _" {
      : gosub "meta_thanks" ;
   }
   : match "drop _" {
      : print {( drop_referenced ? "No need to <DROP<#0f0>> anything." : "While classic text adventures often required the player to use <DROP<#0f0>> due to inventory limits, this is often regarded as needless fiddling today. Modern text adventures, such as this, often take steps to keep the player's inventory manageable so they can focus on puzzles, finding plot-plausible reasons to dispose of items that are no longer necessary. Plus there aren't many items to carry here." )};
      : set_true "drop_referenced" ;
   }
   : match "xyzzy _" {
      : print "A low voice booms \"Vexing howl? Hexing?! VOWELS!\"{footnote_2_reveal}";
      : if (footnotes_available && (!revealed_footnote_2)) {
         : set_true "revealed_footnote_2" ;
         : gosub "f_footnote_notify" ;
      }
   }
   : match "listen _; hear _" {
      : print "You don't hear anything right now." ;
   }
   : match "x ooh" {
      : if (is_carried "ooh_task" && !tutorial_x_ask_done) {
         : mask {
         }
      }
   }
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "Your <tutorial score<3>> is " + tutorial_score + " out of <" + max_tutorial_score + "<#ff0>>." )} ;
      }
      : print {( "Your <core score<4>> is " + score + " out of <" + max_score + "<#f00>>." )} ;
      : if ((has_visited "west_tiles") && (has_visited "east_branch")) {
         : print {("You've solved " + points_left_side + " parts of West Tiles and " + points_right_side + " of 7 parts of East Branch.")}
      }
      : print {( bonus_score_string )} ;
      }
   : match "option _;options _;opts _;opt _" {
      : gosub "options_list";
   }
   : if (in_debug) {
      : match "cheat _" {
         : gosub "options_cheat" ;
      }
   }
   : match "notify _" {
      : gosub "options_notify" ;
   }
   : match "tutorial _" {
      : gosub "options_tutorial" ;
   }
   : match "meta _" {
      : gosub "verb_meta_list" ;
   }
   : match "ch _;colorhint _" {
      : gosub "options_colorhint" ;
   }
}

## assets are arranged by room, in approximate discovery order. QT is listed below TQ, with F

assets {
   graphics {
      lameness_16 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVSUlKtra2fn5+YmJimpqZgYGBnZ2dubm5ZWVl1dXWRkZGDg4NLS0u0tLR8fHyKioo9s6mBAAAB6ElEQVRYw+XYIZaDMBAGYHIELrACvQ6JRdUjse0RKmvpARBcAIHEcgFEZS0KzxXovja0ZCYzJARq9r8A3yOTySSeJyN8meGVPnym+SR45SaTPXMtZBKZtJsSP1O9c5xylrmMf/HemQA/CiCCgN8J0G4NEAuAWgsoICCZvn9/AQ5rAQMBuOkBuTvA0wJCqgQAIEGAOAZrYAoYDAFKCeQIcLcHCBUAtkHNAhIEiJ0BoAgCUIO3+QrMfkAKAYfVgH4OqCEg+zIgAICWWoEUlMAHUMrvnwyLUC0CY0C3OSDSArIvAAYdQPkBmi7gABAEINQBsozog+l6gG8BaNcAKh4AjwIAqHcH+DYAOAyQZyELOP87QMkBBAmIdIB2c4C/AGi4Rjirwq4jzwJ+CXy8CwflPNadRRsCxFaAlAaU3wXcScBRB/BJQMQAPjNxYQBg54FlQL09YHQAtBCQE/eS2VD4Bpw4wGwX9jsDLmaAhgNcdwWENoACAdDFoASAcdRtQ1dAQgOqVYCo4XaBpggYQMkAyMOwsQXgIqiITrQE6HWX42VA4ggAUzn5PIEAhSNAIAD/PkIDUC+kbqcXK0C9NwBN5b0tIKeGIrQCchsAgNC9TyBAYAHoqE6o7EP+jSqC7yMmALgG6AcovfgBhBvnaozG45IAAAAASUVORK5CYII=";

      east_branch : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABj0lEQVRYw+2WYY6EIAxGv+wegCts8AKb8f536g1YCqiIONtS+TdNJKiEPp9Fgf8/lvWI13ZxbeLt4DcBwRjfS3QH0LtmBug91Q2AVoAMoPdYNwBaAUKAznP1AdQChAAxHZQhFCAFWFYXVEFCAVIArwfwzwIsjqLXeLjgAqU2OMREnA2xw+cUe+DTOOT1MIDnBJwOgZMjnVAGoBBcAUgt3yY/C4A4D7cpGTd8oAbg27MBcp6A3M1AlYEwEQAbADgNOgCpJGYBpHLbCy/lPgGkImQuOcAqjGKANoD99bcG0iKMy1AYWgBOXIqQDgBXFWEulHkA1TJ0BYBCXnmhALipAOT2DxEKQHrzfK28gvQhmgGg+xR/AJ4G0O8HHga4id9v4wQfAPG/4LQNPXYbP1/dnat8VjlAf/4KwKt3xDqA/vQ1wJAC2AScAIYUwCbgDDCiADYBZ4ARBbAJaAAGFMAmoAEYUACbgBZArwA2AS2AXgFsAi4AagWwCbgAqBXAJuAKoFUAm4ArgFYBbAI6AEoFf6Nz3WvHUTc3AAAAAElFTkSuQmCC";
      west_tiles : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABbklEQVRYw+2WUY6EIAxAm50DcIUNXmAy3v9OvUEXJKwCxWkpOj9TIwFDyuOJCPj3sax7vPLDtYrTzicBgj6eG6gHwD0zA3Cz6gBoBcgAuGl1ALQChADMvHgAtQAhQBgOlCEUIAVYVkeqQKEAKYDXA/i5AIsjhHCH1BSrFEpCpCA7VGIZbtrasenwNRnAuzhuBkgXuVhPE6a97WIn9NMBQtqUO5cbz8cAiJKSDgDdAbDV0xooASgulhsAgAoDh0VI6OQAqzAaAGhewbGN0rwaAHTnizC38RqAbYT/T5D7DK8GCBtR3oLqjahYhGkjugBAuRV/AWYD6M8DkwE68XwYE3wBxP+C4hi6nzZ+f9iTqzyrHIDPfwDw6hOxDoBPfwQYUgA2AQXAkAKwCSgBRhSATUAJMKIAbAIqgAEFYBNQAQwoAJuAGkCvAGwCagC9ArAJaADUCsAmoAFQKwCbgBZAqwBsAloArQKwCWAAlAr+ADhk6qlVb5HUAAAAAElFTkSuQmCC";

      qt_n : dynamic_graphic {( point_master_plan ? "qt_n_after_master_plan" : "qt_n_before_plaster_man" )} ;
      qt_n_before_plaster_man : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAhElEQVRYw+3UywkAIQyE4RRg/0XkYgtbgLCteA7CrGwJIvz7yNwlH0OiNTiWgAQkIAHLL88BAyQWcErj3w3MHShwA8PoHThQgKSOAwoK6FYK3IDRgNES8AmAL2YCwjfkvYC6SWCr46PKa4CAKXBHAeIBAQOcBsQDAGIB9yliH9GuJCABF2/W9E17T7/QAAAAAElFTkSuQmCC";
      qt_n_after_master_plan : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAiUlEQVRYw+3VuRGAMAxEUfdfihI1QkVKFl+4ATPzk9VArIcu2gNHM8AAAwwwwAADDDDAAANwQMBxA9B8K4UAVOPpyZWFAE5acS2IXfwkAD13ja9XLwUyA70DWg2AAPEBKoqbgdsBvN6CNYTQHThrWNAdiNV8UXcgdw1UyoDWMPdfgGnBzEoCfosXzzjyF/ZYz+8AAAAASUVORK5CYII=";

      qt_ne : dynamic_graphic {( point_chalice_map ? "qt_ne_after_chalice_map" : "qt_ne_before_malice_chap" )} ;
      qt_ne_before_malice_chap : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw8XWQY7DIAwFUEtedeU7TC5g1Rftdu5Uaa7CAUbKGChtIGwIg22lqZRF/eLyE+BrrORYLMiop+ri4A/CBIBZD0RBtANs7QAU0IzgbgbQxsgAiqgEpgCgfQ9gCWj676kagR3g1V8FLgBBChTbBwosHgCIvfMHrABVCinfffq6nsM5wO9P/rgA8AhgI8AxBCEngPL5cgxmAYXhBgDTCWxNCt9PojqHdxsAa1utDEAHgMYw7BQgvZDEBiAtgCgaWoCYAXQJegI47gUg/QXoAhAqGWgGsAywyWkEnQwMrsIZQNmRgHgBJO8JxQog54q74s5lO0BMgSOAIRUaAbbe7eeaWASXAIzH7sXAaAYos68LV0+g1/+ZjrNgMeCVvgQIzzz/ei2ungC+50Cfe2fDCXxCkF+IcD2H8B8pnMnhJOBbywsQl8ANbg94dB6GKwAyAhAjQO8RMAj4A7zBbqsBSRiFAAAAAElFTkSuQmCC";
      qt_ne_after_chalice_map : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAbklEQVRYw+3S0QkAMAxCQWdpNoj779YVIlRKQAeQ+3g4yjiadIlVgJoBOgAbgHwfQQCrADUFdAAmAGmIIAAYEpAiCACOBJQIAlgEKAXQARgApCWCAGBJQIggAHgSmEcQwBpAqYAO4DGANEXwHXABCrUdDkSf978AAAAASUVORK5CYII=";

      qt_e : dynamic_graphic {( point_fell_short ? "qt_e_after_fell_short" : "qt_e_before_shell_fort" )} ;
      qt_e_after_fell_short : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABLUlEQVRYw8XWQRKDIAwF0N9tFky5gGdPt5wKL+AZah3bWqsQSDJ+ddwovJGQEdN58i3OweQc1AT+BlQF7gbUBd4GCATOBkgEvgaIBK4GyASeBggFjgZIBX4GiAXmBpwRzgXGhoxwTCgJyoYxNgEWQjgglAXV7zC2LAPWydEkODUM6z22Gf4JGYIcDRetyjEjVnOfQmXkQUMIWUKoZRw0m9KEoOsLPYTQvTOsCMflKapPI8KnxVl1x2aCQjD3RxMC0N8ov60pbcICwvZ5/Ly9S0zlUOJ1FAWBQYUpHmUB0+tUEsqCWnj5ECoCiKAQLBNDRQCzSrDDdBB4OS4lEPF8XUtg5uRCEPyxvMsZZLUS6N1RVxP8FqKB4FWOLSvhtClb3mOmiwkJVoJk1WUVeQKxBKKctnM+FgAAAABJRU5ErkJggg==";
      qt_e_before_shell_fort : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABHUlEQVRYw9XWQY6DMAwF0N+tF1G5wJzd65wqvQBnKBOVKbQB7NhWNB/YBXjCsQXm45TbtASzLpNy/YwrgdagFpwQVoH+O3gR3oJoAwSCYAMkglgDRAKR4fHjSPgWCAy9giahJQisBaSCOAPEAncDjgjHAmdDQWoTzgSehlIJqUE4F3gaUI9vwpWgbehrx1WwJxQI4j6SsBNMl7nPKbIjUpEQYpvynxLScAIwmvA34rymo5pgECzz0YVgKMNmNOVNWEDYrsfubmUo8+spBgKD+gVMv6eRYBLUT2AkgMhShvpimAhgNgk+MB0ErsdQAhEv11gCM+cQguCPZd3OIK9KoLejRhPiCqEgRG1HTSWCmlJzHzMNJmR4CbLXlDXkCVh7pDUhiROjAAAAAElFTkSuQmCC";

      qt_se : dynamic_graphic {( point_take_crackers ? "qt_se_after_take_crackers" : "qt_se_before_cake_trackers" )} ;
      qt_se_before_cake_trackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABN0lEQVRYw92VwW7DIBBEV/6D9c0nWv9xjvxkkXuuMjGx4xoSt4GxN2r3gkZC8GCGRT5eXPJ3AYBBpwJwtgUIiKUOU91GI4Awb4fp7PEisNTxAOF7s24kcFcQoB5BSo1fAfhTvIQhBSiNg1TvP57c+yWF1QQEgFPtvC1ASAEQCfwdAMwscNGG7nUWdDohWAJkr8BHBF0aksErSGKgt2cAwz6QIgxXBAfLTpgxDGsDzH/Dx8aHw0L45MrH9YF85Rko57IDmPUGl4EFGwCFCFKfgA0LCk0QMgF0CoRMAJ0CIRNQkfsqANzp1AL8Mp8FCF9nSvMA2Sdbqn8C6J8qkHq7pG5aqWYB3qSh9D8AwGfL6B1uAMroPSx4bwm9SwaU0DxA3/TrI5XqXQD6tl7zAM04T9tqzXfC4+oCbO+g76wTpBYAAAAASUVORK5CYII=";
      qt_se_after_take_crackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAADXUlEQVRYhc2Yy2oqQRCGhSGg7e1VBoqAEjznFQLi+whushRcucs6K8FlNj6AC2HWA4L74AMcyKnqduyqmp6bCSYVGVMO2t/8dZue1tsPW+s3ALy2mN3bpw86a2/k9/beyB9+eiO/++6N/H7qjfz2izfyBx/eyH+YeSOAV7b+cok+W3+3Q5+tfz6jz9bfbNBn6x8O6LP153P02frHI/ps/efnlhSgs5QC9HZSgOFZCtDdSAH6BylAey4FGBylAA8IIARYL6UA+50U4PMsBXjfSAHSgxTgZS4F+DhKAWYIwBOigwDc7yEA94cIwP0uAnC/jwDcbyMA9wcIwP0HAhARQAARAQQQEUAAEQEEEBFAABEBBBARQAARgSAArfSPAQDa30YACwkAf+zq+FYIAGMGcMZU4wAxWjMAGOHigEcLcAKg9emtCAAvcfyNCkCMay/wWw4A/yEJ6M0CTCH7uwLEEJcANFYA6OIhgmh0VeAEXoEpZJYBrMjRIbAYTAF7zAC2AE9XgCRNAFJ7sAB07UAUMLrmAImQ5UAIIOYATgGLwRSwRweAy0f0/QxgAhBP0hQmDoBORiMGYOMPvgpg+uheBQo4gGIFtsSLLxTBAdirQQnSWxVQOaBDoBWwV2hfXgFgCjTPAVcFKygIgVYALgrEEM6BGlXgQgCiD1AceCf0CrgC8ApgCjgFnkQVeIBAH+AKzDIBHkUnXKFkZQCsCogg9kmYB8h3woocIKMPxgzAh0AroMswD5CbBaIKQiGwAJEAKFFAN6LkAhBlAPHoGxRo0IqpBFJdBQtYwJdyoH4rTiJwEmR9gDKU9YEaVUCjSFdBfQVsEbJZcGlEDfqAbQO+D+z9NCpSQCShBrC/zVtxZQ5cG+EFwN8QhIfRVs0CBWDPtX0jqpwFJD5wgKACvBHlZoErwuRGBfwwDAPkWrGaBbYK8OwEbsyBnAIqBLlhpGYBpX9if7B2Fag7Ip0DFQpgCshZQArEXoHKPpC7JwSAMoBcKyYCNgt0DlR1wtBN6XhdEoJAK94GZkHZvkBWQem+wCgFjFLAqEZkFIBRAMZtTFwaIIBRAKZVd2/qFLh1b3qCgr3pmwIwCsCozbFRAEYBGAVg1ObYKACjAO7+eIIe0fDdqqGHNvf1f8VDqh+1/zZPM48vP43iAAAAAElFTkSuQmCC";

      qt_sw : dynamic_graphic {( point_shift_goals ? "qt_sw_after_shift_goals" : "qt_sw_before_gift_shoals" )} ;
      qt_sw_before_gift_shoals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACA0lEQVRYw83XMYvCMBQA4IcPB6lH/8LhTW7BrIJ/wSWzf0nc8i/ci3DQVVBwFKfuR+FwE3JpXtuktnJyzRHfZpW+ry8vLxW+gkXGKSAcgQcnlEWAgAQSMAxN0IJwBFoHDNkLnIduxyw8gb8QgYUiZOGr8CoEwNAEhsGrwF6jFwIO6LoVg1XBLUIYQuYWgcO+b/C/Bav3hHfC6fREeqRjmvZEb0LqjLnirsfjsRw5bszn7idofAc+ijCb1Q8XXS7JFk2WxcKmGY/H0EiMngmDwaBMwJLdOYno/nEcF1fNot/2BwUPlsUHgW0mU0kJLkUkhsBW6ipKQqz2Ks/dVnBq4YMwkhO5XlMRknPyRoShUGK5pE4ofnjI7XNX3eKFoLtxNtExNYQo2SXbnSEslI4rEWJ1U7lDaO5ND4SR3Mi1ITCAI0REGIqVWBKBKXVQ8X8RtIBJOZUjIhTrQAQmxFUMiQCgt4NqEbDcn/0JAHo7yHsCgN4OgghmHVoEakrsTeDlOrQIZh0eErCaT6w3Ie0kbPkzBPQzF3gnAbsJ2CAwP4TUIaAlcEtAS/jsHs89CdwS3uvJFKEl5HYsqLR9TvU/rFOH8FET6PZE+LaErqkA3CNhTU9VjCa0hGV1QmgCdhDQJ6GVwBCqPwpwd1L7OymrBHRSN19UzGh67hWuP6Gzy3+97MQPgAAKM+EiMO8AAAAASUVORK5CYII=";
      qt_sw_after_shift_goals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABAklEQVRYw83VSw6DMAwEUEtzIUu+/4ptb5F9z9BWSUOoIJ/GMGSNxGM8OPKknWDxCI9gdEIKQYiEKFCwCW8BjxDnAGYXzNh1DHyC3YigLELgp3AXgoBNUNBT0Ht0gbigcxVpKZQhcAihDMHkMXvsv6P5n6AQPq9G/iemCUux5noJ2wfFMYTvrunh4BzC8dDrmRAIa1rwJJRDaHchXVA+hNRGlcbAKxk5EVaBoPjYKwjL8ZybB8nuTuh2xIcwTTjqG9oBSL6sfUPYhlElwGcvjOzhH4L6EJZq9yuNgNt2HPnwvcfmL+udJqgMbUk7gTB2SeESQk8WblUYGsE5BHSUf/e8ANvyi1Q9HJa2AAAAAElFTkSuQmCC";

      qt_w : dynamic_graphic {( point_hunters_grill ? "qt_w_after_hunters_grill" : "qt_w_before_grunters_hill" )} ;
      qt_w_before_grunters_hill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA/0lEQVRYhe2UQRKDMAhFOQs7Nh6WXa7XA3iGQlRM0mg3/nFDxnbSeV/mCaa0vrwoBVIgBVIgBVIgBfqf7Gu5jj/P6QfflEBwmvGLChBOU858f/+DnOZ8UgHEQ+AzBMYuongIjHx8CBS/E+A/BR7hFFy4FGVV24iqFE8szf0gTjEhEf+U4pdazpNRAccpGmSBImZYg4ZtI9FFHKcYkPiKgH2b6lEAyClekD5gimwj23qI5LQeR9Tw1iITU95jtQCUU5wJ95P6lu4TqgFG81aA92NyBLxFjOadgK0zUHvVF0BwahLnOZXaIRl6COFNB5p/KrFNGWeI4cQvrxRIgdcFvqhcaqJm8QFwAAAAAElFTkSuQmCC";
      qt_w_after_hunters_grill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAnUlEQVRYhe3SQQqAIBAF0LEDBO5aRjdt58ozumzVGRKtIJUWJn8I5y9yCpLnL9qZQwIQgAA+vW0LU1+ArTD1BbCFqS8A+ydgBzSIAH4NcPQMHKB0yGTiCgekBcAB6j57WOGArAA0QF1njz0QOSwgK2AEA3wBZtXnJfwBWEBeQC1gqcucAvyjqo1aAQZuQOU2HwCvtwIQgAAAgGZhBxx22kRKCATdGwAAAABJRU5ErkJggg==";

      qt_nw : dynamic_graphic {( point_fellow_yield ? "qt_nw_after_fellow_yield" : "qt_nw_before_yellow_field" )} ;
      qt_nw_before_yellow_field : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAkUlEQVRYhe3USwrAIAwEUO9/g8FcRHqCQKAXKtiPbroNgak0g5+V8FSSYuSUBKwJEJ0jASxAYPIFvABcYQJUxiQB1HQ3O8QCCF7AvREBotL7vZIA4+7zHSgAmAJiEXXgAyieRJSBuxEFtYF1ARrzAQn4AmDzpQHVefSdZQGoDVzAMxLAA7Q65n8BcUlAAhJAB5yoo1vNe3aQ+AAAAABJRU5ErkJggg==";
      qt_nw_after_fellow_yield : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAMklEQVRYhe3OwQAAAAgAsfyVUggqjPtsBJuLjYCAgICAgICAgIBAHtiYgICAgICAQB543dVo4odGjOkAAAAASUVORK5CYII=";

      tq_n : dynamic_graphic {( point_fly_score ? "tq_n_after_fly_score" : "tq_n_before_sky_floor" )} ;
      tq_n_after_fly_score : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw+1VO7LDIAxU48L25WhyL1p31Knocyf7BhAwkZYYz6ui58wEzWQi2M1q+SlEPXp8RSxW0vkh6d1xdjMyOS6SPnzLpOF2ogomTXdqVRdrUX+GqhOmQf0Rqr5hpvpDqwpmqj9Ro5qcWqx/xqqcODVY/4hV+SMzr39oVMHM65+oUbUEAyQGHLGsIRggMeCJZcHM1YdGFcxcnQ1Uqt1AN2DxYmf0ASev2+DFjugDXl43mKm69AGogpmqSx+oVH/ewNV9uBvo0ePqWC+Oo4EY/uZ/HG8MxELJX/FE7eN4NhAZTJ8tRiaKgCpOeU4wOM6DLb5STZwNBJhLWdmjLUBADT83UGYSL6zaOBuI9U2RzdpEQA0/GijnFvdxKCNdnIpNIezPo+zWfk9XbZxqY3w5w35CLKCLU30yr8tZfvYmoIdTfTPkwMKJgBJeGwhv2XZopEr41/0b/ns8ARQDOnILAl1wAAAAAElFTkSuQmCC";
      tq_n_before_sky_floor : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtklEQVRYw+2VawrDQAiEvf9h1xto6yPGLKG/Om2hDmRJ9pvIsBpCNBqNRqPRaDQajf5e68vaA7C+9r+dk+2pX45Vb95B8gxwAFWxNaFWARy3FqhwgEqcrtyEcgvAEid0eNzAZwEop8VGmn0vAObPANIPpqRVAMvJVvYNjX7tBcCcls9onEt9Lmnw8GCeAbxL3Me1R0XyChDDEQkv3QLzFoDPtnUHmFNMqNS6Lnf9GcN/7m/4cT0AR9iROk1tXK0AAAAASUVORK5CYII=";

      tq_ne : dynamic_graphic {( point_bending_truth ? "tq_ne_after_bending_truth" : "tq_ne_before_trending_booth" )} ;
      tq_ne_before_trending_booth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA5klEQVRYw+2UMQ6DMAxFc4CKKGuH+lRZcy+2zFWPwiGydI0aNiYXB5AQ7UJb5asiH4koGeLH9zcqgqX+FsC86lIWgIiY8mt6EgBgkUk0blEAnAEYB4BzQBLAPAMAMgCfgkRJvj6xeDFumMoCrPovAZAVBABzgLcOmOIOJCkuGTA5C3S0KUADLNXCckNoIABBc77i7pqIAej7h9S3LmIANDM30VrrFKYFemhHAKADYWilBQ6XgSmEDjYF8xi69dE+gOuHOk+LP3Vqc7RPXwJ4deu8ggC8+RVXgApQAQ4G8CtVgAoAB3gCmp0r2VJT7KYAAAAASUVORK5CYII=";
      tq_ne_after_bending_truth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAsUlEQVRYw+3UsQ3DMAwEQK/ANoV/KrUaMHu5NcAJPqYcu0mAGEmgh2F+oULV4UVqmMUZTguw14ydAYTRCafBAXh3gMPc24GIaQBLA0+AqAEIG4jn32eAggb0W7AUEP2vuyBoIF4/9iBmQTIDDcAGkDbAtQFTALg9ASX/gHwLxIDx0FU/wFS1gKloAaWUizcwV/UMVPUW/AC4f5nboavPOS/gzVecgAQk4GKAfyUBCZADHjetW6UpE8lUAAAAAElFTkSuQmCC";

      tq_e : dynamic_graphic {( point_boring_way ? "tq_e_after_boring_way" : "tq_e_before_warring_bay" )} ;
      tq_e_before_warring_bay : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABlklEQVRYw+2WT4qDMBSHA9JFETyLEFwIhR5Csp1LucpmzuD+DV5gegg3XRTBLmY/zqsxkyf4B2NjCjO/xbdQ2nz8En2yxnvYTuvU/wovoFA2NUA5pcH2qQAwaOJxIwoIwwK8noWCAQu9KtTQxedGwMcnXB6n4Q8r9NswuRX7tNDH50YAY/hELCh8DzFxyVahwPWZV4W6wF0owrmH8iZxFQOtcBUUW2YEYAsQ1rMK95ZA5d7iwgabR8TkkNilBfVMzA3rqnlvIgN9K2reKoKt74ZyVuEmKwKd6ioqgs3fDLOfLEcZUegcREThVAFPAIVOdwIMnClwTMpzCp0sGWAxp4tVOoU8HUAn4RnFcjYoyDSn0BFJRuGqBqZ//jXEyAVXNTxX4WSvkEpcx0ApJILCXQ1a4dwSPHJucWEDhzU8uQVuqxDj2yAwUH8W8CwmcFeDUkhlTKASJyImcFeD2oijDChUDiKgcFbD71mg6F+OYgBnNfQKY0Ni7YiwrUEpjA6J1SPCsgalMDokVo8IyxoYf35eQGFlDT9WOnx8tQJVYQAAAABJRU5ErkJggg==";
      tq_e_after_boring_way : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyklEQVRYw+3UMQrDMAwFUO2GXkarDu1doBP0ENkFOkOTlAYvMbSk+oL2o8WL/ZCFKOChL927EB21nT2fEHEbCkNYhgIRxiZYuKqdMVJmwUPXrJLkWRij1DppQAl7kATX3npT5EeoztrwGwTXI4brQt/eb9iPaLoxoIRO1KAEn0xCEsGeBMcR/LUdDbigY7Kfswh+OglphAiLP2FK4Osi949yJYELEARP4AIEwRO4AEHwBC5AEDyBCxAET+ACBMETuABB8AQuQHizDQ/W01/UqIsntQAAAABJRU5ErkJggg==";

      tq_se : dynamic_graphic {( point_dirt_home ? "tq_se_after_dirt_home" : "tq_se_before_hurt_dome" )} ;
      tq_se_before_hurt_dome : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABi0lEQVRYw8WXXY7FIAiFzw5Yf1c1W+G1Twwo/lRvJrk0Mr1pa65RP+EAFvLmgl4k76aID+W6uDL8DwBjb2UCMPChmQiAvnF9M6UDsN3Up+BsgLo2lmYiAJrzWwyEnYA3EWCvqZkIAO5CcPdz1AQxANoBJBOAHWASIb9T0/c5oBrCNEAOEPQBYjFYVlNDQMUHnwdpADARaCFi014RgcYiBU0QAahrwYTwoz91P1WqJAD2Uei1gNwvSQC6Ho0o7C+S0NkEAQn2rdM8hRoCOQDSt4r7uq6mPcR8gNCItulb5OZhjkgcIBADw/szQOs7DVB3SaMCeh2MngoQkEDzgyUC8jTQKkIWgGXgsnah0AckC2DOPvYoMbkE5lEAmgdSEyUtvSctQH8A4DwAu7tHMEznYwTTypcanI6iNEdkuTMAbPeuuv51XOQoWQAl+KjV4RoGUknOA0D6Aez5beiZiE4D9GW2r2PE4jAGsIzkYf0cAKzGxrNKHQfY5MaPrhwAbDU6GYC2v/MA+DMAQgC/9ff8qf8Ctc8AAAAASUVORK5CYII=";
      tq_se_after_dirt_home : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAy0lEQVRYw+3VMQ6DMAyF4XcFlJNY7M19uRZ7lxwgLUKiHYhkWy/JgD0gFqKPP0Hg7RhZbid51oLjmX1pzGsQQFqANAbQDOBKAGIAVwIwA3gSgBnAkwDUAI4EoAZwJAA3gD0BuAHsCUAOYE4AcgBzArADWBOgWkY0gGRa0gQoq2pyN0DWAUovQKk6QM2dAFkLKL22QAuojwGcX93v9jtjAWmV4/J3K88AXK0DMOsQxhYE4Dh5MvkQnoBZ/4LrVQMQAApgs4wOYFpyOuAD2wKbyFO+eg8AAAAASUVORK5CYII=";

      tq_sw : dynamic_graphic {( point_pouring_rain ? "tq_sw_after_pouring_rain" : "tq_sw_before_roaring_pain" )} ;
      tq_sw_before_roaring_pain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyElEQVRYw+3VOw6DMBAE0CkjFz5zSp8iovaptk3jM8QmRWK8KEixdxLhEUICgebxWUAiBxPw6QCBf9u63ctiBxDk0ABrOw2AVwgAVLEG1O2XcE2WgG17jh1AmnZLgCjXrgAGfYjU9mB2B0Rvt7sDorfbAzbtOwAMAuR5D0cA9b+pF+BZRAOkdBzg8wnCBMBDwASUbzX1EQyZgv8CsKcgj8DZAej9EiDmuLJaYhOn7VKO+ya/DWizuLIQAf0zAROAnXE7GSBOADEPrgZwvE2iMzYAAAAASUVORK5CYII=";
      tq_sw_after_pouring_rain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA1ElEQVRYw+2XMQ6DMAxFvRVxWrasHr1xhc4+YccGEimgOslA7SDhL4uF4T/lxUgA0ZrnUxvSDOSK1qwF8v8DuUJuSWkczvWBUi0fPsJEvSO6MrBX194ixEz2ClL29gRgrWC7nCUDFMApdgryYp7yCovZFkjtMQuZKDhcutKeAQwUSO3hAKCroNJeALQVoNwezBSg3G6nAOV2YwVx30MNQF9BKmoAaG9BB0BbQRdA/0PkClzB3RUo/5iMBuCYeXu8+Scz6+feAOwADvAsAH4yADvAwHwBk0EBGBu+j74AAAAASUVORK5CYII=";

      tq_w : dynamic_graphic {( point_funny_mountain ? "tq_w_after_funny_mountain" : "tq_w_before_money_fountain" )} ;
      tq_w_before_money_fountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABQElEQVRYw+2WTQ6EIAyFu+f+l5jNdN+EC5F4gNnMGKNofxAEjJkElkbK5+P1WXg9vGAADIABMADMp9/7VhHA+0aAzwD4F4DpnjUAmgACUv4Ecr4fgCiGAD6HFABcNwBRLDgkUVwjza+g7wUgigVE4h9sIJFz5E8u4xLAodhyHIETAAppIoR1j30Z1wBisRUAxZVrpIlman9yGdcAYrGE4BrpcGzUjzm1xQPacoYHduGjfmxbSxcYTae7YLfeph+nrMuBZLhEJCOjNv24U6uSMBcuthTbLu7UKoBcuGgzLJKtunGnVgGIPLACmAcCk6zFAypckv8EHghcsvou0OGSbD4eCFyy+hxIeMAIYMEkJWudB+RfUQewuBUhWftAwnPACGDhy5O26TGSGR4on0q6zIRG6hTPZV0AimbDMZYXA/wAWFjFQbCRejAAAAAASUVORK5CYII=";
      tq_w_after_funny_mountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABkUlEQVRYw+2VsXKDMAyGPfqxPQoPdDVv4MuTMZU1U2ls6kbC0p2N1WaJBi5wf+DzJwvM51jt+/41eAsz9vftgbC/FiERjGow4xJGNZhxCaMahhDWjwMBXocAkAnuMP8jwkYkAGQNACCH1BFI2+FZsxjSRtjw7l8RAkghdQSy+zEB1tA7Iqb7NcBKQBq6X5hdCGkA7jMnAWkgIW2ENQ1AWW+WMC3puASkgYTUEch6889pSscQkAZuRNQQVtz24wRbgDqkjkDaDnXNVagR4dZa8fkwcoIv01BjtSOgZ/kbR/C4TEPaCPGn57n9ZbHTkiuUhZOQOkLZ+XkILI/gScgrI0TAC3TF9oFQzhwJgTLCqe1EQzhf7dsNpnscftdblWNGRA+hepxlECwzImoIETV+kTS4KgSKCFDf3QoSSMirIUQ8gkFovGNCoIZARlDqvOVCXgmB/SCcNbAz0qTBXBkHToMF6buhgBAFBNcgoUWDuSyBLtxKIa+AEEUE1yChQYO5LgEv3cohr/WZ+sN6I7wRSn0DBQfyymiAZ7AAAAAASUVORK5CYII=";

      tq_nw : dynamic_graphic {( point_grim_tune ? "tq_nw_after_grim_tune" : "tq_nw_before_trim_goon" )} 
      tq_nw_before_trim_goon : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABWElEQVRYw9XYMW7DMAwAQG4dNBj9Qld/LhsHD32Hp3yB8KKBn9JmZFIpKZaUtEEBGSARwgYyhSdKTGjD10Dwi9gGvgvOAYjZWQIclVsZMNf8LqWnJlAH0P0yAjhZO4DUgewAECPoA1r+KUqEJti0AL4Acv4ksAEQxSAEuZ2zAeTs2WAEiDV0AdIE38sd8JmvCmBNAPUAZwCYprYFIZgBwqQPkDMY9wMA8ADYlAD7XrqwboEzAHAPYAtA6oLbul77NtQAzD1glbAE3BLg2gFYE5AOQalAYBsAHWfAGQGOPugKoAHgBjgmojPPJiMAEkCZgcpMyNoAGYVrVpmK61OSUwNwHYOpO4GgU4E8kxP+BmCpihZA/o8RMfVByB/YI7AiwKNklLwfiJcEWBgXzQrk5T/F4A/BKMA/51+0AK3l/1j+QBucAFTDqdc07w3wj9uvApj/A/C7AX4Ap0wt9uYREV0AAAAASUVORK5CYII=";
      tq_nw_after_grim_tune : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA4UlEQVRYw+3UMQ7CMAwFUOOFlZ4Ay0sGbtelZ+EarDkEV2FlMmmngpQmtah+EfHc1k/J/yV1TMzMzfEtagDHO5ccIDbAvwCy+z0pbIAKAIMBTAIFMHUfgnwJPDUoAqQ7GwMBIp3dkQA9nMwe+wIs7HeksJwBsytjAU+DApSMhJCA8RHhugxuAhDityNYBMTvA2gahQGE0wlU/wY2AhASQCOAa0vgSGERoGAAT4DQwwAy9uA4DDBAmpDWh8oMrk9hJUB7IEB1fgMQgM5CiAGo7gdQ2L+6Bg3wc4BSBlenEA54AT/8ZRfOt2AhAAAAAElFTkSuQmCC";

      ## fate hills

      stealing_hill : dynamic_graphic {( point_healing_still ? "stealing_hill_after" : "stealing_hill_before" )} ;
      stealing_hill_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAjklEQVRYw+3Ryw2AMAyDYc+SAdh/HgboDAghXiUxl1q9uDf0legnoE0+cIADHOAABzjAAe/H2M9SXx/v+DAZoXBkXkyQOFKP4O8PdOSeTBD5FbB2F/otqhxF4OcjVM4C4mfAEAfx5xpljuIPdRN0DhZ4b1Hn4B5N7eB+7FDpID/oHCB1xOTjAAc4wAEO2AC0LOen6hBz4QAAAABJRU5ErkJggg==";
      stealing_hill_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtElEQVRYw+2TOw7EMAhE5yx0NHvYdFwvB8gZVtkiCgScxqOsFJAb69mj5w/YHi60QAu0QAu0QAu0gJ/KXp96+XyOCx5EMDgyXiRQOFIuMt4/kSPnSQKJHwJrWBBvkcXhBNXKQ7C4FzBdqgQWhxNcxIprpHGcX0h/I0vgcYQvqvln5XGEFskDiByhRTVrFiZHaFFLAqgcfu7b5FrzeRCw8X4CDwI3ByBwyMP1bzfQT9ACLxT4AnDS/G/6PRvaAAAAAElFTkSuQmCC";
   }
}
