## warning about this code: even the variable names contain spoilers!
## so you may want to play through the game first.

## I have attempted to define things in the following order based on initial location: as you find them, until the plain base, then west hub clockwise from north, then east hub clockwise from north, then hill, then endgame.

start_at = nameless_lameness
start_theme = my_theme

game_settings {
   enable_standard_all_behaviour = false
   rewind_enabled   = true
   rollback_enabled = true
}

game_information {
   game_name                    = Quirky Test
   game_version                 = 2.0.0
   game_shortname               = QT
   written_by                   = Andrew Schultz
   uuid                         = b58b6418-313b-465a-a17b-75782c893568
   year_of_release              = 2025
   year_of_original             = 2025
   copyright_message            = Free for distribution but donations welcome
   short_synopsis               = Wordplay game with tutorial for TALP/TALJ 2025.
}

## we start with simplest defined then move to more complex

booleans {
   ## testing and auxiliary booleans
   in_debug : boolean "false" ;
   cheat_dont_require : boolean "false" ;
   tempbool : boolean "false" ;

   ## meta-command/parser-warning booleans
   apostrophe_warn : boolean "false" scope="survivor" ;
   say_warn : boolean "false" scope="survivor" ;
   credits_to_thanks_note : boolean "false" scope="survivor" ;

   ## done once in-game booleans (non-critical, or duplicate)
   xme_twice : boolean "false" ;
   ever_about : boolean "false" ; # this is equivalent tutorial_1_about_done, but it's a bit clearer for certain parts of the code.
   entered_seth_dentons : boolean "false" ;
   know_lush_shout : boolean "false" ;
   thor_explained_seth : boolean "false" ;
   summoned_teary_chimes : boolean "false"; # this is equivalent to point_see_glimmering, but this also makes code where we manipulate the chimes more readable.
   have_asked_three : boolean "false" scope="survivor" ;
   have_asked_four : boolean "false" scope="survivor" ;
   initial_book_poke : boolean "false" scope="survivor" ;
   got_footnote_17 : boolean "false" scope="survivor" ;
   noticed_beer : boolean "false" ;
   inventory_incorporeal : boolean "false" ;
   thor_warn_close : boolean "false" ;
   ask_thor_misfire : boolean "false" ;
   score_bonus_nag : boolean "false" ;
   bonus_max_warn : boolean "false" scope="survivor" ;
   said_bore_outside_base : boolean "false" ;
   thor_knows_bore : boolean "false" ;
   wait_note : boolean "false" ;
   meta_abbrev_noted : boolean "false" ;
   note_homonym : boolean "false" scope="survivor" ;
   anagram_nag : boolean "false" scope="survivor" ;
   know_tad : boolean "false" scope="survivor" ;
   chimes_in_my_house : boolean "false" scope="survivor" ;
   asterisk_help_note : boolean "false" scope="survivor" ;
   half_bonus : boolean "false" scope="survivor" ;
   bonus_half_note : boolean "false" scope="survivor" ;
   warn_must_redo : boolean "false" scope="survivor" ;
   inv_plus_warn : boolean "false" scope="survivor" ;
   note_book_reshuffle : boolean "false" scope="survivor" ;
   out_argument_note : boolean "false" scope="survivor" ;
   bonus_obfuscated_note_yet : boolean "false" scope="survivor" ;

   ## text coloring notes
   ever_bonus : boolean "false" scope="survivor" ;
   ever_footnote : boolean "false" scope="survivor" ;
   ever_achievement : boolean "false" scope="survivor" ;
   bf_color_note : boolean "false" scope="survivor" ;
   bfa_color_note : boolean "false" scope="survivor" ;

   ## game option booleans
   score_notify : boolean "true" scope="survivor" ;
   use_color_coding : boolean "true" scope="survivor" ;
   option_start_warp : boolean "false" scope="survivor" ;

   ## game progress booleans
   tutorial_done : boolean "false" ;
   talked_to_thor : boolean "false" ;
   return_to_base_checked : boolean "false" ;
   hill_aware_you_stole : boolean "false" ;
   noted_diagonal_direction : boolean "false" scope="survivor" ;
   note_nonreciprocal : boolean "false" scope="survivor" ;
   note_dependent_point : boolean "false" scope="survivor" ;
   note_independent_point : boolean "false" scope="survivor" ;
   footnote_nag : boolean "false" scope="survivor" ;

   ## footnote check booleans
   have_won : boolean "false" scope="survivor" ;
   ever_reveal_footnote : boolean "false" scope="survivor" ;
   ever_note_footnote : boolean "false" scope="survivor" ;
   history_footnote_found : boolean "false" scope="survivor" ; # I could look up footnote #8 (which will probably remain static)
   reveal_this_footnote : boolean "false" ; # this is the only footnote variable that might change

   ## verb usage notifications (only need noting once if you replay)
   drop_referenced : boolean "false" scope="survivor" ;
   jump_commands_notified : boolean "false" scope="survivor" ;
   think_noted : boolean "false" scope="survivor" ;
   listen_no_subject_note : boolean "false" scope="survivor" ;
   take_note : boolean "false" scope="survivor" ;

   ## regular point tally booleans
   ## some of these are never referred to, or they are fundamentally the same as other game states, but I put them here to make sure the point totals add up
   point_go_west : boolean "false" ;

   point_first_base : boolean "false" ;
   point_bro_poor : boolean "false" ;
   point_player_rights : boolean "false" ;

   ## west tile (hub) goals, north then clockwise
   point_master_plan : boolean "false" ;
   point_chalice_map : boolean "false" ;
   point_fell_short : boolean "false" ;
   point_take_crackers : boolean "false" ;
   point_shift_goals : boolean "false" ;
   point_hunters_grill : boolean "false" ;
   point_fellow_yield : boolean "false" ;

   ## TQ goals, north then clockwise
   point_fly_score : boolean "false" ;
   point_bending_truth : boolean "false" ;
   point_boring_way: boolean "false" ;
   point_dirt_home : boolean "false" ;
   point_pouring_rain : boolean "false" ;
   point_funny_mountain : boolean "false" ;
   point_grim_tune : boolean "false" ;

   ## endgame points
   point_healing_still : boolean "false" ;
   point_gravel_trail : boolean "false" ;

   point_missing_house : boolean "false" ;
   point_see_glimmering : boolean "false" ;
   point_hi_mouse : boolean "false" ;

   ## bonus point tally booleans
   ## any time points first
   bonus_point_turkey_quest : boolean "false" scope="survivor" ;

   ## first base
   bonus_point_shush_lout : boolean "false" scope="survivor" ;
   bonus_point_rare_plights : boolean "false" scope="survivor" ;

   ## bane place
   bonus_point_bane_place : boolean "false" scope="survivor" ;
   bonus_point_theory_bore : boolean "false" scope="survivor" ;
   bonus_point_death_sentence : boolean "false" scope="survivor" ;

   ## the hubs
   bonus_point_test_wiles : boolean "false" scope="survivor" ;
   bonus_point_beast_ranch : boolean "false" scope="survivor" ;
   bonus_point_rig_boons : boolean "false" scope="survivor" ;

   ## objects beyond the hubs
   bonus_point_racing_passions : boolean "false" scope="survivor" ; ## w e
   bonus_point_so_long : boolean "false" scope="survivor" ; ## e n
   bonus_point_vast_fission : boolean "false" scope="survivor" ; ## e ne
   bonus_point_cease_purging : boolean "false" scope="survivor" ; ## e e
   bonus_point_sane_role : boolean "false" scope="survivor" ; ## e sw
   bonus_point_grow_need : boolean "false" scope="survivor" ; # e w

   ## endgame bonus points
   bonus_point_eye_stay : boolean "false" scope="survivor" ;
   bonus_point_cheery_times : boolean "false" scope="survivor" ;

   ## jump/walk achievement booleans
   jump_buzzing : boolean "false" ;
   ever_jump : boolean "false" ;

   ## "think" booleans: hub goals are alphabetical so it is not spoiled in-game
   think_chalice_map : boolean "false" ;
   think_fellow_yield : boolean "false" ;
   think_grim_tune : boolean "false" ;
   think_healing_still : boolean "false" ;
   think_hunters_grill : boolean "false" ;
   think_master_plan : boolean "false" ;
   think_shift_goals : boolean "false" ;
   think_hi_mouse : boolean "false" ; ## put endgame at end
   already_got_command : boolean "false" ; ## not for any one command, but if you guess 1 of 2 after guessing 2 of 2, there you go

   ## "retry" booleans for THINK: if you got something after losing it
   retry_rare_plights : boolean "false" scope="survivor" ;
   retry_so_long : boolean "false" scope="survivor" ;
   retry_vast_fission : boolean "false" scope="survivor" ;
   retry_cease_purging : boolean "false" scope="survivor" ;
   retry_sane_role : boolean "false" scope="survivor" ;
   retry_grow_need : boolean "false" scope="survivor" ;
   retry_racing_passions : boolean "false" scope="survivor" ;

   ## achievement booleans
   ## reds
   achieve_haih : boolean "false" scope="survivor" ;
   achieve_haih_pre : boolean "false" scope="survivor" ;
   achieve_mttm : boolean "false" scope="survivor" ;
   achieve_tyyt : boolean "false" scope="survivor" ;

   ## oranges
   achieve_tnnt : boolean "false" scope="survivor" ;
   achieve_cddc2 : boolean "false" scope="survivor" ;
   achieve_pcpccp : boolean "false" scope="survivor" ;
   achieve_pcpccp_pre : boolean "false" scope="survivor" ;
   pcpc_tile : boolean "false" scope="survivor" ;
   pcpc_pile : boolean "false" scope="survivor" ;
   achieve_roer : boolean "false" scope="survivor" ;
   ach_roer_west : boolean "false" scope="survivor" ;
   ach_roer_east : boolean "false" scope="survivor" ;
   ach_roer_base : boolean "false" scope="survivor" ;
   achieve_cnnc : boolean "false" scope="survivor" ;

   ## yellows
   achieve_qwwq : boolean "false" scope="survivor" ;
   achieve_kssn : boolean "false" scope="survivor" ;

   ## greens
   achieve_ssss : boolean "false" scope="survivor" ;
   achieve_ssss_pre : boolean "false" scope="survivor" ;
   achieve_gssg : boolean "false" scope="survivor" ;
   achieve_rssr : boolean "false" scope="survivor" ;
   achieve_srrs : boolean "false" scope="survivor" ;

   ## blues
   achieve_cjjc : boolean "false" scope="survivor" ;
   achieve_cjjc_pre : boolean "false" scope="survivor" ;
   achieve_tmmt : boolean "false" scope="survivor" ;
   achieve_tmmt_pre : boolean "false" scope="survivor" ;
   achieve_dbbd : boolean "false" scope="survivor" ;
   achieve_cddc : boolean "false" scope="survivor" ;
   achieve_cddc_pre : boolean "false" scope="survivor" ;

   ## purples
   achieve_hbbh : boolean "false" scope="survivor" ;
   achieve_hbbh_pre : boolean "false" scope="survivor" ;
   achieve_nbbn : boolean "false" scope="survivor" ;
   achieve_nbbn_pre : boolean "false" scope="survivor" ;

   ## final one
   achieve_taat : boolean "false" scope="survivor" ;

   ## tutorial booleans, organized by order you see/do them in
   in_number_choice: boolean "true" ;
   in_tutorial: boolean "false" ;
   tutorial_1_about_done : boolean "false" ;
   tutorial_2_verbs_done : boolean "false" ;
   tutorial_3_additional_metaverb_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;
   tutorial_4_x_me_done : boolean "false" ;
   tutorial_inventory_cued : boolean "false" ;
   tutorial_5_inventory_done : boolean "false" ;
   tutorial_6_x_ask_done : boolean "false" ;
   tutorial_7_listen_done : boolean "false" ;
   tutorial_8_talk_voice_done : boolean "false" ;
   tutorial_9_go_west : boolean "false" ;
   tutorial_10_first_base : boolean "false" ;
   meta_tutorial_note_1 : boolean "false" ;
   meta_tutorial_note_2 : boolean "false" ;
   temporary_ring_question_blocked : boolean "false" ;
   ever_tutorial : boolean "false" scope="survivor" ;
   post_tutorial_long_notes : boolean "false" scope="survivor" ;
   tutorial_redo_note : boolean "false" scope="survivor" ;

   ## parser shortcut booleans
   look_warn: boolean "false" scope="survivor" ;
   examine_warn: boolean "false" scope="survivor" ;
   inventory_warn : boolean "false" scope="survivor" ;
   long_word_warn : boolean "false" scope="survivor" ;

   ## dynamic booleans
   can_enter_trail : dynamic_boolean {( point_gravel_trail || has_visited("my_house") )} ; # for debugging purposes since I GOTO MY_HOUSE a lot

   think_available : dynamic_boolean {( think_chalice_map || think_fellow_yield || think_grim_tune || think_healing_still || think_hunters_grill || think_master_plan || think_shift_goals || think_hi_mouse )} ;
   retry_available : dynamic_boolean {( retry_rare_plights || retry_so_long || retry_vast_fission || retry_cease_purging || retry_sane_role || retry_grow_need || retry_racing_passions )} ;

   ## inventory/bonus point stuff
   inv_so_long : dynamic_boolean {( is_carried "low_song" && bonus_point_so_long )} ;
   inv_vast_fission : dynamic_boolean {( is_carried "fast_vision" && bonus_point_vast_fission )} ;
   inv_sane_role : dynamic_boolean {( is_carried "rain_soul" && bonus_point_sane_role )} ;
   inv_grow_need : dynamic_boolean {( is_carried "no_greed" && bonus_point_grow_need )} ;
   inv_cease_purging : dynamic_boolean {( is_carried "peace_surging" && bonus_point_cease_purging )} ;
   inv_racing_passions : dynamic_boolean {( is_carried "pacing_rations" && bonus_point_racing_passions )} ;
   inv_any_bonuses : dynamic_boolean {( inv_so_long || inv_vast_fission || inv_sane_role || inv_grow_need || inv_cease_purging || inv_racing_passions )} ;

}

# end booleans

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "10";
   score : integer "0" ;
   max_score : integer "23" ;
   points_left_side : integer "0" ;
   points_right_side : integer "0" ;
   bonus_score : integer "0" scope="survivor" ;
   bonus_score_start : integer "0" scope="survivor" ;
   max_bonus_score : integer "17" ;
   confidence_meter : integer "0" ; ## yellow field, trim goon => malice chap
   tempint : integer "0" ;
   tempint2 : integer "0" ;
   hub_think_needed : integer "0" ;
   rule_chosen : integer "0" ;
   latest_warp_number : integer "-3" ; ## there are magic numbers here. -3 means not aware/done. -2 means there was no warp this turn. -1 means there was a warp try that faile and thus gets rejected.
   books_read : integer "0" ;

   # achievements
   rssr_west : integer "0" ;
   rssr_east : integer "0" ;
   rssr_base : integer "0" ;
   rssr_hill : integer "0" ;

   #cheat leap / leet cheap flags
   cheat_leap_level : integer "1" scope="survivor" ;
   last_cheat_leap_level : integer "1" scope="survivor" ;

   ## since Adventuron doesn't allow survivor scope for lists, I need to define the status variables here.
   footnote_1_status : integer "0" scope="survivor" ;
   footnote_2_status : integer "0" scope="survivor" ;
   footnote_3_status : integer "0" scope="survivor" ;
   footnote_4_status : integer "0" scope="survivor" ;
   footnote_5_status : integer "0" scope="survivor" ;
   footnote_6_status : integer "0" scope="survivor" ;
   footnote_7_status : integer "0" scope="survivor" ;
   footnote_8_status : integer "0" scope="survivor" ;
   footnote_9_status : integer "0" scope="survivor" ;
   footnote_10_status : integer "0" scope="survivor" ;
   footnote_11_status : integer "0" scope="survivor" ;
   footnote_12_status : integer "0" scope="survivor" ;
   footnote_13_status : integer "0" scope="survivor" ;
   footnote_14_status : integer "0" scope="survivor" ;
   footnote_15_status : integer "0" scope="survivor" ;
   footnote_16_status : integer "0" scope="survivor" ;
   footnote_17_status : integer "0" scope="survivor" ;

   # TALK TO code rearrangements so survivors aren't too bad (using bitwise arithmetic and some magic numbers)
   found_talkflag : integer "0" scope="survivor" ;
   found_talktotal : integer "0" scope="survivor" ;
   max_talktotal : integer "11" scope="survivor" ;
   current_talkflag : dynamic_integer {(get_stat { target = "current_location" stat = "stat_talkflag" })}
}

collections {
   tutorial_stuff : list {
      items = [
         "Meta-commands such as {vm_about}, {vm_credits} and {vm_verbs} give you general information that would break up the flow of an introduction.",
         "{v_x_me} is a good in-world starter command to tell you about yourself.",
         "Shorthand such as {vd_i} to take inventory and <X<#0f0>> to <EXAMINE<#0f0>> help simplify what you need to type.",
         "Senses can provide clues. In this case, {qt} uses {v_listen_hear}, which implies {v_talk}. Also, many parsers may eliminate prepositions for convenience, so {v_t0} is worth a try",
         "You can often try going any direction (up, down, in, out, or the eight compass directions) if the room description is unclear. Also, shorthand such as <W<#0f0>> works in place of <GO WEST<#0f0>>",
         "{qt}'s point-scoring commands are unusual for a parser game, where guess-the-verb is frowned on. However, the commands are all similar to objects or people you run across."
      ]
   }
   talk_done : set {} ;
   talk_need : set {
      items = [
         "first_base",
         "plain_base",
         "hub_w_n",
         "hub_w_ne",
         "hub_w_s",
         "hub_w_w",
         "hub_w_nw",
         "hub_e_ne",
         "hub_e_e",
         "hub_e_w",
         "hub_e_nw"
      ]
   };
   ask_list : list {
      items = [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
   };
   footnote_finding_list : list {
      items = [
         "<X ME two times<#f00>>",
         "<GO WEST for the first point<#f00>>",
         "<Try going east from Burst Face<#f00>>",
         "<Examine the Pro Boor<#f00>>",
         "<First description for Plain Base<#f80>>",
         "<Visit either hub<#ff0>>",
         "<Get to Stealing Hill<#ff0>>",
         "<XYZZY<#ff0>>",
         "<Return to Thor after visiting Stealing Hill<#ff0>>",
         "<Get to Sky Floor<#0f0>>",
         "<Examine the trending booth<#0f0>>",
         "<Get to Warring Bay<#0f0>>",
         "Examine the <pouring rain/roaring pain<#0f0>> or <plaster man/master plan<#00f>>",
         "<Examine the Malice Chap<#00f>>",
         "<Examine the crackers<#00f>>",
         "<Examine the Hissing Mouse<#f0f>>",
         "<Examine the bookshelf<#f0f>>"
      ]
   }
   footnote_hinting_list : list {
      items = [
         "<Try something again<#f00>>",
         "<Found during core walkthrough<#f00>>",
         "<Looking back, sort of<#f00>>",
         "<Examine someone<#f00>>",
         "<Found during core walkthrough<#f80>>",
         "<Found during core walkthrough<#ff0>>",
         "<Found during core walkthrough<#ff0>>",
         "<Magic word<#ff0>>",
         "<Found during core walkthrough<#ff0>>",
         "<Found during core walkthrough<#0f0>>",
         "<Examine something<#0f0>>",
         "<Found during core walkthrough<#0f0>>",
         "Examine <either of<#0f0>> <two things<#00f>>",
         "<Examine someone<#00f>>",
         "<Examine something<#00f>>",
         "<Examine something<#f0f>>"
         "<Examine something<#f0f>>",
      ]
   }
   footnote_status_list : list {
      items = [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
   };
   footnote_text_list : list {
      items = [
      "AFGNCAAP is a self-depreciating joke from Zork: Grand Inquisitor, meaning Ageless, Faceless, Gender Neutral, Culturally Ambiguous Adventure Person, to describe you. This was who you were throughout the Zork series.\n\"As good-looking as ever\" is the default response in Inform for {v_x_me}. It's an inside joke among experienced players and programmers that anyone who leaves this in is a bit of a novice, and the rest of the game may be underimplemented.\nIt's a joke I like a lot, because I throw in a lot of AFGNCAAPs and also procrastinate implementing item descriptions. I've never really felt qualified to put forth a protagonist with a strong culture or heritage. Some people interpret this as solipsism. But I think it helps to focus on the puzzles.",
      "I wanted the initial bit to be an escape-the-room, but I didn't want the verb to be too hard. I was drawing a blank until I thought of Hulk Handsome's game, Go West, which ... well, the title is a bit of a spoiler. Nah, I thought, I couldn't just copy that, and the Village People, and the Pet Shop Boys.\n\nBut I never thought of anything better, and besides, it made me laugh a bit. Also, Adventuron allowed for different sorts of syntax, so you can just type <W<#f80>>. I do enjoy getting and giving keyboard shortcuts.\nAlso, I encourage you to play his game, <In a Manor of Speaking<#f80>>. The link is <here<#f80>>[http://hulkhandsome.itch.io/in-a-manor-of-speaking].",
      "It's fun to reward the player for looking into things or even trying to break the game a bit. Here, though, and in the hub, I wanted to restrict movement to places you were done with, so you'd have less \"opportunity\" to wander down a long dead end. That sort of thing is fun for a bit, until it really, really isn't.",
      "The Pro Boor was a late addition. I didn't really have an antagonist, and the original puzzle to get through was FIRST BASE then HOLD BUB, which Thor said. This was simple but artificial. But sometimes writing out a placeholder puzzle is the only thing to get you started on something more effective. Or less ineffective. HOLD BUB was originally there because you had to reach the Bold Hub, which I split in two after creating, but it felt like it violated the Players' Bill of Rights for making a player do something just to do something. The Bold Hub eventually became Plain Base.\nThe Pro Boor was also originally named the Teen Clown, but I just couldn't quite offer an excuse for why you would wind up in a town or want to leave it. Perhaps this spoonerism pair would've made a good book name in the bookshelf at the end.",
      "I'm proud of Seth Denton's, since the name itself doesn't quite make a spoonerism without the apostrophe, and it doesn't seem particularly ominous.\nOther names that need an apostrophe for a proper spoonerism include Sean Kent's conscience (if you don't pronounce it PRECISELY) and Fran Blake's bran flakes. Well, you can have one bran flake, but many of them as cereal would be more common.\nHearty Pat's came to mind as a store, too. But that's not a proper name.\nI also had ideas for hostile NPCs including Tad Beecher, Quinn Wick and Trav Hubble, but there was enough to program.",
      "I originally based the hub names on the ease of finding spoonerisms. Then I changed the hub names to signs in Plain Base. You may've noticed that everything in West Tiles (formerly Quickie Trips) requires just switching leading letters, while East Branch (formerly Tricky Quips) requires both switching leading letters and changing letters after.\nAfter designing everything to decide which puzzles depended on which others, I also realized that five of West Tiles's puzzles depended on other puzzles, while only one of East Branch did. But I didn't want to uproot a whole game plan just to bring different puzzles together. So I left the quickie trips to be tricky quips in their own way and vice versa. Which actually worked out okay because East Branch has more bonus points (meant to be hard) than West Tiles.\nAlso, recycling the names as signs helped fill the whole graphic for Plain Base.",
      "Originally this was called Fate Hill, which works semantically but isn't believable as part of the story. It lampshaded that this was an important place to be, but I think the location and new name do this. The hill, of course, gets hateful anyway.",
      "XYZZY is a sort of in-joke for parser players and programmers. Some love it and some hate it. It, along with other commands like PLUGH, YOHO and PLOVER, summoned a hollow voice saying \"FOOL!\" in the original Adventure.\nI didn't want it just to be inside knowledge, though, so I put the runes in as a puzzle.",
      "I wanted to show the reader some non-reciprocal directions but not have them there just because. The original hub maps were west and east of Thor, and the passage back was south. The hill always had non-reciprocal directions, and it was simpler just to have the side-hubs' exits mirror each other instead of being identical.",
      "This was originally the scaring floor, with a flaring score. But it was one of those ideas that felt intermediary. I put my spoonerism finder through both FL/SC and FL/SK flips. Sky floor seems more poetic, and I was worried about the answer being slang, but it really was a short enough word I figured people could guess it even if frustrated.",
      "I was sort of inspired by a combination of Lucy's psychiatrist office and Steven Crowder's disingenuous \"Prove Me Wrong\" table when thinking of this. I have a special, uh, spot in my heart for people who will get up in your business and explain you're very lucky they dropped into your life.",
      "I'm not allergic to excitement, but I don't particularly like being around people who tell my my life needs to be more exciting, and they can help with that. Taking this point to the extreme, there are people who prefer \"exciting\" conflict to \"boring\" peace.\nI try to slip this sort of thing into a lot of what I write, but maybe it is too subtle. Or too obscure.",
      "While I wanted to avoid too-common spoonerisms in {qt}, plaster man/master plan and roaring pain/pouring rain seemed to fit in nicely. So I kept them.",
      "Um, okay, yeah. The Malice Chap, Trim Goon and guy in Yellow Field are ... similar. I think that's what got me the idea to have the puzzles act as a pyramid, with eight needing no prerequisites, four needing stuff from the eight, two needing stuff from the four, and the final one needing the two.",
      "<TAKE CRACKERS<#f80>> is one of my favorite points and drawings in the whole game. Points, because it uses a standard verb. Drawings, because I performed strenuous research on different-shaped crackers. Google Images, you so cool.",
      "Sorry not sorry for the gray mouse spoonerism. I actually didn't see it until I was looking for excuses to add footnotes. I wish I had found more of this sort of thing. I think one reason I backloaded them (the key, the trunk) is because I'd gotten to the end and hadn't had the chance to fire off nonsequiturs like that. (Achievement names don't count.)\nMaybe I'll look through my notes to find a bit more. Maintenance releases/post-comp releases aren't just for bug fixes!",
      "I enjoy seeing and implementing random stuff you can just sift through if you want, pushing the up-arrow to repeat a command for random text. Often when I write games I have ideas that would seem forced as part of the solution, but they are too good not to share somehow. I've used books before and probably will again.\nOne of the first things that made me say \"wow\" about Inform 7 was the <one of/or/in random order<#ff0>> construction. Adventuron has it, too, and it's as easy and intuitive, but with more formal code."
      ]
   };
   spoonerism_examples : list {
      items = [
         "<cattle bruisers/battle cruisers<#f80>> (simple)",
         "<crushing blow/blushing crow<#f80>> (flipping first two letters)",
         "<kissing malls/missing calls<#f80>> (flipping sound, slightly different spelling) ",
         "<warm fish/form wish<#f80>> (flipping first letters, slightly different spelling --note half-formed wish may work better for humor value)",
         "<cat flap/flat cap<#f80>> (flipping the sound, 1 letter/2 letters)",
         "<sold treats/old streets<#f80>> (moving the first letter over)",
         "<keen flow/clean foe<#f80>> (switching the second letter, also with slightly different spelling)",
         "<queer old dean/dear old queen<#f80>> (buffer word inside)"
      ]
   };
   bonus_found_text : list {
      items = [
         "TURKEY QUEST (any time)",
         "<SHUSH LOUT<#f00>> (on <LISTEN<#0f0>>ing to the {cc_pro_boor})",
         "<RARE PLIGHTS<#f00>> once you have {cc_prayer_lights}",
         "<BANE PLACE<#f80>> in Plain Base",
         "<THEORY BORE<#f80>> once you've met Thor",
         "<DEATH SENTENCE<#f80>> in Plain Base, around Seth Denton's",
         "<TEST WILES<#ff0>> in West Tiles",
         "<BEAST RANCH<#ff0>> in East Branch",
         "<RIG BOONS<#ff0>> in either hub",
         "<SO LONG<#0f0>> when you have the low song",
         "<VAST FISSION<#0f0>> (or fishin/fishing) when you have the fast vision",
         "<CEASE PURGING<#0f0>> when you feel peace surging",
         "<SANE ROLE<#0f0>> when you have a rain soul",
         "<GROW NEED<#0f0>> when you have no greed",
         "<RACING PASSIONS<#00f>> when you have the pacing rations",
         "<I/EYE STAY<#f0f>> in My House",
         "<CHEERY TIMES<#f0f>> after hearing the teary chimes"
      ]
   };
   bonus_not_found_text : list {
      items = [
         "(unfound yet)",
         "<(unfound yet)<#f00>>",
         "<(unfound yet)<#f00>>",
         "<(unfound yet)<#f80>>",
         "<(unfound yet)<#f80>>",
         "<(unfound yet)<#f80>>",
         "<(unfound yet)<#ff0>>",
         "<(unfound yet)<#ff0>>",
         "<(unfound yet)<#ff0>>",
         "<(unfound yet)<#0f0>>",
         "<(unfound yet)<#0f0>>",
         "<(unfound yet)<#0f0>>",
         "<(unfound yet)<#0f0>>",
         "<(unfound yet)<#0f0>>",
         "<(unfound yet)<#00f>>",
         "<(unfound yet)<#f0f>>",
         "<(unfound yet)<#f0f>>"
      ]
   };
   bonus_status : list {
      items = [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
   };
   jump_list : list {
      items = [
         1,
         0,
         0,
         0,
         0,
         1,
         0,
         0,
         0,
         0,
         1,
         0,
         0,
         0,
         0,
         1
      ]
   };
   jump_order_list : set {
      items = [
      ]
   };
   jump_set : set {
   };
   temp_list : list;
}

## strings

strings {

   # for options code
   tempopt : string "blank option" ;

   ## important conditional text stubs
   exitserr : dynamic_string {( is_beside "cheering_voice" ? "No, that's not the way out. Trial and error might get it. Or figuring what the voice really means." :
      (tutorial_6_x_ask_done && is_at "nameless_lameness") ? "You don't want to wander off without any direction, but maybe that voice could offer a clue." :
      (is_at "nameless_lameness") ? "In this nameless lameness, any move without figuring where to go could get you even more lost. You need some clue, first." :
      (is_at "burst_face") ? "Visibility's still quite poor here. You sense there's another puzzle to solve before moving on." :
      (is_beside "pro_boor") ? "You'll have to deal with the {cc_pro_boor} before going anywhere." :
      (is_at "first_base") ? "{first_base_cantgo}" :
      (is_at "plain_base") ? "{plain_base_cantgo}" :
      (is_at "west_tiles" || is_at "east_branch") ? "You can go pretty much any planar direction here, just not that way." :
      (is_at "stealing_hill") ? "You can only leave east or west." :
      (is_at "gravel_trail") ? "The passage here is north-south." :
      (is_at "my_house") ? "You can only really go south, but there's no need, since you can just wrap things up here." :
      "This is a dead end, at least for {qt}'s purposes, so you can really only backtrack {spoke_out_dir} to {back_to_hub}, though {v_out} always works, too." )} ;
   bflist : dynamic_string {( "Here is a list of all the " + ( verb_is "footnotes" ? "footnotes" : "bonus points") + ", in approximate order you might find them. The color-coding further lumps them by general area." )} ;
   yn_or_12 : dynamic_string {( in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}
   my_score : dynamic_string {( in_tutorial ? "Tutorial progress: {tutorial_score}/{max_tutorial_score}" : "{score}/{max_score}" )} ;
   unknown_begin_note : dynamic_string {( have_won || (has_visited("west_tiles") && has_visited("east_branch")) ? "" : ", though special commands are cued in puzzles throughout {qt}" )} ;
   custom_unknown_verb_error : string "Nothing comes from that. {vm_verbs} gives a list of basic standard verbs{unknown_begin_note}." ;

   # diagnostic and meta verb abbreviations
   vd_bon : string "<BONUS<#f80>>" ;
   vd_i : string "<I<#f80>>" ;
   vd_i_long : string "<INVENTORY<#f80>>" ;
   vd_sco : string "<SCORE<#f80>>" ;
   vd_thk : string "<THINK<#f80>>" ;

   # 2nd time through diagnostics
   vd_ach : string "<ACHIEVEMENTS<#f80>>" ;
   vd_ac : string "<ACH<#f80>>" ;
   vd_f0 : string "<FOOTNOTE 0<#f80>>" ;
   vd_f : string "<F #<#f80>>" ;
   vd_fn : string "<FOOTNOTE #<#f80>>" ;
   vd_footnote_cue : string "{vd_fn} or, for brevity, {vd_f}" ;

   vm_about : string "<ABOUT<#f80>>" ;
   vm_cred : string "<CREDITS<#f80>>" ;
   vm_links : string "<LINKS<#f80>>" ;
   vm_meta : string "<META<#f80>>" ;
   vm_pts : string "<POINTS<#f80>>" ;
   vm_thx : string "<THANKS<#f80>>" ; # CREDITS is the preferred verb but THANKS maps to credits
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   ## names in credits
   talj : string "<TALJ<#0f0>>" ;
   tx_ca : string "<Chris Ainsley<#0f0>>" ;
   tx_cm : string "<Christopher Merriner<#0f0>>" ;
   tx_ds : string "<Deborah Sherwood<#0f0>>" ;
   tx_gf : string "<Garry Francis<#0f0>>" ;
   tx_ll : string "<Leon Lin<#0f0>>" ;
   tx_wc : string "<Wade Clarke<#0f0>>" ;
   tx_da : string "<DemonApologist<#0f0>>" ;
   tx_on : string "<Olaf Nowacki<#0f0>>" ;

   # yes-or-no
   yn : string "<YES<#f88>>/<Y<#f88>> or <NO<#f88>>/<N<#f88>>" ;
   on : string "<ON<#f88>>" ;
   off : string "<OFF<#f88>>" ;

   # options in blue 00f
   opt_ch : string "<CH<#88f>> or <COLORHINT<#88f>>" ;
   opt_notify : string "<NOTIFY<#88f>>" ;
   opt_tutorial : string "<TUTORIAL<#88f>>" ;
   opt_warp : string "<LEETCHEAP<#88f>> or <CHEATLEEP<#88f>>" ;

   # game title/stuff about me
   qt : string "<Quirky Test<#ff0>>" ;
   qt_repo : string "<Quirky Test's GitHub repository<#8f8>>[https://github.com/andrewschultz/quirky-test]" ;
   qt_io : string "<Quirky Test's game page on itch.io<#8f8>>[https://andrewschultz.itch.io/quirky-test]" ;
   email : string "<blurglecruncheon@gmail.com<#88f>>" ;

   # regular commands in green
   v_ask : string "<ASK<#0f0>>" ;
   v_listen_hear : string "<LISTEN<#0f0>> or <HEAR<#0f0>>" ;
   v_drop : string "<DROP<#0f0>>" ;
   v_o : string "<O<#0f0>>" ;
   v_out : string "<OUT<#0f0>> ({v_o})" ;
   v_rule : string "<RULE<#0f0>>" ;
   v_take : string "<TAKE<#0f0>>" ;
   v_talk : string "<TALK<#0f0>>" ; # tlk2 = tlk + or <T<#0f0>> (?)
   v_t0 : string "<T<#0f0>>" ;
   v_x_me : string "<X ME<#0f0>>" ;

   # warp commands in orange
   w_pb : string "<PB<#f80>>" ;
   w_wt : string "<WT<#f80>>" ;
   w_sh : string "<SH<#f80>>" ;
   w_eb : string "<EB<#f80>>" ;

   # tutorial and hinty stuff in purple
   note_cue_tutorial : string "<TUTORIAL CUE:<#f0f>> " ;
   note_once : string "<ONE-TIME NOTE:<#f0f>> " ;
   note_retry : string "<REMINDER:<#f0f>> you found the bonus point too late last time through, so you may wish to " ;
   note_tutorial : string "<TUTORIAL NOTE:<#f0f>> " ;

   ## inventory
   pip : string " <(+)<#0f0>>" ;

   ## dynamic general strings

   ask_5_notes : dynamic_string {( bonus_point_rare_plights && bonus_point_shush_lout ? "You got both of them" : bonus_point_rare_plights || bonus_point_shush_lout ? "You got one of them" : "You missed them, but you can go back if you want" )}

   # "can't go that way" dynamic sub-strings
   back_to_hub : dynamic_string {( is_at "zone_west_spokes" ? "West Tiles" : "East Branch" )}
   spoke_out_dir : dynamic_string {( is_at "hub_w_n" || is_at "hub_e_n" ? "south" : is_at "hub_w_ne" || is_at "hub_e_ne" ? "southwest" : is_at "hub_w_e" || is_at "hub_e_e" ? "west" : is_at "hub_e_se" ? "northwest" : is_at "hub_w_s" || is_at "hub_e_s" ? "north" : is_at "hub_w_sw" ? "northeast" : is_at "hub_w_w" || is_at "hub_e_w" ? "east" : is_at "hub_w_nw" || is_at "hub_e_nw" ? "southeast" : "(unknown, bug)" )}
   first_base_cantgo : dynamic_string {( point_bro_poor ? "You need to figure what to do with {cc_prayer_lights} before moving on." : "You'll have to deal with the {cc_pro_boor} before going anywhere." )}
   plain_base_cantgo : dynamic_string {( point_gravel_trail ? "The only passages are northeast and northwest, where you think you've done everything, and north." : "The only viable passages (for now) are northeast and northwest." )}

   ## description strings by location

   task_read : dynamic_string {( has_visited "plain_base" ? "\nThe small print is easier to read with more light. It says:\nTHERE ARE TWENTY THREE CORE\nPOINTS TO ACHIEVE IN QUIRKY\nTEST AS WELL AS SEVENTEEN\nBONUS POINTS WHICH YOU FIND\nBY MAKING SPOONERISMS OF ALL\nYOU ENCOUNTER HERE WHETHER\nIT BE A PLACE OR THING OR\nPERSON WITH NO WAY TO LOSE\nSO HAVE FUN AND TRY THINGS\n                    ANDREW" : " There's small print you can't read in this dimness." )} ;

   boor_or_not : dynamic_string {( is_beside("pro_boor") ? (is_first_entered() ? "The {cc_pro_boor} has started blustering away. It'll be a while, unless you can disrupt things." : "The {cc_pro_boor} stands around, continuing to bluster. You're not sure if they want an argument or an audience. You are sure it'd be nice to get rid of them.") : "It's quieter here with the {cc_pro_boor} gone, but you still aren't sure why you're here. Figuring {cc_prayer_lights}'s main secret may help." )} ;
   lush_shout_note : dynamic_string {( bonus_point_shush_lout ? "quieter for being shushed but still pushy" : "with many a lush shout" )} ;

   describe_beery_thor : dynamic_string {( is_first_entered() ? (have_won ? "\"Oh, hey. Great to see you back. You know the drill. {v_talk} if you want, or look around for extra content.\"\n" : "A man twice your size stands here. \"Glad you made it! I'm Beery Thor. I sent you that message. I'd love to {v_talk} about what to do and see here. Mostly big-picture summaries of what's in that book. Hey, I can take it off your hands so you won't need to lug it around during the real adventure.\"\nSounds fair. You hand it over.") : "Beery Thor stands here, smiling, waiting " + (talked_to_thor ? "for you to {v_ask} about any of the rules in the Player's Bill of Rights." : "to {v_talk} whenever, about whatever.") )} ;
   describe_seth_denton : dynamic_string {( is_beside "seth_dentons" ? "\nAn establishment called Seth Denton's is off to the side here. You have a feeling you don't want to <ENTER<#0f0>>, and maybe you can figure why.{footnote_reveal_text}" : "" )} ;
   describe_gravel_trail : dynamic_string {( point_gravel_trail ? ", and your travel grail opened up a path north" : ", and it seems weirdly fuzzy north, as if something should be there but isn't. Yet" )} ;

   hubdir : dynamic_string {( is_at("west_tiles") ? "west" : "east" )} ;
   hubrevdir : dynamic_string {( is_at("west_tiles") ? "east" : "west" )} ;
   sub_hub : dynamic_string {( "You also see big runes carved into the ground here in the {hubdir} mini-hub. You can go south{hubrevdir} back to the plain base" + (point_healing_still ? ", which is your only choice, given the stealing hill's mood." : " or " + (has_visited("stealing_hill") ? "back up to the stealing hill" : "up to a hill") + ".\n{spokes_left}" ) )};
   spokes_word : dynamic_string {( tempint == 6 ? "one" :
      tempint == 5 ? "two" :
      tempint == 4 ? "three" :
      tempint == 3 ? "four" :
      tempint == 2 ? "five" :
      tempint == 1 ? "six" :
      "(error, bug, {tempint})"
      )};
   spokes_left : dynamic_string {( tempint == 0 ? "You haven't gotten anything yet from any of the seven outward spokes here." : (tempint == 7 ? "You've taken care of business in all the side areas here." : "You still need to take care of things in {spokes_word} of the seven planar directions.") )};

   runes_desc : dynamic_string {( is_at("west_tiles") ? "Five runes: two v's, two geometric angle signs rotated 180 degrees, one v." : "Five runes: a caret, a straight line, two geometric angle signs, a straight line." )} ;

   ## west tiles seeding for dynamic strings, starting north and going clockwise
   hub_w_plaster_man : string "A {cc_plaster_man} stands here. Perhaps there is something inside it." ;
   hub_w_master_plan : string "With the plaster man destroyed, there's not much left here." ;
   hub_w_malice_chap : string "A {cc_malice_chap} stands here, radiating malice intensely." ;
   hub_w_chalice_map : string "You got the chalice map here. There can't really be anything left to do." ;
   hub_w_shell_fort : string "A {cc_shell_fort} sits here. It occasionally fires rounds that get close to you. While there's no danger of you getting hit, it's still annoying and gets in the way of trying to find anything." ;
   hub_w_fell_short : string "The shell fort lies barren now. You even ransacked it for rations." ;
   hub_w_cake_trackers : string "{cc_cake_trackers} mope about here, looking for cake, mumbling about how they only have boring food to eat. They are nonspecific about what boring food it is, but maybe you can figure that out." ;
   hub_w_take_crackers : string "Man! Those folks sure had a lot of crackers. But they were greedy and wanted cake. You've taken all you possibly need, and there are still several boxes left over." ;
   hub_w_gift_shoals : string "{cc_gift_shoals} are here. They sure have washed up a lot of gifts! Nothing you particularly like or can use, but you're drawn to them anyway, in your current mental state." ;
   hub_w_shift_goals : string "The shoals seem more peaceful now that you have fixed your mindset. You don't miss the now-vanished gifts." ;
   hub_w_grunters_hill : string "Grunts from big hills, here. Well, from around the hills. That must make them {cc_grunters_hill}. It's like people are trying to forage for food, but of course their grunts scare off prey. Said grunts are mainly about not having enough food." ;
   hub_w_hunters_grill : string "Well, you've had your feast, and it was delicious. It's filled you up for the journey ahead. Hanging around here wouldn't burn any calories, so you should probably get going." ;
   hub_w_yellow_field : string "Someone is blocking you here in this {cc_yellow_field}. Why, or from what, you're not sure." ;
   hub_w_fellow_yield : string "The yellow field is pretty to look at, but there's nobody and nothing here that can help you further." ;

   ## east branch seeding for dynamic strings, starting north and going clockwise
   hub_e_sky_floor : string "The {cc_sky_floor} here gives you poetic thoughts. Well, maybe not quite poetic, maybe wordless. You're not quite sure, but when you figure it out, you're sure you'll think up something cool." ;
   hub_e_fly_score : string "It was inspirational to think up a neat little tune here, but you realize you want to share it." ;
   hub_e_trending_booth : string "A {cc_trending_booth} sits here, spouting all sorts of things you can and should be doing that are more exciting than silly old text adventuring. The arguments seem convincing, and yet ..." ;
   hub_e_bending_truth : string "Noise continues to emanate from the trending booth, but you sort of recognize a lot of its rhetorical tricks, so you can ignore it and leave when you want." ;
   hub_e_warring_bay : string "You don't know how or why a war started in this {cc_warring_bay}. Everyone seems quite excited to be dedicated to their own cause, whatever it is." ;
   hub_e_boring_way : string "Well, you made this a boring way. You feel content having contributed to peace, but all the same, this being a boring place, you can't imagine having anything interesting to do here." ;
   hub_e_hurt_dome : string "A {cc_hurt_dome} sits here. Fortunately, it just looks hurt and doesn't seem to want to hurt anyone or anything actively by launching missiles. But perhaps you could remove the hurt?" ;
   hub_e_dirt_home : string "The dirt home you summoned stands here, infinitely less menacing than its previous form." ;
   hub_e_roaring_pain : string "You feel {cc_roaring_pain}. While there's some shelter here from above, it doesn't help with the internal stuff." ;
   hub_e_pouring_rain : string "The shelter keeps you safe from the pouring rain, which shows no sign of letting up. Probably just have to make a run for it when you can." ;
   hub_e_money_fountain : string "A {cc_money_fountain} is here. People dive in, trying to get the money, but they somehow come up empty. It's very upsetting and soul-draining for them." ;
   hub_e_funny_mountain : string "A mountain with a cheery face somehow carved in its side makes all who walk by laugh or smile as they go on their day. It helps you, too, though you recognize true happiness is a journey that extends away from here, and the mountain just gives a temporary boost." ;
   hub_e_trim_goon : string "A {cc_trim_goon} sits here, ready to rough you up if provoked. Fortunately, you've given them no cause, but boy, it'd be fun to tweak them and win a psychological victory. You suspect it's what Thor would want." ;
   hub_e_grim_tune : string "You sit and bask in the area, now barren, which only reinforces the grim tune you whipped up. You see, with some modifications, it could work against non-physical cruelty." ;

   ## details for hub items
   confidence_level : dynamic_string {( confidence_meter == 2 ? "serious" : "a bit of" )} ;
   confidence_obnoxious : dynamic_string {( confidence_meter == 1 ? "someone obnoxious" : "obnoxious people" )} ;
   map_and_plan : dynamic_string {( point_chalice_map && point_master_plan ? "The chalice map and master plan seem to fit together well. They'll help when you need them, without having to do anything fancy." : "You sense you may need something else to make full sense of it."
      )} ;
   trial_pics_seen : dynamic_string {( pcpc_tile && pcpc_pile ? "You've found two different ways to look at the pics. There can't be any more." : (!pcpc_tile && !pcpc_pile) ? "Perhaps there is something in the pics, but it can't be SUPER critical." : "You've focused on " + (pcpc_tile ? "the tile pricks" : "how to pile tricks") + ", and yet you feel they have more to offer." )} ;
   bonus_note_so_long : dynamic_string {( bonus_point_so_long ? "\nYou said SO LONG with this low song." : retry_so_long ? "\nYou should say SO LONG now you have this low song again." : "" )} ;
   bonus_note_vast_fission : dynamic_string {( bonus_point_vast_fission ? "\nYou found VAST FISSION from this." : retry_vast_fission ? "\nYou should find VAST FISSION now you have this fast vision again." : "" )} ;
   bonus_note_cease_purging : dynamic_string {( bonus_point_cease_purging ? "\nYou figured how to CEASE PURGING from this." : retry_cease_purging ? "\nYou should CEASE PURGING now you feel peace surging again." : "" )} ;
   bonus_note_sane_role : dynamic_string {( bonus_point_sane_role ? "\nYou thought up a SANE ROLE from this." : retry_sane_role ? "\nYou should think up a SANE ROLE now you have the rain soul again." : "" )} ;
   bonus_note_grow_need : dynamic_string {( bonus_point_grow_need ? "\nYou figured how to GROW NEED from this." : retry_grow_need ? "\nYou should GROW NEED again now you have no greed again." : "" )} ;
   bonus_note_racing_passions : dynamic_string {( bonus_point_racing_passions ? "\nYou extracted RACING PASSIONS from this." : retry_racing_passions ? "\nYou should extract RACING PASSIONS again now you have the pacing rations again." : "" )} ;

   ## stealing hill
   stealing_hill_desc: dynamic_string {( point_healing_still ? "The stealing hill seems quiet, for now, but it will probably figure someone stole its grail, eventually." : "A {cc_stealing_hill} glares at you (the hills have eyes, you know) as if to say, you're not getting anything useful from it! And yet, there's so much junk lying around, if you know what to get and have a plan to get there, you can nab it quickly."
   )};
   loc_stealing_hill : dynamic_string {( "THE STEALING HILL\n{stealing_hill_desc}\nYou can go " + ( has_visited("west_tiles") ? "back to West Tiles" : "west" ) + " or " + ( has_visited("east_branch") ? "back to East Branch" : "east" ) + "." )};
   stealing_hill_mad: dynamic_string {( "You don't have any reason to risk the full wrath of the stealing hill. You got something useful" + (point_gravel_trail ? "" : ", you're pretty sure") + "." )} ; ## remove qualifier only when you used the travel grail

   gravel_trail_house : dynamic_string {(
      point_missing_house ? "to the house you summoned" : "to, well, nowhere at the moment"
   )};

   my_house_description : dynamic_string {( point_see_glimmering ? "Stuff is glimmering a few places, and maybe the ring is somewhere, but you'll never reach it on your own. Boy, you think, I could use a helper who can get everywhere in {cc_my_house}{chimes_present}." : "{cc_glee_simmers} here as you think, yes, this really is {cc_my_house}! It has a bookshelf and poster and everything!\nAnd yet, owning a house is nice and all, but ... what about Thor's quest? You glance again at your inventory."
   )};

   ruts_poster_note : dynamic_string {( bonus_point_eye_stay ? "You figured its twist" : "Maybe it actually has a double meaning, though you may just wish to wrap things up here" )} ;

   book_is : dynamic_string {(
      books_read == 16 ? "The last book is" :
      books_read == 0 ? "One book is" :
      "Another book is"
   )} ;

   ## noting where chimes were solved/are
   chimes_present : dynamic_string {(
      (summoned_teary_chimes && !bonus_point_cheery_times) ? ". You hear teary chimes " + (is_at "gravel_trail" ? "here" : "outside" ) + ", too" : ""
   )} ;
   chimes_note : dynamic_string {( chimes_in_my_house ? " (Point of order: you recalled cheery times inside the house, but the teary chimes were outside.)" : "" )} ;

   ## color code stuff

   ## intro first
   cc_whoa_guest : dynamic_string {( use_color_coding ? "<\"Whoa! Guest!\"<#f88>>" : "\"Whoa! Guest!\"" )} ;
   cc_burst_face : dynamic_string {( use_color_coding ? "<burst face<#f88>>" : "burst face")} ;

   cc_pro_boor : dynamic_string {( use_color_coding ? "<Pro Boor<#f88>>" : "Pro Boor" )} ;
   cc_prayer_lights : dynamic_string {( use_color_coding ? "<Prayer Lights<#f88>>" : "Prayer Lights" )} ;

   ## west hub
   cc_plaster_man : dynamic_string {( use_color_coding ? "<plaster man<#f88>>" : "plaster man" )} ;
   cc_malice_chap : dynamic_string {( use_color_coding ? "<malice chap<#f88>>" : "malice chap" )} ;
   cc_shell_fort : dynamic_string {( use_color_coding ? "<shell fort<#f88>>" : "shell fort")} ;
   cc_cake_trackers : dynamic_string {( use_color_coding ? "<Cake trackers<#f88>>" : "Cake trackers")} ;
   cc_gift_shoals : dynamic_string {( use_color_coding ? "<Gift shoals<#f88>>" : "Gift shoals")} ;
   cc_grunters_hill : dynamic_string {( use_color_coding ? "<grunters' hills<#f88>>" : "grunters' hills")} ;
   cc_yellow_field : dynamic_string {( use_color_coding ? "<yellow field<#f88>>" : "yellow field")} ;

   ## east hub
   cc_sky_floor : dynamic_string {( use_color_coding ? "<sky floor<#f88>>" : "sky floor")} ;
   cc_trending_booth : dynamic_string {( use_color_coding ? "<trending booth<#f88>>" : "trending booth")} ;
   cc_warring_bay : dynamic_string {( use_color_coding ? "<warring bay<#f88>>" : "warring bay")} ;
   cc_hurt_dome : dynamic_string {( use_color_coding ? "<hurt dome<#f88>>" : "hurt dome")} ;
   cc_roaring_pain : dynamic_string {( use_color_coding ? "<roaring pain<#f88>>" : "roaring pain")} ;
   cc_money_fountain : dynamic_string {( use_color_coding ? "<money fountain<#f88>>" : "money fountain")} ;
   cc_trim_goon : dynamic_string {( use_color_coding ? "<trim goon<#f88>>" : "trim goon")} ;

   ## endgame
   cc_stealing_hill : dynamic_string {( use_color_coding ? "<stealing hill<#f88>>" : "stealing hill")} ;
   cc_travel_grail : dynamic_string {( use_color_coding ? "<travel grail<#f88>>" : "travel grail")} ## may not be used
   cc_hissing_mouse : dynamic_string {( use_color_coding ? "<hissing mouse<#f88>>" : "hissing mouse")} ;
   cc_glee_simmers : dynamic_string {( use_color_coding ? "<Glee simmers<#f88>>" : "Glee simmers")} ;
   cc_my_house : dynamic_string {( use_color_coding ? "<my house<#f88>>" : "my house")} ;
   chimes_description_start : dynamic_string {( is_at ("gravel_trail") ? "The chimes make" : "You can't see them, but you hear them making" )} ;

   ## footnote notifications and (potentially) other dynamic strings
   footnote_reveal_text : dynamic_string {( reveal_this_footnote ? " <(FOOTNOTE " + tempint + ")<#f80>>" : "" )} ;

   ## achievement strings
   ## reds = certain verb (presence or absence)
   achievement_haih : string "<Hi, All I Haul<#f00>>" ;
   ## MTTM post-release
   achievement_mttm : string "<More than Thor, Man<#f00>>" ;
   achievement_tyyt : string "<Too Yacky: You, Tacky<#f00>>" ;

   ## orange = bonus points / footnotes
   ##ROER post-release
   achievement_tnnt : string "<Totes Need Notes Teed<#f80>>" ;
   achievement_cddc2 : string "<Cueing Direct Doing: Correct<#f80>>" ;
   achievement_roer : string "<Reach Out Each Route<#f80>>" ;
   achievement_pcpccp : string "<Player-Can-Pair-Clan Care Plan<#f80>>" ;
   achievement_cnnc : string "<Clever! Nap? Never! (Clap!)<#f80>>" ;

   ## yellow = asking Thor
   achievement_qwwq : string "<Quell-Worrying-Well Querying<#ff0>>" ;
   achievement_kssn : string "<Knowin' Stuff, Stowin' 'Nuff<#ff0>>" ;

   ## green = how you get them all
   achievement_ssss : string "<So Slick! Slow? Sick!<#8f8>>" ;
   achievement_gssg : string "<Great Style, Straight Guile<#8f8>>" ;
   achievement_rssr : string "<Re-Sight-See? Riiight<#8f8>>" ;
   achievement_srrs : string "<Second Revvin' Reckoned? Seven<#8f8>>" ;

   ## blue = abusing the warp command
   achievement_tmmt : string "<Throw Me Mo': Three<#00f>>" ;
   achievement_cjjc : string "<Chump, Joke Jump? Choke<#00f>>" ;
   achievement_dbbd : string "<Did-Buzzin'-Bid? Dozen<#00f>>" ;
   achievement_cddc : string "<Cousin, Draft Dozen-Craft<#00f>>" ;

   ## purple = examine
   achievement_hbbh : string "<Hi! Beer By Here?<#f0f>>" ;
   achievement_nbbn : string "<Neat-Book-Beat Nook<#f0f>>" ;

   ## last one
   achievement_taat: string "<Try All: Aye, Trawl<#888>>" ;

   rttr: string "<Rare-Thing-There Ring<#a33>>" ;

   already_got_check : dynamic_string {( already_got_command ? " Though you already got the full command, which you can revisit with {vd_thk}." : "" )} ;
   for_bonus : dynamic_string {( half_bonus ? " for a bonus point" : "" )} ;

   ## inventory bonus point notes
   inv_plus_grow_need : dynamic_string {( inv_grow_need ? pip : "" )} ;
   inv_plus_sane_role : dynamic_string {( inv_sane_role ? pip : "" )} ;
   inv_plus_vast_fission : dynamic_string {( inv_vast_fission ? pip : "" )} ;
   inv_plus_so_long : dynamic_string {( inv_so_long ? pip : "" )} ;
   inv_plus_cease_purging : dynamic_string {( inv_cease_purging ? pip : "" )} ;
   inv_plus_racing_passions : dynamic_string {( inv_racing_passions ? pip : "" )} ;

   y17 : string "<seventeen<#ff0>>" ;

}

stats {
   stat_talkflag : stat ;
}

## Objects with vocabulary

objects {
  ## pedagogical stuff
   ooh_task : object "Ooh, Task to Ask ('Ooh Task')" msg="It is a request to find the {rttr}.{task_read}";
   prayer_lights : object "{cc_prayer_lights}" msg="It's a weird book. It seems slightly in code. It's like it's not talking about what it's really talking about, and you need to figure that out.";

  ## scenery
   cheering_voice : scenery "cheering voice" msg="It gives a cheery {cc_whoa_guest}" conspicuous="false" ;
   seth_dentons : scenery "Seth Denton's" msg="It looks forbidding, but you're not sure why." at="plain_base" conspicuous="false";
   big_runes : scenery "big runes" at="west_tiles" msg="{runes_desc}" conspicuous="false" ;
   plaster_man : scenery "a plaster man" at="hub_w_n" msg="A plaster man." conspicuous="false" ;
   trending_booth : scenery "a trending booth" at="hub_e_ne" msg="You don't want to get too close." conspicuous="false" ;

   ## NPC(s)
   beery_thor : scenery "Beery Thor" msg="Big and strong but not in the \"Boo, tough, too buff\" way." at="plain_base" conspicuous="false" ;
   pro_boor : scenery "A pro boor" msg="Seems upset about anything and everything." at="first_base" conspicuous="false" ;
   hissing_mouse: scenery "A hissing mouse" at="gravel_trail" conspicuous="false" ;

   ## hub side items that get used
   ## start in the west, going clockwise
   chalice_map : object "a chalice map" msg="You're not sure where it leads.\n{map_and_plan}" ; ## from malice chap
   master_plan : object "a master plan" msg="It's written in clear language.{footnote_reveal_text}\n{map_and_plan}" ; ## from plaster man
   pacing_rations : object "pacing rations{inv_plus_racing_passions}" msg="Very sensible rations for any sort of long journey, obviously completely well-thought-out and unemotional and stuff.{bonus_note_racing_passions}" ; ## from shell fort
   crackers : object "Crackers" msg="More crackers than you could ever want." ; ## from cake trackers
   focus : object "<focus<#888>>" msg="It's hard to focus on your focus, but you know you have it, since you feel less distracted by what doesn't matter." ; ## from gifting shoals
   meal_dude : object "deal-mood meal, dude (eaten)" msg="You reflect on the meal you enjoyed. It will help you deal with something, mentally and/or physically." ; ## from grunters' hill
   confidence : object "<Confidence<#888>> ({confidence_level})" msg="You examine how you're feeling. You have {confidence_level} confidence from outwitting {confidence_obnoxious}." ; ## from yellow field / trim goon
   low_song : object "<a low song<#888>>{inv_plus_so_long}" msg="Notes to a song, but no lyrics.{bonus_note_so_long}" ; ## fly score
   fast_vision : object "<a fast vision<#888>>{inv_plus_vast_fission}" msg="You had a fast vision of how to be more persuasive, and it's stayed steadfast.{bonus_note_vast_fission}" ; ## trending booth
   peace_surging : object "<peace surging<#888>>{inv_plus_cease_purging}" msg="You feel peace surging within you.{bonus_note_cease_purging}" ; ## warring bay
   trial_pics : object "trial pics (of the dirt home)" msg="You have some trial pics of the dirt home. Perhaps they'd be of interest to potential homeowners.\n{trial_pics_seen}" ;
   rain_soul : object "<a rain soul<#888>>{inv_plus_sane_role}" msg="You feel rain in your soul, which makes you feel you've lived a little and still have things worth working out. So many ideas that need something beyond words to bring them together.{bonus_note_sane_role}" ;
   no_greed : object "<no greed<#888>>{inv_plus_grow_need}" msg="You feel as though you have no greed. But then you decide to overthink things. People who claim they have no greed are maybe fooling themselves, but people who want to be less greedy are maybe greedy to have less greed. Paradoxes!{bonus_note_grow_need}" ;

   ## post-hub
   travel_grail : object "a {cc_travel_grail}" msg="(should be covered in on_command)" ;
   teary_chimes : object "teary chimes" msg="{chimes_description_start} small pleasant musical noises in the wind." conspicuous="false" ;
   bookshelf : scenery "a bookshelf" at="my_house" conspicuous="false" ;
   ruts_poster : scenery "a putz-roaster-ruts poster" at="my_house" conspicuous="false" msg="It advertises itself as a Puts-Roaster-Ruts Poster, one of those posters that claim to be ironic with a downer statement. {ruts_poster_note}." ;

}

# end objects

vocabulary {
   # note a lot of synonyms we would suspect can't be in here e.g. MASTER and PLAN, because then MASTER MASTER would give the right solution, too ... we could circumvent this with original nouns or string manipulation but it's a pain
   # intro and general
   : noun / aliases = [ooh, task, ask, parchment]
   : noun / aliases = [voice, veering, choice, cheery, cheering]
   # plain base
   : noun / aliases = [seth, denton]
   : noun / aliases = [beery, thor]
   # east hub, clockwise
   : noun / aliases = [low, song]
   : noun / aliases = [booth, trending]
   : noun / aliases = [fast, vision]
   : noun / aliases = [fission, fishin, fishing] # not an actual item, but it makes tracking the one bonus point easier
   : noun / aliases = [peace, surge, surging]
   : noun / aliases = [purge, purging]
   : noun / aliases = [trial, pics]
   # west hub, clockwise
   : noun / aliases = [box, boxes, crackers]
   : noun / aliases = [cake, trackers]
   : noun / aliases = [meal, dude]
   # endgame
   : noun / aliases = [glimmer, glimmers, glimmering]
   : noun / aliases = [putz, roaster, ruts, poster]

   # aliases for yes/no
   : noun / aliases = [no, n, off]
   : noun / aliases = [yes, y]

   : verb / aliases = [ab, abt, about]
   : verb / aliases = [achievements, achievement, achieve, ach, ac]
   : verb / aliases = [ask, rule]
   : verb / aliases = [bonus, bon, bo, b]
   : verb / aliases = [cheatleap, cheetleap, cheatleep, cheetleep, cl, lc, leetcheap] # account for player typos since I made a lot during programmer testing
   : verb / aliases = [score, sco]
   : verb / aliases = [f, fo, foot, footnote, footnotes]
   : verb / aliases = [enter, in]
   : verb / aliases = [ch, colorhint]
   : verb / aliases = [exit, out]
   : verb / aliases = [listen, hear]
   : verb / aliases = [hi, high]
   : verb / aliases = [hint, hints]
   : verb / aliases = [hunter, hunting, hunters]
   : verb / aliases = [not, noti, notif, notify]
   : verb / aliases = [o, out]
   : verb / aliases = [t, talk]
   : verb / aliases = [th, think]
   : verb / aliases = [tx, thx, thank, thanks, credits, credit, creds, cred, crs, cr]
   : verb / aliases = [opt, opts, option, options]
   : verb / aliases = [tut, tutorial]
   : verb / aliases = [points, point, pt, pts, poi, po]
   : verb / aliases = [v, verb, verbs]
   : verb / aliases = [vers, version, versions]
   : verb / aliases = [x, read]
   : verb / aliases = [eat, taste]
   : verb / aliases = [z, wait]

   : verb / aliases = [gt, goto, gonear] # for testing, since Inform ingrained "GONEAR X" in my head, and I put GT in my games a lot
}

# end vocabulary

## Locations and location-specific parser rules

locations {
   nameless_lameness : location "You are surrounded by nameless lameness. It's all very, very grey. You can't really see much beyond yourself. But you need to start somewhere." {
      on_command {
         : if (in_tutorial && !tutorial_5_inventory_done && is_carried("ooh_task")) {
            : match "x ask" {
               : print "You'll want to <X ASK<#0f0>> or an equivalent next, but as this tutorial is intended to be on rails, the next step is {vd_i} to take {vd_i_long}." ;
               : set_true "temporary_ring_question_blocked" ;
               : done ;
            }
         }
         : if (is_beside "cheering_voice") {
            : match "t -;t voice" {
               : set_true "tutorial_8_talk_voice_done" ;
               : increment "tutorial_score" ;
               : print "You get no response from the voice, which is not surprising. It seems powerful, and it probably comes from afar. But it was worth a try. Perhaps you will get a better response when you find its source, or when other people or things are close by." ;
               : done ;
            }
            : match "_ voice" {
               : print "It's probably more what the voice is saying." ;
               : done ;
            }
         }
         : if ((verb_is "inventory")) {
            : if (in_tutorial && !tutorial_4_x_me_done) {
               : print "Taking inventory is a good thing to do early in a text adventure, but we're not there yet in the tutorial. Once you've found an item, the tutorial will nudge you to do take inventory.";
               : done ;
            }
            : if (!tutorial_5_inventory_done) {
               : mask {
                  : set_true "tutorial_5_inventory_done" ;
                  : increment "tutorial_score" ;
               }
            }
         }
         : match "listen _" {
            : if (tutorial_6_x_ask_done) {
               : print "You hear a voice. It's a happy one. For whatever reason, you mark it up as a Veering Choice Cheering Voice. It greets you, sort of, with a {cc_whoa_guest} You'd like to see where it's from. But which direction is that?" ;
               : set_true "tutorial_7_listen_done" ;
               : increment "tutorial_score" ;
               : create "cheering_voice" ;
               : update_graphic ;
               : done ;
            }
         }
         : match "x me;x myself;x self" {
            : if (in_tutorial && (!tutorial_1_about_done || !tutorial_2_verbs_done || !tutorial_3_additional_metaverb_done)) {
               : print "While {v_x_me} is a useful starting command, and one you'll soon be using in this tutorial, I put this tutorial on rails. There are meta-commands to acquaint yourself with first." ;
               : done ;
            }
            : else_if (!is_carried "ooh_task") {
               : pocket "ooh_task" ;
               : print "You search yourself, wondering if you forgot something, and hoping something will turn up. You stumble around a bit as you do so, and you kick something. It's a rolled-up parchment. You unroll it. It has <Ooh, Task to Ask<#88f>> in big letters." ;
               : print "Well, that's a start! You're not sure how or why it got here, but all the same, you're glad you might have some direction, now." ;
               : if (!tutorial_4_x_me_done) {
                  : set_true "tutorial_4_x_me_done";
                  : increment "tutorial_score" ;
               }
               : done ;
            }
         }
         : match "salesmen _"  {
            : print "But you already have this wonderful free game! Why would you want to bring in salesmen with an anagram?" ;
            : gosub "nl_anagram_check" ;
         }
         : match "maleness _"  {
            : print "You'll be dealing with bringing out abstract concepts from things, but not with anagrams." ;
            : gosub "nl_anagram_check" ;
         }
      }
      on_describe {
         : set_false "in_number_choice" ;
         : if ( is_beside "cheering_voice") {
            : print "The cheering voice still floats around. You can {v_listen_hear} it.";
         }
         : else_if (is_carried "ooh_task" && tutorial_6_x_ask_done) {
            : print "But it's no longer silent. Perhaps you can {v_listen_hear}.";
         }
      }
      on_tick {
         : if (is_carried "ooh_task" && !tutorial_6_x_ask_done && noun1_is "task" && verb_is "examine" ) {
            : if (temporary_ring_question_blocked) {
               : set_false "temporary_ring_question_blocked" ;
               : return ;
            }
            : print "You'll probably have to leave here to find the ring, but how? You are just stumbling around here. But wait ... the silence is shattered! Perhaps you can use one of your senses and pick up a clue." ;
            : set_true "tutorial_6_x_ask_done" ;
            : increment "tutorial_score" ;
         }
      }
   };
   burst_face : location "Having come west from the nameless lameness, you find yourself stuck at this {cc_burst_face}. It's time to take another initial step. Or it would be, without that {cc_burst_face} in the way." graphic = "burst_face_before" {
      on_command {
         : match "x face;x burst" {
            : print "The burst face looks stern, yet at the same time, a bit weary, maybe just impatient for you to say the right thing. Whatever it's been guarding, well, it's been a long while. If you say the right thing, you can get by it." ;
            : done ;
         }
         : match "east _" {
            : set_integer var="tempint" "3" ;
            : gosub "footnote_reveal" ;
            : print "There's no way back. Not that you'd want to go back. Anyway, whoever it was that summoned you would probably just yank you back from your trip back. Well, if they're anywhere near as powerful as their voice.{footnote_reveal_text}" ;
         }
         : match "first base" {
            : print "You're not sure whether to think or say \"first base,\" so you say it, cautiously.\nYou hear a slow rumbling as the burst face crumbles. You feel sad, but maybe you are releasing it from tedium. As you walk forward, you look back, and funnily enough, it builds back up again.\nSo you continue on. Before you know it, you're confronted by someone who introduces themselves as a {cc_pro_boor}! They warn you against going forward, because that way, pointlessness lies.";
            : update_graphic "burst_face_after" ;
            : set_true "point_first_base" ;
            : set_true "tutorial_10_first_base" ;
            : increment "tutorial_score" ;
            : gosub "add_point" ;
            : goto "first_base" ;
            : gosub "tutorial_shutoff" ;
            : redescribe ;
            : done ;
         }
         : match "first _;_ base" {
            : gosub "say_half" ;
            : done ;
         }
         : match "talk -; talk face;listen_" {
            : print "The {cc_burst_face} is, sadly, not bursting with conversation." ;
            : done ;
         }
      }
   };
   first_base : location "Now you're getting somewhere! You think.\n{boor_or_not}" {
      on_command {
         : if (is_carried "prayer_lights") {
            : match "x book;x lights;x prayer" {
               : print "It's a weird book. It seems slightly in code. It's like it's not talking about what it's really talking about, and you need to figure that out.\nIt's almost a call for help, to claim something intangible you believe you deserve as an adventurer, even if it feels like too much of an ask.";
               : done ;
            }
            : match "rare plights" {
               : if (!bonus_point_rare_plights) {
                  : print "You read about people's complaints. Some seem common and some seem exotic indeed. People hard done by mentally, physically, and financially. Their problems seem more interesting and exciting than yours. You know it's important to care about this sort of thing, and yet, there must be something else in {cc_prayer_lights}, something more uplifting, perhaps a justification you deserve more, even if you have a fun game like this to play." ;
                  : set_true "bonus_point_rare_plights" ;
                  : update_graphic ;
                  : set_integer var="tempint" "3" ;
                  : gosub "add_bonus" ;
               } : else {
                  : print "Not again. You want to search for something more positive now." ;
               }
               : done ;
            }
            : if (have_won && !bonus_point_rare_plights) {
               : match "rare _;_ plights" {
                  : gosub "say_half_b" ;
                  : done ;
               }
            }
            : match "player rights" {
               : if (!point_player_rights) {
                  : print "Yes. It makes sense. A few things still seem a bit hidden, and shockingly, after ten pages, the writing turns to Norse runes! You're helpless here, not having played Ultima IV for a good long while. But you're curious: you should be grateful for any game at all, right? Especially if it's free? Programmers work so hard on their games! Asking for more seems pushy.\n\nYou look around and listen. You hear something in the distance -- it sounds like the voice that said {cc_whoa_guest}\nYou walk towards it." ;
                  : gosub "add_point" ;
                  : press_any_key ;
                  : set_true "point_player_rights" ;
                  : goto "plain_base" ;
                  : destroy "prayer_lights" ;
                  : redescribe ;
               }
               : done ;
            }
            : if (is_carried("prayer_lights")) {
               : match "_ rights;player _" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
         : if (is_beside("pro_boor")) {
            : match "x boor;x pro" {
               : set_integer var="tempint" "4" ;
               : gosub "footnote_reveal" ;
               : print "The {cc_pro_boor} gazes angrily back at you. You're the same height, but you feel looked down on.{footnote_reveal_text}" ;
            }
            : match "listen -;listen boor" {
               : print {( "You're listening enough without trying. You just wish you could have a pithy comment, appropriate to your interlocutor, to brush them off." + (bonus_point_shush_lout ? "" : " They give off a lush shout every now and then, too, which would be nice to curb, but you feel you probably need to riff on who they are to get rid of them.") )} ;
               : set_true "know_lush_shout" ;
               : done ;
            }
            : match "talk -;talk boor" {
               : print "The {cc_pro_boor} babbles on about what a REAL quest is, {lush_shout_note}, disappointed you don't immediately agree. You sense the {cc_pro_boor} has a weakness, though." ;
               : set_true "know_lush_shout" ;
               : gosub "talk_flag" ;
               : done ;
            }
         } : else {
            : match "listen _;talk _" {
               : print "It's mercifully silent, now, with nobody to talk to, and you like that. Time to figure out what {cc_prayer_lights} is REALLY all about." ;
               : done ;
            }
         }
         : if (point_bro_poor) {
            : match "bad teacher" {
               : print {( know_tad ? "Sorry, no bonus point." : "You chuckle a little at the Pro Boor believing in someone like that. However, since Tad Beecher is (un)fortunately not present, I can't give you a bonus point for exposing him." )} ;
               : set_true "know_tad" ;
            }
         }
         : match "bro poor" {
            : if (!point_bro_poor) {
               : print "The {cc_pro_boor} looks taken aback. They don't need this nonsense. If you want to go forward and suffer some boring game where you don't get to shoot or beat up anyone, that's your business. They can't stop you. You yourself are not worth shooting or beating up." ;
               : print "As a parting gift, they shove something into your hands, a discussion of what you're getting into, which they assure you is nothing near as good as Tad Beecher's writings." ;
               : print "It's titled {cc_prayer_lights}. Which doesn't seem QUITE right.";
               : set_true "point_bro_poor" ;
               : destroy "pro_boor" ;
               : pocket "prayer_lights" ;
               : gosub "add_point" ;
               : update_graphic ;
               : done ;
            }
            : print "You permit yourself a touch of schadenfreude. Why not?" ;
            : done ;
         }
         : if (!point_bro_poor) {
            : match "bro _;_ poor" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (know_lush_shout) {
            : match "shush lout" {
               : if (!bonus_point_shush_lout) {
                  : print "The {cc_pro_boor} takes exception to this. Being called a lout is one thing, but being told to talk a bit less is unforgivable! Sadly, said unforgivingness results in a pause before continuing and not just leaving.\nPerhaps you need to take a different sort of dig to get rid of them for good. More direct, more personal. Not necessarily profane or cruel." ;
                  : set_true "bonus_point_shush_lout" ;
                  : set_integer var="tempint" "2" ;
                  : gosub "add_bonus" ;
               } : else {
                  : print "You're not going to quiet the {cc_pro_boor} any further. How to get rid of them?" ;
               }
            }
            : if (have_won && !bonus_point_shush_lout) {
               : match "shush _;_ lout" {
                  : gosub "say_half_b" ;
                  : done ;
               }
            }
         }
      }
   };
   plain_base : location "PLAIN BASE\nYou are in a plain base. While it's rather plain, it links to other places that look more interesting. You notice paths to the <northeast<#44f>> and <northwest<#44f>>{describe_gravel_trail}. You don't see any way back to First Base.{describe_seth_denton}\n{describe_beery_thor}" {
      on_command {
         : match "_ beer" {
            : if (noticed_beer) {
               : print "Thor already explained about the beer." ;
            } : else {
               : print "\"Ah yes. The beer. It's mainly a prop. Mostly colored water. It makes me seem much more chatty and vibrant than I am. Plus I don't want to set a bad example for mortals who get hangovers, or worse.\"" ;
               : set_true "noticed_beer" ;
               : set_true "achieve_hbbh_pre" ;
            }
         }
         : match "listen _" {
            : print {( "Thor has a lot you could listen to. Just " + (talked_to_thor ? v_talk : v_ask) + "." )} ;
            : done ;
         }
         : match "talk -;talk thor" {
            : gosub "talk_flag" ;
            : if (talked_to_thor) {
               : print "Now you've broken the ice, probably better to {v_ask} him about one of the rules, 1-17." ;
            } : else {
               : print "\"So, yes, about the Player Rights. Fella name a' Graham Nelson wrote 'em, over thirty years ago now. About what players could and should expect from a game. So it feels challenging but not unfair, and you get your money's and time's worth. It's held up well. It's got {y17} total rules. Some apply more than others in {qt}." ;
               : print "\"You can {v_ask} me about them by number, or {v_rule} works, too. Just the numbers, to keep things simple. I have three things to say about each rule: its original form, what it means and why it's there, and how it applies here in {qt}." ;
               : print "\"Oh, ask as much or little as you want. It won't affect your final score.\"" ;
               : print "{note_once}{v_ask} <1-17<#0f0>> is the main command, but {v_ask} <0<#0f0>> notes one thing you haven't asked about yet. Or one thing you haven't asked fully about yet." ;
            }
            : set_true "talked_to_thor" ;
            : done ;
         }
         : if (is_beside "seth_dentons") {
            : match "talk seth;talk dentons" {
               : print "Thor's conversation would be much more interesting and sane." ;
               : done ;
            }
            : match "death sentence" {
               : print "\"Yes, that's it. This is one of those traps where you're given adequate warning that going somewhere might kill you.\"";
               : set_true "bonus_point_death_sentence" ;
               : destroy "seth_dentons" ;
               : set_integer var="tempint" "6" ;
               : gosub "add_bonus" ;
            }
            : if (have_won && !bonus_point_death_sentence) {
               : match "death _;_ sentence" {
                  : gosub "say_half_b" ;
                  : done ;
               }
            }
            : match "x seth;x denton;x dentons" {
               : print "Very seedy looking. Even its name, though common, seems ominous. Why?";
               : gosub "thor_on_seth" ;
               : update_graphic "seth_dentons_picture" ;
               : done ;
            }
            : match "enter _" {
               : if (entered_seth_dentons) {
                  : print "Nope, not again. Maybe you can figure the secret Beery Thor said it had." ;
                  : done ;
               } : else {
               : print "It's a seedy place, it is. You are captured and put on trial. It looks bad for you, but before the verdict is rendered, Beery Thor clatters in and makes an argument that befuddles the courtroom.\n\"You're not the first person to try that,\" says Beery Thor. \"And I don't blame you. But there's another way to deal with it.\"" ;
               : gosub "thor_on_seth" ;
               : set_true "entered_seth_dentons" ;
               }
            }
         }
         : match "ask _" {
            : gosub "ask_thor" ;
         }
         : if (!noted_diagonal_direction) {
            : match "nw _;ne _" {
               : mask {
                  : gosub "note_diagonal_direction_from_hub" ;
                  }
            }
         }
         : match "bane place" {
            : if (!bonus_point_bane_place) {
               : print "Thor chuckles a bit. \"Well observed. 'Lurk, jokey jerk Loki!'\" he calls out.\n\"Well, I tried my best to bring in an antagonist, but I guess he's busy. Maybe that works for the best. Well, except for whomever he's busy with.\"";
               : set_integer var="tempint" "4" ;
               : gosub "add_bonus" ;
               : set_true "bonus_point_bane_place" ;
            } : else {
               : print "You already pointed out the, uh, potential alternate functionality of this location.";
            }
            : done ;
         }
         : if (have_won && !bonus_point_bane_place) {
            : match "bane _;_ place" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      on_describe {
         : if (!note_nonreciprocal && has_visited("stealing_hill")) {
            : set_integer var="tempint" "9" ;
            : gosub "footnote_reveal" ;
            : print "\"Oh, so you've been to the hill,\" says Thor. \"I hope the directions didn't turn you around too much. You know, going up and then west or east to get back. Bendy passages like this shouldn't be used often, but here, I sort of hope they give you a feeling the hill is elevated, in your mental map.{footnote_reveal_text}\"";
            : set_true "note_nonreciprocal" ;
         }
         : if (!achieve_ssss && !achieve_ssss_pre && !return_to_base_checked && (has_visited "east_branch" || has_visited "west_tiles")) {
            : if (is_carried("travel_grail")) {
               : print {( "Thor also points to your {cc_travel_grail}. \"Very impressive, getting it without coming back here. You deserve an achievement for that. " + ( have_won ? "You've seen them already" : "You'll see them" ) + " on completion of your quest.\"" )} ;
               : set_true "achieve_ssss_pre" ;
            }
            : set_true "return_to_base_checked" ;
         }
      }
      on_pre_describe {
         : set_integer var="tempint" "5" ;
         : gosub "footnote_reveal" ;
      }
      on_tick {
         : if (subject1_is "seth_dentons" ) {
            : gosub "thor_on_seth" ;
            : done ;
         }
         : if (said_bore_outside_base && !thor_knows_bore) {
            : set_true "thor_knows_bore" ;
            : print "You must have looked a bit sheepish or something, or maybe Thor is kinda omniscient, because he laughs and says \"Ah, you figured out my name. No worries. I'm pleased you figured it out. Wouldn't a' hurt my feelings to say it here." ;
            : print "Well, hooray for small relief.";
         }
      }
   };

   west_tiles : location "WEST TILES\nSuch nice, orderly tiles here. {sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_left_side)} ;
         : create "big_runes" ;
      }
      on_command {
         : gosub "rune_parsing" ;
         : match "test wiles" {
            : if (!bonus_point_test_wiles) {
               : print "Instead of worrying if this all is a task you can't complete, you see it as, well, a test of wiles. This boosts you momentarily, even if it offers no concrete benefits." ;
               : set_true "bonus_point_test_wiles" ;
               : set_integer var="tempint" "7" ;
               : gosub "add_bonus" ;
            } : else {
               : print "But you already framed this as a test of your wiles." ;
            }
            : done ;
         }
         : if (have_won && !bonus_point_test_wiles) {
            : match "test _;_ wiles" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      on_describe {
         : gosub "list_jump_commands" ;
         : gosub "footnote_hub_history" ;
      }
   };

   east_branch : location "EAST BRANCH\nThe paths here are not super tidy or straight, but they don't look dangerous. {sub_hub}" {
      on_pre_describe {
         : set_integer var = "tempint" {(points_right_side)} ;
         : create "big_runes" ;
      }
      on_command {
         : gosub "rune_parsing" ;
         : match "beast ranch" {
            : if (!bonus_point_beast_ranch) {
               : print "You wonder if, with your brains, you could tackle a huge beast ranch with mind over matter or something. Then common sense kicks in. But you have fun imagining." ;
               : set_true "bonus_point_beast_ranch" ;
               : set_integer var="tempint" "8" ;
               : gosub "add_bonus" ;
            } : else {
               : print "You don't want to tempt something like that into existence too often." ;
            }
            : done ;
         }
         : if (have_won && !bonus_point_beast_ranch) {
            : match "beast _;_ ranch" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      on_describe {
         : gosub "list_jump_commands" ;
         : gosub "footnote_hub_history" ;
      }
   };

   stealing_hill : location "{loc_stealing_hill}{footnote_reveal_text}" {
      on_command {
      : mask {
         : if (is_carried("travel_grail")) {
            : match "w _;e _;wt _;eb _;pb _" {
               : print "As you slip away, you hear the hill screaming. It realizes you have stolen something. Something valueless to it, since hills don't generally move around a lot, but hey, the principle's the important thing." ;
               : set_true "hill_aware_you_stole" ;
               : gosub "brief_hill_mad" ;
            }
         }
      }

      : match "x hill;x stealing" {
         : print {( point_gravel_trail ? "Nope. It hasn't discovered your theft yet. Better leave before it does." : "It seems to be sleeping. Maybe you could pinch something from it, if you knew what you wanted and how to get it." )} ;
      }
      : match "d w" {
         : set_sentence "w" ;
      }
      : match "d e" {
         : set_sentence "e" ;
      }
      : match "d _" {
         : print "But there are two ways to go down, here, technically. East or west. So you'll need to be specific." ;
         : done ;
      }
      : match "talk _;listen _" {
         : if (is_carried("travel_grail")) {
            : print "This seems unwise after you've just stolen something." ;
         } : else {
            : print "You're sort of glad the hill can't talk, or make any noise, really. It's sort of tense here, so any words would not be pleasant." ;
         }
         : done ;
      }
      : match "healing still" {
         : if (point_healing_still) {
         : print "You already found the healing still that contained the travel grail." ;
         }
         : else_if ((!point_chalice_map || !point_master_plan) && (!cheat_dont_require)) {
            : print {( "With the stealing hill watching you, it'll be tough to nab anything. " + ( !point_master_plan && !point_chalice_map ? "You'll need to know what you want and how to get there." : !point_master_plan ? "You know where to poke around, but not how or why, yet." : "You know how to sneak around, thanks to the master plan, but not where." ) )} ;
            : if (!think_healing_still) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_healing_still" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "With the chalice map handy as well as the master plan, you know what to look for and where. Plan keys can please, you think, as your trusty map exposes many a musty trap." ;
            : print "Of course, it takes a while to get there, as the stealing hill tends to look around a lot, but it gets distracted by other passers-by. Eventually you find the travel grail. But where can it take you?" ;
            : gosub "add_point" ;
            : set_true "point_healing_still" ;
            : set_false "think_healing_still" ;
            : destroy "chalice_map" ;
            : destroy "master_plan" ;
            : pocket "travel_grail" ;
            : update_graphic ;
         }
         : done ;
         }
      : if (!point_healing_still) {
         : match "healing _;_ still" {
            : set_boolean var = "already_got_command" {( think_healing_still && !point_healing_still )} ;
            : gosub "say_half" ;
         }
      }
      }
      on_pre_describe {
         : set_integer var="tempint" "7" ;
         : gosub "footnote_reveal" ;
      }
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   hub_w_n : location "{point_master_plan ? hub_w_master_plan : hub_w_plaster_man}" {
      on_command {
      : match "x plaster;x man" {
         : set_integer var="tempint" "13" ;
         : gosub "footnote_reveal" ;
         : print {( point_master_plan ? "Guess that fella did have something inside.{footnote_reveal_text}" : "The plaster man sits here, in a thinking pose. What thought or thoughts might be inside?{footnote_reveal_text}" )}
         : done ;
      }
      : match "talk plaster;talk man;talk -;listen -;listen plaster;listen man" {
         : if (!point_master_plan) {
            : print "The plaster man has secrets to divulge, but since he's inanimate, talking and listening isn't the way to go." ;
            : gosub "talk_flag" ;
         } : else {
            : print "That won't do much good now. Well, it wouldn't have done much good before you destroyed the plaster man and got something useful, either." ;
         }
         : done ;
      }
      : match "master plan" {
         : if (point_master_plan) {
            : print "You already got the master plan.";
            }
         : else_if ((!point_shift_goals || !point_hunters_grill) && (!cheat_dont_require)) {
            : print {( "You sort of hope there's a master plan inside the plaster man, but you're not sure. You sense " + (point_shift_goals ? "" : "you're not focused enough on being able to carry out a big plan" ) + (point_shift_goals || point_hunters_grill ? "" : ", and " ) + (point_hunters_grill ? "" : "you're not nourished enough to break him down" ) + "." )} ;
            : if (!think_master_plan) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_master_plan" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "You have reason to find a master plan, and your feast with the hunters has left you stronger. Without much trouble, you bust open the master plan and find it." ;
            : set_true "point_master_plan" ;
            : set_false "think_master_plan" ;
            : gosub "add_point_west" ;
            : gosub "hub_check_dependent" ;
            : destroy "meal_dude" ;
            : destroy "focus" ;
            : pocket "master_plan" ;
         }
         : done ;
         }
      : if (!point_master_plan) {
         : match "master _;_ plan" {
            : set_boolean var = "already_got_command" {( think_master_plan && !point_master_plan )} ;
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_ne : location "{point_chalice_map ? hub_w_chalice_map : hub_w_malice_chap}" {
      on_command {
      : match "talk _;listen _" {
         : gosub "hub_jerk" ;
         : print "\"I have something you want,\" says the {cc_malice_chap}. \"Not that you'll use it right, I bet. Still, you can try to beg it off me.\"" ;
         : done ;
      }
      : if (!point_chalice_map) {
         : match "x malice;x chap" {
            : set_integer var="tempint" "14" ;
            : gosub "footnote_reveal" ;
            : print "Fortunately, he's just kind of grinning nastily at you. As if to say he'd enjoy seeing you fail, but he won't actually move to another room to do so.{footnote_reveal_text}" ;
            : done ;
         }
      }
      : match "chalice map" {
         : if (point_chalice_map) {
            : print "You already got the chalice map from the malice chap.";
            : done ;
         }
         : print {( (think_chalice_map ? "The malice chap wags his finger again, sneering." : "To your surprise, the malice chap actually does pull out a chalice map, claiming he would use it, but he obviously has much better opportunities lined up, and if he can't figure out how to use it, you sure can't." ) )} ;
         : if ((!point_fellow_yield || !point_grim_tune) && (!cheat_dont_require)) {
            : print {( "You step back, " + (think_chalice_map ? "still " : "") + (confidence_meter == 1 ? "disoriented just enough" : "overwhelmed" ) + " by this display of arrogance." )} ;
            : print {( "Man, this guy's tough. But with " + (confidence_meter == 1 ? "a bit more" : "some serious" ) + " experience and confidence blowing off other belligerent types, perhaps you could outmaneuver him mentally." )} ;
            : if (!think_chalice_map) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_chalice_map" ;
            : gosub "note_think_command" ;
            : done ;
         }
         : print "You offer to relieve the malice chap of his chalice map. He looks at you like you're crazy. You mention he's probably had it a while and hasn't figured what to do with it. He mentions he's just had more valuable things to search for. But he might sell it. You, of course, don't have money." ;
         : print "But what you do have is confidence. And as annoying as he is, you realize you may be annoying him more. Especially when you start asking what he's searching for, and what he did to try to search for the map. You ask how he could have missed looking around the general area. You guilt-trip him by saying, why, there's a whole world to the northeast he can explore but you can't.";
         : print "He gets sick of you pretty quickly. \"Look, if it's really THAT important to you, have it. It'll be funny, thinking of how close you might be to your goal, but you'll still miss out. Because he's heard there are traps the map doesn't tell you how to get by.\"";
         : print "This doesn't faze you. You've internalized your confidence without realizing it. It's so internalized, it even, well, disappears from your inventory to make way for the chalice map." ;
         : set_true "point_chalice_map" ;
         : set_false "think_chalice_map" ;
         : gosub "add_point_west" ;
         : gosub "hub_check_dependent" ;
         : pocket "chalice_map" ;
         : destroy "confidence" ;
         : done ;
         }
      : if (!point_chalice_map) {
         : match "chalice _;_ map" {
            : set_boolean var = "already_got_command" {( think_chalice_map && !point_chalice_map )} ;
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_e : location "{point_fell_short ? hub_w_fell_short : hub_w_shell_fort}" {
      on_command {
      : if (point_fell_short) {
         : match "listen _;talk _" {
            : print "All quiet on the western hub front." ;
            : done ;
         }
      }
      : match "x shell;x fort" {
         : print {( point_fell_short ? "Silent now." : "Tough to approach with that artillerly landing too close to you." )} ;
         : done ;
      }
      : match "listen _;talk -;talk fort;talk shell" {
         : print "As ammunition whistles through the air, a truce parley doesn't seem likely. At least your assailants are inaccurate. But they're not giving up, as is." ;
         : done ;
      }
      : match "fell short" {
         : if (point_fell_short) {
            : print "You already managed to make the artillery miss you. No need to taunt.";
            }
         : else
         {
            : print "You believe in yourself and use the power of words to make the artillery fall short. The people inside give up on you. They have much easier targets.\nOh! And what did they leave behind? Some very, very sensible pacing rations. They taste bleah enough so you pace yourself eating them, but not so bleah they're inedible. You take them." ;
            : set_true "point_fell_short" ;
            : gosub "add_point_west" ;
            : gosub "hub_check_independent" ;
            : pocket "pacing_rations" ;
            : if (retry_racing_passions) {
               : print "{note_retry}<RACING PASSIONS<#f80>>." ;
            }
         }
         : done ;
         }
      : if (!point_fell_short) {
         : match "fell _;_ short" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_w_s : location "{point_take_crackers ? hub_w_take_crackers : hub_w_cake_trackers}" {
      on_command {
      : if (!point_take_crackers) {
         : match "talk trackers;listen trackers;talk -;listen -" {
            : gosub "talk_flag" ;
            : print "The cake trackers are too busy grumbling among themselves with \"Lack of pies? Pack of lies!\" and trying to find cake. They're oblivious to you. Perhaps you can sneak in and ..." ;
            : done ;
         }
         : match "x trackers" {
            : print "The trackers seem preoccupied with finding cake. So preoccupied, they may be foregtting something nice they already have." ;
            : done ;
         }
      }
      : match "take crackers" {
         : if (point_take_crackers) {
            : print "Don't get greedy! You have enough crackers.";
         }
         : else
         {
            : print "While the cake trackers aren't looking, you pinch a box of crackers. They don't notice at first, but when they fail to find any cake, they start getting mad and accusing each other." ;
            : set_true "point_take_crackers" ;
            : gosub "add_point_west" ;
            : gosub "hub_check_independent" ;
            : pocket "crackers" ;
         }
         : done ;
      }
      : match "take _" {
         : print {( "Not quite what you " + (point_take_crackers ? "needed" : "need") + " to {v_take} here." )} ;
         : done ;
      }
      : if (!is_carried "crackers") {
         : match "_ crackers" {
            : print "That's/Those are what you want, but what to do with it?" ;
            : done ;
         }
      }
      : if (!point_take_crackers) {
         : match "_ crackers" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_sw : location "{point_shift_goals ? hub_w_shift_goals : hub_w_gift_shoals}" {
      on_command {
      : if (!point_shift_goals) {
         : match "take gifts" {
            : print "You try, but they are too heavy to pick up." ;
            : done ;
         }
         : match "x gifts" {
            : print "There are so many! You don't know which you'd choose first. Their dazzling variety almost make you forget about your quest." ;
            : done ;
         }
      }
      : match "talk _;listen _" {
         : print {( point_shift_goals ? "The quiet is more peaceful now you've put the prospect of gifts aside. You don't want to disturb it." : "While the gifts seem to be calling to you, it'd feel weird to talk back." )} ;
         : done ;
      }
      : match "shift goals;shifting goals" {
         : if (point_shift_goals) {
            : print "But you don't want to shift your goals back." ;
            }
         : else_if ((!point_funny_mountain || !point_boring_way) && (!cheat_dont_require)) {
            : print {( "You'd like to shift your goals, but it's not as easy as just wanting to. Perhaps helping " + (point_funny_mountain || point_boring_way ? "more" : "some" ) + " other folks shift their goals to something better would give you enough resililence." )} ;
            : if (!think_shift_goals) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_shift_goals" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "You stop looking for something direct from the gift shoals. You begin, like, meditating and stuff. You gain general focus!" ;
            : set_true "point_shift_goals" ;
            : set_false "think_shift_goals" ;
            : destroy "peace_surging" ;
            : destroy "no_greed" ;
            : pocket "focus" ;
            : gosub "add_point_west" ;
            : gosub "hub_check_dependent" ;
         }
         : done ;
         }
      : if (!point_shift_goals) {
         : match "shift _;_ goals" {
            : set_boolean var = "already_got_command" {( think_shift_goals && !point_shift_goals )} ;
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_w_w : location "{point_hunters_grill ? hub_w_hunters_grill : hub_w_grunters_hill}" {
      on_command {
      : if (!point_hunters_grill) {
         : match "x hill;x grunter" {
            : print "The hill looks pretty normal, but boy, it sounds upset. Perhaps a happier or more social scenario can arise from all this." ;
            : done ;
         }
         : match "talk -;talk grunters;talk hills;listen -" {
            : gosub "talk_flag" ;
            : print "Your grunting skills are not up to scratch. You try again with actual words. Still, nothing. Perhaps there are other ways to bring out more than grunting from here." ;
            : done ;
         }
      } : else {
         : match "talk -;talk hunters; listen -" {
            : print "With the hunters long gone, the meal finished, and the hills no longer grunting, there's not much chance for meaningful interaction." ;
            : done ;
         }
      }
      : match "hunters grill" {
         : if (point_hunters_grill) {
            : print "But you already had enough of a feast. Any more, and you wouldn't be able to move around." ;
            }
         : else_if ((!point_take_crackers || !point_fell_short) && (!cheat_dont_require)) {
            : print {( "You try to start up a feast, but alas, you don't have " + ( (!point_take_crackers && !point_fell_short) ? "any food" : "enough food to do so. You need something besides the " + (point_take_crackers ? "crackers" : "pacing rations")) + "." )} ;
            : if (!think_hunters_grill) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_hunters_grill" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "You tell people to stop whining and start making a fire, or something. Your advice is so level-headed, it levels the hills into more level terrain!\nWhat's more, the grunters agree with you, especially when you show them your crackers and pacing rations. There's enough for everyone, with nothing left over." ;
            : set_true "point_hunters_grill" ;
            : set_false "think_hunters_grill" ;
            : destroy "pacing_rations" ;
            : destroy "crackers" ;
            : pocket "meal_dude" ;
            : gosub "add_point_west" ;
            : gosub "hub_check_dependent" ;
         }
         : done ;
         }
      : if (!point_hunters_grill) {
         : match "hunters _;_ grill" {
            : set_boolean var = "already_got_command" {( think_hunters_grill && !point_hunters_grill )} ;
            : gosub "say_half" ;
         }
      }
      }
      on_tick {
         : if (!apostrophe_warn) {
            : print "{note_once}Adventuron doesn't like apostrophes, so you don't want to use it here, even if it's in the description.";
            : set_true "apostrophe_warn" ;
         }
      }
   };
   hub_w_nw : location "{point_fellow_yield ? hub_w_fellow_yield : hub_w_yellow_field}" {
      on_command {
      : if (!point_fellow_yield) {
         : match "x fellow" {
            : print "He doesn't seem evil, but boy howdy is he complaining a lot." ;
            : done ;
         }
      }
      : match "talk _;listen _" {
         : gosub "hub_jerk" ;
         : print "The fellow just won't stop talking. Something about people not having the right to be happier, or less unhappy, than he is." ;
         : done ;
      }
      : match "fellow yield" {
         : if (point_fellow_yield) {
            : print "You feel no need to relive past victories." ;
            }
         : else_if ((!point_dirt_home || !point_bending_truth) && (!cheat_dont_require)) {
            : print {( "You'd like to convince the fellow to yield, but you " + (point_bending_truth ? "" : "don't feel slick enough") + ( point_bending_truth || point_dirt_home ? "" : ", and you ") + (point_dirt_home ? "" : "can't offer anything worth leaving this field for") + "." )} ;
            : if (!think_fellow_yield) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_fellow_yield" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "You take a balanced tone of friendship and defiance, explaining you saw this neat home just waiting for someone more worthy than you to occupy it. You're surprised how well it works, and you feel clever for having dealt with negativity." ;
            : set_true "point_fellow_yield" ;
            : set_false "think_fellow_yield" ;
            : destroy "fast_vision" ;
            : destroy "trial_pics" ;
            : gosub "add_point_west" ;
            : gosub "gain_confidence" ;
            : gosub "hub_check_dependent" ;
         }
         : done ;
         }
      : if (!point_fellow_yield) {
         : match "fellow _;_ yield" {
            : set_boolean var = "already_got_command" {( think_fellow_yield && !point_fellow_yield )} ;
            : gosub "say_half" ;
            }
         }
      }
   };

   hub_e_n : location "{point_fly_score ? hub_e_fly_score : hub_e_sky_floor}{footnote_reveal_text}" {
      on_pre_describe {
         : set_integer var="tempint" "10" ;
         : gosub "footnote_reveal" ;
      }
      on_command {
      : if (point_fly_score) {
         : match "x score;x fly" {
            : print "It's the tune inside you, too. You'll be able to carry it along." ;
            : done ;
         }
      } : else {
         : match "x sky;x floor" {
            : print "The sky floor makes you feel artsy." ;
            : done ;
         }
      }
      : match "talk _" {
         : print "Talking would disturb the poetic artsy feel here." ;
         : done ;
      }
      : match "listen _" {
         : print {( point_fly_score ? "You already have a tune inside you." : "You listen, not for words, but..." )} ;
         : done ;
      }
      : match "fly score" {
         : if (point_fly_score) {
            : print "You already imagined a fly score, but you recite it again, so you don't forget it." ;
            }
         : else
         {
            : print "The poetic nature of the sky floor embeds itself in your head, and you think up a tune you're surprised you were able to. You now have a low song running through your head. Where to release it?" ;
            : set_true "point_fly_score" ;
            : gosub "add_point_east" ;
            : gosub "hub_check_independent" ;
            : pocket "low_song" ;
            : if (retry_so_long) {
               : print "{note_retry}<SO LONG<#f80>>." ;
            }
         }
         : done ;
         }
      : if (!point_fly_score) {
         : match "fly _;_ score" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_e_ne : location "{point_bending_truth ? hub_e_bending_truth : hub_e_trending_booth}" {
      on_command {
      : match "talk _;listen _" {
         : if (!point_bending_truth) {
            : gosub "talk_flag" ;
         }
         : print {( point_bending_truth ? "Nothing to say or hear, but the quiet sure is nice." : "Talking and listening doesn't do much with headstrong folks like this. Maybe there's a way to call them out." )} ;
         : done ;
      }
      : match "x booth" {
         : set_integer var="tempint" "11" ;
         : gosub "footnote_reveal" ;
         : print {( (point_bending_truth ? "Empty now. Well, it was empty even when it wasn't empty." : "You don't want to get too close. You're not sure why the person in the booth is around. Don't they have anything better to do?") + "{footnote_reveal_text}" )}
      }
      : match "bending truth" {
         : if (point_bending_truth) {
            : print "You've seen through the trending booth's lies. Rehashing that sort of thing too much makes you go in circles." ;
            }
         : else
         {
            : print "You realize that the trending booth's Stone Cold Facts are ice-cold when it comes to universal truths. You take some time to pause and think how and why the overgeneralizations and out-of-context anecdotes and such are inaccurate. Yet you also realize there's a place for brevity and not having to explain every detail. Some of the rhetorical tricks coalesce into a fast vision -- it came to you so quickly, and it's going to stay!" ;
            : set_true "point_bending_truth" ;
            : pocket "fast_vision" ;
            : if (retry_vast_fission) {
               : print "{note_retry}<VAST FISSION<#f80>>." ;
            }
            : gosub "add_point_east" ;
            : gosub "hub_check_independent" ;
         }
         : done ;
         }
      : if (!point_bending_truth) {
         : match "bending _;_ truth" {
            : gosub "say_half" ;
         }
      }
      }
   };
   hub_e_e : location "{point_boring_way ? hub_e_boring_way : hub_e_warring_bay}{footnote_reveal_text}" {
      on_pre_describe {
         : set_integer var="tempint" "12" ;
         : gosub "footnote_reveal" ;
      }
      on_command {
      : if (!point_boring_way) {
         : match "x warring;x bay" {
            : print "They seem quite involved and focused, bonded by the excitement." ;
         }
      } : else {
         : match "x boring; x way" {
            : print "Pleasantly uninteresting, compared to what was here." ;
         }
      }
      : match "talk _;listen _" {
         : if (!point_boring_way) {
            : gosub "talk_flag" ;
         }
         : print {( point_boring_way ? "Nothing left to say or hear now that peace has broken out." : "Everyone fights among each other, and the yelling creates a feedback loop. You sense you talking will just inflame everyone more. How to get them to cool down?" )}
         : done ;
      }
      : match "boring way" {
         : if (point_boring_way) {
            : print "The way is now plenty boring. You don't want to risk dying of boredom after preventing so much death from war. That'd make for an embarrassing headstone!" ;
            }
         : else
         {
            : print "You somehow manage to get into the fighters' heads that it's not as exciting as it seems. At first they're mad, but after a while, they realize it's all for the best.\nYou feel peace surging within you. Peace may be boring, but then again, the excitement of war is draining." ;
            : set_true "point_boring_way" ;
            : gosub "add_point_east" ;
            : gosub "hub_check_independent" ;
            : pocket "peace_surging" ;
            : if (retry_cease_purging) {
               : print "{note_retry}<CEASE PURGING<#f80>>." ;
            }
         }
         : done ;
         }
      : if (!point_boring_way) {
         : match "boring _;_ way" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_se : location "{point_dirt_home ? hub_e_dirt_home : hub_e_hurt_dome}" {
      on_command {
      : match "talk _;listen _" {
         : print {( point_dirt_home ? "Everything is cozy and quiet and domesticated with no point disrupting things. I mean, it's a home, but it's not your homey." : "The hurt dome doesn't have anything mean to say to you, but you're sure it's THINKING that. How to neutralize its simmering rage?" )} ;
         : done ;
      }
      : match "dirt home" {
         : if (point_dirt_home) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "Poof! The hurt dome transforms into a dirt home. It looks like it needs a resident, but you're too busy, now. However, you take a set of trial pics left at the doorstep, which show the home in the best possible light." ;
            : pocket "trial_pics" ;
            : set_true "point_dirt_home" ;
            : gosub "add_point_east" ;
            : gosub "hub_check_independent" ;
         }
         : done ;
         }
         : if (!point_dirt_home) {
            : match "dirt _;_ home" {
               : gosub "say_half" ;
               }
            : match "x hurt;x dome" {
               : print "It's rather shiny, but the glare hurts a bit. You're not sure what it's upset about, but it could be more inviting, even if it were duller." ;
               : done ;
            }
         } : else {
            : match "x dirt;x home" {
               : print "Looks very cozy, but not quite for you." ;
               : done ;
            }
         }
      }
   };
   hub_e_s : location "{point_pouring_rain ? hub_e_pouring_rain : hub_e_roaring_pain}" {
      on_command {
         : match "talk _;listen _" {
            : print {( point_pouring_rain ? "The pouring rain is really poetic, and stuff. You sense talking would ruin things." : "You can't talk or listen normally with this roaring pain around. Perhaps it can become something more manageable." )} ;
            : done ;
         }
         : match "pouring rain" {
            : if (point_pouring_rain) {
               : print "You already found something less awful than roaring pain." ;
               }
            : else
            {
               : print "As your pain resides, you feel a drip from above. Then another. Then two, then four. Thank goodness for the shelter nearby! You sit there and find watching the rain surprisingly poetic. You feel something rise within you ... a soul full of rain or, more succinctly, a rain soul." ;
               : set_true "point_pouring_rain" ;
               : pocket "rain_soul" ;
               : if (retry_sane_role) {
                  : print "{note_retry}<SANE ROLE<#f80>>." ;
               }
               : gosub "add_point_east" ;
               : gosub "hub_check_independent" ;
            }
            : done ;
         }
         : if (!point_pouring_rain) {
            : match "pouring _;_ rain" {
               : gosub "say_half" ;
            }
            : match "x roaring;x pain" {
               : set_integer var="tempint" "13" ;
               : gosub "footnote_reveal" ;
               : print "Paying attention to the pain will just make it worse. Maybe it could be something less oppressive.{footnote_reveal_text}" ;
               : done ;
            }
         } : else {
            : match "x pouring;x rain" {
               : set_integer var="tempint" "13" ;
               : gosub "footnote_reveal" ;
               : print "You look to/at the rain for more poetic inspiration, but poetic inspiration doesn't quite work that way.{footnote_reveal_text}" ;
               : done ;
            }
         }
      }
   };
   hub_e_w : location "{point_funny_mountain ? hub_e_funny_mountain : hub_e_money_fountain}" {
      on_command {
      : if (point_funny_mountain) {
         : match "x funny;x mountain" {
            : print "You feel happier just looking at the mountain, but you do need to get on with things." ;
            : done ;
         }
      } : else {
         : match "x money;x fountain" {
            : print "You look in the fountain, totally not thinking about fishing loose change out. Nope, no {rttr}." ;
            : done ;
         }
         : match "take money;take fountain" {
            : print "Money won't do you good. You haven't found anyone to transact with that way." ;
            : done ;
         }
      }
      : match "talk _;listen _" {
         : gosub "talk_flag" ;
         : print {( point_funny_mountain ? "You can't really match the mountain's jokes, but you don't need to. You're happy enough." : "Denizens of the fountain don't seem to care about you. They just keep trying to fish money out of the fountain, which disappears." )} ;
         : done ;
      }
      : match "funny mountain" {
         : if (point_funny_mountain) {
            : print "You already changed the scenery here for the better. Making the mountain bigger might destabilize it." ;
            }
         : else
         {
            : print "Nothing happens at first. Then a slow rumbling. A small hill pokes through the ground, sending the money in the fountain everywhere. Outside of the fountain, the money flies into the mountain and helps enlarge it. There must be a lot of money in the fountain, because it takes a while. The resulting funny mountain is an improvement, though the scavengers don't think so. They leave in disgust. As they do, two smaller but approximately as funny mountains poke up and out, creating an even more pleasing landscape." ;
            : print "You think a bit and realize you feel no greed for the coins in the fountains, wherever they went to." ;
            : set_true "point_funny_mountain" ;
            : pocket "no_greed" ;
            : if (retry_grow_need) {
               : print "{note_retry}<GROW NEED<#f80>>." ;
            }
            : gosub "add_point_east" ;
            : gosub "hub_check_independent" ;
         }
         : done ;
         }
      : if (!point_funny_mountain) {
         : match "funny _;_ mountain" {
            : gosub "say_half" ;
            }
         }
      }
   };
   hub_e_nw : location "{point_grim_tune ? hub_e_grim_tune : hub_e_trim_goon}" {
      on_command {
      : if (point_grim_tune) {
         : match "x tune;x grim" {
            : print "It's yours. You're proud of it. You will remember it fondly through the rest of your quest." ;
            : done ;
         }
      } : else {
         : match "x goon;x trim" {
            : print "Not gonna beat the {cc_trim_goon} physically. Or with fear. Maybe some other emotion?" ;
            : done ;
         }
         : match "talk _;listen _" {
            : gosub "hub_jerk" ;
            : print "Negotiations don't exactly interest the {cc_trim_goon}. Perhaps there's a way to rattle the {cc_trim_goon} without quite talking." ;
            : done ;
         }
      }
      : match "grim toon" {
         : print "A cartoon duck pops up to call you despicable. Not quite the result you hoped for, but you must be close." ;
         : gosub "homonym_close" ;
      }
      : match "grim tune" {
         : if (point_grim_tune) {
            : print "You already thought up a grim tune. Any more, and you might be so depressed you forget what you wrote, or you wonder why even bother to share it." ;
            }
         : else_if ((!point_fly_score || !point_pouring_rain) && (!cheat_dont_require))
         {
            : print {( "A grim tune might be just the thing to repel the trim goon, but you can't build one. You'd need a combination of catchy music and lyrics. You have " + ( point_pouring_rain ? "lyrics" : point_fly_score ? "music" : "neither" ) + ", so far." )} ;
            : if (!think_grim_tune) {
               : increment "hub_think_needed" ;
            }
            : set_true "think_grim_tune" ;
            : gosub "note_think_command" ;
         }
         : else
         {
            : print "With a bit of thought, you see how the low song and rain soul hook together. Why didn't you see it before? The moment must not have been right." ;
            : print "It is now. The trim goon, on hearing the grim tone, displays a rush of discomfort with their lot in life. Don't they deserve more? They go off to join a pyramid scheme, in hopes of finding it. Unfortunately, they get fleeced by people more awful than they, but fortunately, they learn a lesson from it and dedicate the rest of their life to helping other people!" ;
            : print "Okay, not really. They just come back and mope about how society is out to get them. But that's actually better for society than before." ;
            : set_true "point_grim_tune" ;
            : set_false "think_grim_tune" ;
            : destroy "rain_soul";
            : destroy "low_song" ;
            : gosub "add_point_east" ;
            : gosub "gain_confidence" ;
            : gosub "hub_check_dependent" ;
         }
         : done ;
         }
      : if (!point_grim_tune) {
         : match "grim _;_ tune" {
            : set_boolean var = "already_got_command" {( think_grim_tune && !point_grim_tune )} ;
            : gosub "say_half" ;
            }
         }
      }
   };
   gravel_trail : location "This is a gravel trail running south back to the plain base and north {gravel_trail_house}{chimes_present}." {
      on_describe {
         : if (is_beside "hissing_mouse") {
            : print "A {cc_hissing_mouse} hisses here! It's not lethal, but it doesn't seem to belong here, and it's not happy about that." ;
         }
      }
      on_command {
         : if (is_beside("hissing_mouse")) {
            : match "x mouse;x hissing" {
               : set_integer var="tempint" "16" ;
               : gosub "footnote_reveal" ;
               : print "The mouse's hissing appears more defensive than anything. It makes you think \"Gray mouse may grouse.\"{footnote_reveal_text}" ;
               : done ;
            }
            : match "get mouse" {
               : print "Certainly not in its current agitated state." ;
               : done ;
            }
            : match "talk -;talk mouse" {
               : print "You couldn't understand each other's speech. But you do understand it's upset, and you want to fix that." ;
               : done ;
            }
            : match "listen _" {
               : print "The mouse almost sounds a bit defensive. But it's still agitated." ;
               : done ;
            }
         }

         : match "in *" {
            : if (point_missing_house) {
               : set_sentence "n" ;
            } : else {
               : print "There's nothing to go into. Yet." ;
               : done ;
            }
         }
         : match "missing house" {
            : if (point_missing_house) {
               : print "You already brought the house back." ;
            }
            : else {
               : print "BOOM! A missing house appears to the north. The mouse squeaks with joy and then goes and hides under it. And yet, it seems to wave at you before you enter, grateful not to be alone in the open." ;
               : set_true "point_missing_house" ;
               : destroy "hissing_mouse" ;
               : gosub "add_point" ;
               : update_graphic ;
            }
         }
         : if (!point_missing_house) {
            : match "missing _;_ house" {
               : gosub "say_half" ;
            }
         }
      }
   };
   my_house : location "MY HOUSE\n{my_house_description}" graphic = "my_house_graphic" {
      on_command {
         : match "eye stay;i stay" {
            : if (!bonus_point_eye_stay) {
               : print "You eye a stay, despite the poster's negative connotations. Looking closer, you see some complex origami can fold things so the poster, indeed, says I STAY. You have a chuckle. Why, of course you'll stay until you've completed your quest. But no more than that." ;
               : set_true "bonus_point_eye_stay" ;
               : set_integer var="tempint" "16" ;
               : update_graphic ;
               : gosub "add_bonus" ;
            } : else {
               : print "You stay staying, having already proclaimed you would eye a stay." ;
            }
         }
         : if (have_won && !bonus_point_eye_stay) {
            : match "eye _;i *;_ stay" {
               : gosub "say_half_b" ;
            }
         }
         : if (!point_see_glimmering || bonus_point_cheery_times) {
            : match "talk _;listen _" {
               : print "You have nobody to talk to right now. Well, you may need to say something specific, to let people in your, uh, my house." ;
               : done ;
            }
         }
         : match "x bookshelf;x book;x shelf" {
            : gosub "read_book" ;
         }
         : match "see glimmers;see glimmering" {
            : if (point_see_glimmering) {
               : print "You already found something unusual in the house. You need an assistant to look through it." ;
            }
            : else {
               : print "You remember what you came for. The {rttr}. Where could it be? Well, there are a lot of glimmering things, here. It would take you a while to search, especially since they are in odd corners. If only you had someone or something willing to help with the busy work!\nYou think you hear something new, too." ;
               : set_true "point_see_glimmering" ;
               : gosub "add_point" ;
               : update_graphic ;
            }
            : done ;
         }
         : if (!point_see_glimmering) {
            : match "see _;_ glimmering;_ glimmers" {
               : gosub "say_half" ;
            }
         }
         : match "hi mouse" {
            : if (point_see_glimmering) {
               : clear_screen ;
               : print "You call on the mouse, who seemed friendly and grateful you made it a home. It appears. You point to the glimmering." ;
               : press_any_key ;
               : print "The mouse uncovers a very small chest, which you, with your experienced adventuring prowess, know must be a tiny shrunk shiny trunk. But it is locked!" ;
               : update_graphic "tiny_shrunk_shiny_trunk" ;
               : press_any_key ;
               : print "There's still glimmering around, though, and the mouse dumps all sorts of things at your feet. Finally ... a key! And not just any key. You can tell it must be a costly lost key. You motion that the mouse can keep everything else. It scampers away gratefully." ;
               : update_graphic "costly_lost_key" ;
               : press_any_key ;
               : print "The moment of truth! CLICK. The key unlocks the trunk, leaving, of course ... the {rttr}!" ;
               : update_graphic "the_ring" ;
               : press_any_key ;
               : clear_screen ;
               : gosub "win_notes" ;
               : gosub "add_point" ;
               : set_false "think_hi_mouse" ;
               : set_true "point_hi_mouse" ;
               : gosub "track_achievements" ;
               : gosub "win_game_stub" ;
               : done ;
            }
            : else {
               : print "Hmm, it might be worth calling the mouse back to look around, but you don't have anything concrete for it to search. Maybe look around." ;
               : set_true "think_hi_mouse" ;
               : gosub "note_think_command" ;
            }
            : done ;
         }
         : match "hi _;high _;_ mouse" {
            : set_boolean var = "already_got_command" {( think_hi_mouse && !point_hi_mouse )} ;
            : gosub "say_half" ;
         }
      }
      on_describe {
         : if (achieve_nbbn && !note_book_reshuffle) {
            : print "{note_once}as a small bonus, the books in the bookshelf are different this time. I wasn't creative enough to do any more than that, but I hope you enjoy it, all the same. Thanks again for playing and replaying!" ;
            : set_true "note_book_reshuffle" ;
         }
      }
   }

   cht : location "This sets in_debug and cheat_dont_require. You need to L to go back where you were." {
      on_tick {
         : set_true "in_debug" ;
         : set_true "cheat_dont_require" ;
         : goto {( "" + previous_location() )} ;
      }
   }
};

# end locations

zones {
   zone_start : zone {
      locations = [ nameless_lameness, burst_face, first_base ]
   }
   zone_hubs : zone {
      locations = [ plain_base, west_tiles, east_branch, stealing_hill ]
   }
   zone_east_spokes : zone {
      locations = [ hub_e_n, hub_e_ne, hub_e_e, hub_e_se, hub_e_s, hub_e_w, hub_e_nw ]
   }
   zone_west_spokes : zone {
      locations = [ hub_w_n, hub_w_ne, hub_w_e, hub_w_s, hub_w_sw, hub_w_w, hub_w_nw ]
   }
   zone_endgame : zone {
      locations = [ gravel_trail, my_house ]
   }
}

# end zones

# connections between locations. There are warps for the first few areas, but after that, it's a pretty standard map.

connections {

   from, direction, to = [

      ## from plain base
      plain_base, northwest, west_tiles,
      plain_base, northeast, east_branch,

      ## two-way stuff first
      west_tiles, north, hub_w_n,
      west_tiles, northeast, hub_w_ne,
      west_tiles, east, hub_w_e,
      west_tiles, south, hub_w_s,
      west_tiles, southwest, hub_w_sw,
      west_tiles, west, hub_w_w,
      west_tiles, northwest, hub_w_nw,

      east_branch, north, hub_e_n,
      east_branch, northeast, hub_e_ne,
      east_branch, east, hub_e_e,
      east_branch, southeast, hub_e_se,
      east_branch, south, hub_e_s,
      east_branch, west, hub_e_w,
      east_branch, northwest, hub_e_nw,

      ## one-way / "exit" additional way out
      hub_w_n, leave_oneway, west_tiles,
      hub_w_ne, leave_oneway, west_tiles,
      hub_w_e, leave_oneway, west_tiles,
      hub_w_s, leave_oneway, west_tiles,
      hub_w_sw, leave_oneway, west_tiles,
      hub_w_w, leave_oneway, west_tiles,
      hub_w_nw, leave_oneway, west_tiles,

      hub_e_n, leave_oneway, east_branch,
      hub_e_ne, leave_oneway, east_branch,
      hub_e_e, leave_oneway, east_branch,
      hub_e_se, leave_oneway, east_branch,
      hub_e_s, leave_oneway, east_branch,
      hub_e_w, leave_oneway, east_branch,
      hub_e_nw, leave_oneway, east_branch,

      ## Stealing Hill bending paths
      east_branch, up_oneway, stealing_hill,
      west_tiles, up_oneway, stealing_hill,
      stealing_hill, west_oneway, west_tiles,
      stealing_hill, east_oneway, east_branch,

      ## endgame stuff
      plain_base, north, gravel_trail,
      gravel_trail, north, my_house,
      my_house, leave_oneway, gravel_trail

   ]
}

barriers {
   block_hub_w_n : block {
      location = hub_w_n
      block_when = point_master_plan
      message = You got the master plan, so you don't really need to go back north.
   }
   block_hub_w_ne : block {
      location = hub_w_ne
      block_when = point_chalice_map
      message = You got the chalice map, so you don't really need to go back northeast.
   }
   block_hub_w_e : block {
      location = hub_w_e
      block_when = point_fell_short
      message = You dismantled the shell fort, so you don't need to go back east.
   }
   block_hub_w_s : block {
      location = hub_w_s
      block_when = point_take_crackers
      message = You already got some crackers from the cake trackers. There can't be anything more back south.
   }
   block_hub_w_sw : block {
      location = hub_w_sw
      block_when = point_shift_goals
      message = With your goals shifted, you've gotten all the mindfulness or whatever you need from the shoals to the southwest.
   }
   block_hub_w_w : block {
      location = hub_w_w
      block_when = point_hunters_grill
      message = You helped the hunters fire up their grill. There's nothing really left to do to the west.
   }
   block_hub_w_nw : block {
      location = hub_w_nw
      block_when = point_fellow_yield
      message = You got the fellow to yield in the yellow field, which was pretty barren otherwise. So you don't need to go back northwest.
   }

   block_hub_e_n : block {
      location = hub_e_n
      block_when = point_fly_score
      message = You don't feel as though the sky/floor to the north has anything more to offer you, with the fly score stuck in your head. Well, maybe you can go back for new artistic inspiration, after you completed the quest for Thor.
   }
   block_hub_e_ne : block {
      location = hub_e_ne
      block_when = point_bending_truth
      message = You already bent the truth a bit to the northeast. You don't want to do too much of that sort of thing. At least, I hope you don't.
   }
   block_hub_e_e : block {
      location = hub_e_e
      block_when = point_boring_way
      message = You cooled off the warring bay to the east. While you wouldn't die of boredom in the now-boring way to the east, hanging around there wouldn't get you any closer to your goals.
   }
   block_hub_e_se : block {
      location = hub_e_se
      block_when = point_dirt_home
      message = You changed the hurt dome to a dirt home. You can't think of anything else you need to do to the southeast.
   }
   block_hub_e_s : block {
      location = hub_e_s
      block_when = point_pouring_rain
      message = You changed the roaring pain to pouring rain. You really can't see any reason to go get soaked more do to the south.
   }
   block_hub_e_w : block {
      location = hub_e_w
      block_when = point_funny_mountain
      message = You changed the funny mountain to a money fountain. You can't think of anything else you need to do to the west.
   }
   block_hub_e_nw : block {
      location = hub_e_nw
      block_when = point_grim_tune
      message = You chased the trim goon with a grim tune. You can't think of anything else you need to do to the northwest.
   }
   block_stealing_hill: block {
      location = stealing_hill
      block_when = hill_aware_you_stole
      message = {stealing_hill_mad}
   }
   block_gravel_trail: block {
      location = gravel_trail
      block_when_not = can_enter_trail
      message = Thor looks over. "Perhaps there'll be something there, but you'll need to use a magic object right to see the way through."
   }
   block_my_house: block {
      location = my_house
      block_when_not = point_missing_house
      message = The {cc_hissing_mouse} guards the way. Besides, there's nothing there. Well, not yet.
   }
}

# end connections

# subroutines are generally organized alphabetically, but INIT comes first

subroutines {
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : print "Submitted for the 2025 {TALJ} (Text Adventure Literacy Jam)." ;
   : press_any_key ;
   : if (have_won) {
      : gosub "bonus_read_from_survivors" ;
      : gosub "footnote_read_from_survivors" ;
      : if (!footnote_nag) {
         : print "Because you won at least once, footnotes are available, and you will skip over the initial menu choices for tutorials or colored text hints. They can still be set with {opt_tutorial} and {opt_ch}.";
         : set_true "footnote_nag" ;
         : press_any_key ;
      }
   }
   : clear_screen ;
   : gosub "init_stats" ;
   }
   init_check : subroutine {
      : if (collection_count("footnote_finding_list") != collection_count("footnote_hinting_list")) {
         : print "WARNING footnote finding list length != footnote hinting list length!" ;
      }
      : if (collection_count("footnote_finding_list") != collection_count("footnote_status_list")) {
         : print "WARNING footnote finding list length != footnote status list length!" ;
      }
      : if (collection_count("footnote_finding_list") != collection_count("footnote_text_list")) {
         : print "WARNING footnote finding list length != footnote hinting text length!" ;
      }
   }
   init_stats : subroutine {
      : set_stat stat = "stat_talkflag" target = "first_base" value = "1";
      : set_stat stat = "stat_talkflag" target = "plain_base" value = "2";
      : set_stat stat = "stat_talkflag" target = "hub_w_n" value = "4";
      : set_stat stat = "stat_talkflag" target = "hub_w_ne" value = "8";
      : set_stat stat = "stat_talkflag" target = "hub_w_s" value = "16";
      : set_stat stat = "stat_talkflag" target = "hub_w_w" value = "32";
      : set_stat stat = "stat_talkflag" target = "hub_w_nw" value = "64";
      : set_stat stat = "stat_talkflag" target = "hub_e_ne" value = "128";
      : set_stat stat = "stat_talkflag" target = "hub_e_e" value = "256";
      : set_stat stat = "stat_talkflag" target = "hub_e_w" value = "512";
      : set_stat stat = "stat_talkflag" target = "hub_e_nw" value = "1024";
   }

   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>" ;
      }
      : increment "score" ;
      }
   add_point_west : subroutine {
      : increment "points_left_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_point_east : subroutine {
      : increment "points_right_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : set_true "score_bonus_nag" ;
         : print "<You just found a bonus point!<6>>" ;
         : if (bonus_score == 0) {
             : print "{note_once}{qt} contains several bonus points that are uncued. {vd_sco} will let you know how many you've found, and {vd_bon} will list where you found them." ;
         }
      }
      : decrement "tempint" ; # this is because I use 1-based numbers in my personal table, but Adventuron is 0-based.
      : collection_modify { collection = "bonus_status" index -> (tempint) content -> ("1") }
      : increment "bonus_score";
      : if (current_location() == "west_tiles") {
         : set_true "ach_roer_west" ;
      } : else_if (current_location() == "east_branch") {
         : set_true "ach_roer_east" ;
      } : else_if (current_location() == "plain_base") {
         : set_true "ach_roer_base" ;
      }
   }
   bonus_display : subroutine {
      : if (bonus_score == max_bonus_score && !bonus_max_warn) {
         : print "{note_once}you got all the bonus points. Congratulations! {vd_bon} is no longer useful, though if you wish to see the list again after this nag, {vd_bon} will revert to its regular behavior, so you can see everything you've found. (Enjoy it. You've earned it!)" ;
         : set_true "bonus_max_warn" ;
         : return ;
      }
      : if (bonus_score == 0) {
         : print "You haven't got any bonus points yet. Once you find one, you will get a numbered list." ;
         : return ;
      }
      : clear_screen ;
      : print "{bflist}" ;
      : set_integer var="tempint" "0" ;
      : collection_iterate "bonus_found_text" {
         : set_integer var="tempint2" {( int(collection_get{ collection -> ("bonus_status") index -> ( tempint ) }) )} ;
         : if (tempint2 > 0) {
            : print {("" + (tempint + 1) + ". " + item())}
         } : else {
            : print {( "" + (tempint + 1) + ". " + (collection_get{ collection -> ("bonus_not_found_text") index -> ( tempint ) }) )} ;
         }
         : increment "tempint" ;
      }
      : set_true "ever_bonus" ;
      : gosub "color_check_bf" ;
      : gosub "color_check_bfa" ;
   }
   brief_hill_mad : subroutine {
      : update_graphic "stealing_hill_finds" ;
      : press_any_key ;
      : update_graphic ;
   }
   thor_on_seth : subroutine {
      : if (!thor_explained_seth) {
         : print "Beery Thor casually mentions it'd be nice if Seth Denton's disappeared, but not critical. The ring's not there, but if it was, he would've taken care of things, already." ;
         : set_true "thor_explained_seth" ;
         }
      }
   ask_thor_debug : subroutine {
      : print "Results of debug command checking how many times the player asked:" ;
      : collection_iterate "ask_list" {
            : print {( "" + item() )} ;
      }
      : done;
   }
   ask_thor_next_guess : subroutine {
      : set_integer var="tempint" "0";
      : set_integer var="tempint2" "3";
      : set_true "tempbool" ;
      : collection_iterate "ask_list" {
         : increment "tempint" ;
         : if (int(item()) == 0) {
            : print "You haven't asked Thor at all about rule {tempint} yet." ;
            : done ;
         } : else {
         }
         : if (int("" + item()) < int("" + tempint2)) {
            : set_integer var="rule_chosen" {( int("" + tempint) )} ;
            : set_integer var="tempint2" {( int("" + item()) )} ;
            : set_false "tempbool" ;
         } : else {
         }
      }
      : if (!tempbool) { } # this looks like a bug in Adventuron, that Adventuron needs this.
      : if (tempbool) {
         : print "You have asked three times about everything!" ;
      } : else {
         : print "You haven't looked fully at rule {rule_chosen} yet." ;
      }
      : done ;
   }
   ask_thor_tally : subroutine {
      : decrement "tempint" ;
      : set_integer var="tempint2" {( int(collection_get{ collection -> ("ask_list") index -> ( tempint ) }) + 1 )} ;
      : if (tempint2 > 4) {
         : set_integer var="tempint2" value="4";
      }
      : collection_modify { collection = "ask_list" index -> (tempint) content -> ("" + tempint2) }
      : if (tempint2 == 3 && ! have_asked_three) {
         : set_true "have_asked_three";
         : print "{note_once}the up-arrow on your keyboard will show your previous command. This is useful for if you typed something wrong, or you want to see what you did, or you typed the right thing at the wrong time and want to save keystrokes. Or, here, you can just adjust the number at the end." ;
      }
      : else_if (tempint2 == 4 && ! have_asked_four) {
         : set_true "have_asked_four";
         : print "{note_once}I'll have to ask for some suspension of disbelief, here. Thor's responses for each rule come in cycles of three, the exact same thing every time, and fortunately, unlike us mortals, he never gets bored." ;
      }
      : done ;
   }
   ask_thor : subroutine {
      : if (!talked_to_thor) {
         : print "You should {v_talk} to Thor to introduce yourself before interrogating him." ;
         : done ;
      }
      : if (!is_int(original "noun1")) {
         : match "ask -" {
               : gosub "ask_thor_next_guess" ;
         }
         : print "{v_ask}ing Thor requires a number from 1-17, with no extra text. Zero checks what you've asked so far." ;
         : done ;
      }
      : gosub "int_from_noun1" ;
      : if (tempint == 18 && in_debug) {
         : gosub "ask_thor_debug" ;
      }
      : if (tempint == 0) {
         : gosub "ask_thor_next_guess" ;
      }
      : if (tempint < 1 || tempint > 17) {
         : print {( "\"There are only {y17} total {v_rule}s, so just {v_ask} about any one from one to {y17}. There are no secret numbers, either, though zero cues what to ask next." + (ask_thor_misfire ? "" : " Still, trying out-of-the-way stuff is always worth a try for the clever adventurer.") + "\"" )} ;
         : set_true "ask_thor_misfire" ;
         : done ;
      }
      : else_if (tempint == 1) {
         : cycle key = "rule_1" predictable_order = "true" skip_interval = "0" {
            : print "\"The first rule in Graham Nelson's Player's Bill of Rights is <not to be killed without warning<#f88>>.\"" ;
            : print "\"This can refer to rooms you step into that just kill you. Even with <UNDO<#f80>> available, they're still a pain and can interrupt the flow of the game. Of course, there are exceptions. Groundhog Day style games where you learn more with each death can be very intricate and well-received.\"" ;
            : print {( "\"Here, there" + ((bonus_point_death_sentence) ? "was" : "'s") + " only one way to potentially die, and even that, well, it's lampshaded or explained.\"" )} ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 2) {
         : cycle key = "rule_2" predictable_order = "true" skip_interval = "0" {
            : print "\"The second rule in Graham Nelson's Player's Bill of Rights is <not to be given horribly unclear hints<#f88>>.\"";
            : print "\"There's a delicate balance, of course. It's fun to be able to solve tricky hints, and it's boring if they're too easy. And it's fun for a player to laugh at themselves realizing they missed a hint in plain sight. But sometimes even something that works well and seems simple when it's done requires a lot of fiddling from the author.\"" ;
            : print "\"Here hopefully the pattern of spoonerisms is established. The author tried to throw out a few in descriptions. There's a worry they may be stale if they go on too long.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 3) {
         : cycle key = "rule_3" predictable_order = "true" skip_interval = "0" {
            : print "\"The third rule in Graham Nelson's Player's Bill of Rights is <to be able to win without the experience of past lives<#f88>>.\"" ;
            : print "\"This can overlap with rule 1 about not getting killed unfairly, and while Groundhog Day games are a thing, that sort of exception may prove the rule. You're generally in a tight loop to start. Then the world expands as you learn more. This isn't just about death, though. Say you have a timed maze where you need to get through in X steps without a map, but you can't go down any dead ends. That creates a lot of busy work which shortly stops feeling like a game.\n\"An exception may be a game where you survive but lose contact with friends (a neutral ending,) and then you piece things together to escape with all your friends. Good-better-best endings are common and add depth to a game. But they should only be there if the player wants more.\"" ;
            : print "\"The author likes to wimp out about this by allowing only joke deaths, or having a MISSED option in Inform for bonus points (for Adventuron, he's still learning!) And of course, if a puzzle is too hard, this rule is less important (The author's done that to players!)\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 4) {
         : cycle key = "rule_4" predictable_order = "true" skip_interval = "0" {
            : print "\"The fourth rule in Graham Nelson's Player's Bill of Rights is <to be able to win without the knowledge of future events<#f88>>.\"" ;
            : print "\"This ties into being able to win without the experience of past lives. But again there are exceptions, such as where you play as different people and piece together what actually happened.\"" ;
            : print "\"The author avoids this by going in for abstract puzzle-fests. Yet it's sort of neat to have surprises thrown in the way. Just make them surmountable.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 5) {
         : cycle key = "rule_5" predictable_order = "true" skip_interval = "0" {
            : print "\"The fifth rule in Graham Nelson's Bill of Rights is <not to have the game closed off without warning<#f88>>.\"" ;
            : print "\"This means more than just not having the game shut down. It means you shouldn't have something arbitrary put it in a non-winnable state. But if, say, you are wearing a watch and need to do something by 10:30 PM, that is permissible. Whether or not these constraints are fair goes beyond the basic bill of rights.\"";
            : print "\"Of course, certain fun minor things may be closed off. Here, there were two bonus points in First Base. {ask_5_notes}.\nAnd while there's a special accomplishment for getting all bonus points, missing either doesn't impact your main quest, finding the {rttr}.\"" ;
         }
         : set_integer var="tempint" "5" ;
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 6) {
         : cycle key = "rule_6" predictable_order = "true" skip_interval = "0" {
            : print "\"The sixth rule in Graham Nelson's Player's Bill of Rights is <not to have to do unlikely things<#f88>>.\"" ;
            : print "\"Of course, in some of the most fun games you do generally unlikely things in real life. But if you veer from swordfights to having to derive the cubic formula, well, that is not so easy to believe.\"" ;
            : print "\"Here, you are constantly doing unlikely things, but they're all related. So hopefully it all makes sense in the small world created here.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 7) {
         : cycle key = "rule_7" predictable_order = "true" skip_interval = "0" {
         : print "\"The seventh rule in Graham Nelson's Player's Bill of Rights is <not to need to do boring things for the sake of it<#f88>>.\"" ;
         : print "\"This was less of a worry when there were fewer games to play, and fewer games to fall back on and compare to, so even the busy work seemed new. But with time, there are certain puzzles everyone groans when they see, even if they were neat the first time: wolf/goat/cabbage, 5- and 4- and 3-liter jugs, Towers of Hanoi. Mazes are a 'favorite,' too, though authors have found many ways to subvert this nuisance or provide a reasonable way to jump through the maze.\"" ;
         : print "\"Here the author realized having too many spoonerisms might ruin things. In fact, the original leadup to here had some buffer puzzles which were just me leading you on. I had a word with him.\"" ; ## put in footnote ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 8) {
         : cycle key = "rule_8" predictable_order = "true" skip_interval = "0" {
            : print "\"The eighth rule in Graham Nelson's Player's Bill of Rights is <not to have to type exactly the right verb<#f88>>.\"" ;
            : print "\"It's frustrating to have PUT X IN Y fail only to realize you needed to INSERT X IN Y. That's a problem with parsers that accept a lot of words. They may expect exact ones, or they may allow synonyms, and it's tough for the player to decipher.\"" ;
            : print "\"Since parsers are no longer shiny and new, and we aren't blown away with being able to type stuff in and get a response, people have seen the advantage of a simplified parser. But authors can also put in notes to direct a player to a good common verb. Or a {vm_verbs} command lists all the verbs, and it's pretty clear which to use. USE X ON Y can even be a blanket solution, though it's not terribly evocative.\n\"So taken at face value, {qt} fails this rule miserably. You need the right pair of words, and they don't generally fall in the standard set of parser verbs. But on the other hand, they're clued pretty strongly. This is one of those cases where the author thinks or at least hopes he broke a rule judiciously to provide a new interesting experience. All authors need to, sometimes.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 9) {
         : cycle key = "rule_9" predictable_order = "true" skip_interval = "0" {
         : print "\"The ninth rule in Graham Nelson's Player's Bill of Rights is <to be allowed to try reasonable synonyms<#f88>>.\"" ;
         : print "\"This should apply to verbs and nouns. Parser command abbreviations over the years have made this easier. Conventions have settled on I for inventory and X for examine, and one- or two-letter abbreviations for directions. Many games use custom abbreviations for verbs they have the player use a lot.\nMore commonly, Inform allows for pronouns, and MAN might be a synonym for SORCERER and WOMAN for SORCERESS, and so forth. NEWS and PAPER could cue NEWSPAPER. It's fun to be able to type things out if you want, but it shouldn't be a chore.\"" ;
         : print "\"There are a few synonyms in this game, but because of the oddness of the items, there's not too much that can be done. {qt} also short-circuits this by not making you use many items explicitly.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 10) {
         : cycle key = "rule_10" predictable_order = "true" skip_interval = "0" {
         : print "\"The tenth rule in Graham Nelson's Player's Bill of Rights is <to have a decent parser<#f88>>.\"" ;
         : print "\"This rule may have evolved since the initial document to read: to have the game use the parser judiciously. There's a certain thrill in writing your own parser for your own game and programming neat side verbs, but it does not always rub off on players. For instance, a vastly different response for SEARCH and EXAMINE may frustrate players.\nOne thing that helps provide a buffer is a {vm_verbs} command, so they know how much they need to focus on the right word. I've enjoyed games where you LOOK BEHIND and LOOK UNDER, and the right one is based on the object. But this was prompted by {vm_verbs}.\"" ;
         : print "\"I used Adventuron's simplified two-word parser. I didn't need any complex actions, so it worked well.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 11) {
         : cycle key = "rule_11" predictable_order = "true" skip_interval = "0" {
         : print "\"The eleventh rule in Graham Nelson's Player's Bill of Rights is <to have reasonable freedom of action<#f88>>.\"" ;
         : print "\"Sometimes having too much to do is confusing, but sometimes not being able to do something indicated (e.g. X SCENERY) is annoying to the player.\"" ;
         : print "\"Well, there aren't a ton of verbs implemented, and the first bit was on rails, but I wanted to open it up and have something to do right away in the main area.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 12) {
         : cycle key = "rule_12" predictable_order = "true" skip_interval = "0" {
         : print "\"The twelfth rule in Graham Nelson's Player's Bill of Rights is <not to depend too much on luck<#f88>>.\"" ;
         : print "\"It's difficult, of course. If there is no luck, a game may not be replayable. And it can be fun to strategize to lessen bad luck.\"" ;
         : print "\"In {qt}, there's no luck whatsoever. Which means that one time through may be enough, though {qt} does have bonus points and achievements to hunt down. But only if you're interested.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 13) {
         : cycle key = "rule_13" predictable_order = "true" skip_interval = "0" {
         : print "\"The thirteenth rule in Graham Nelson's Player's Bill of Rights is <to be able to understand a problem once it is solved<#f88>>.\"" ;
         : print "\"Of course, problems you've seen before aren't fun to solve. And being pushed to make that leap of logic without a spoiler is very gratifying. The player has a right to feel accomplished.\"" ;
         : print "\"Well, in a one-trick pony adventure like this, \"understand it once it's solved\" is not really a problem. Of course, a problem from the other side is that the player says yeah, yeah, I get it, already, before tuning out.\"" ;
         }
         : gosub "ask_thor_tally" ;
         : return ;
      }
      : else_if (tempint == 14) {
         : cycle key = "rule_14" predictable_order = "true" skip_interval = "0" {
         : print "\"The fourteenth rule in Graham Nelson's Player's Bill of Rights is <not to be given too many red herrings<#f88>>.\"" ;
         : print "\"A too on-rails game is boring. It's fun to have those side ventures. But they can be inane, or they can make the player worry they missed something.\"" ;
         : print "\"Here, well, there are a few bonus points I hope you enjoy, and for those who enjoy hunting down footnotes and achievements, I have them too. Do as much or as little as you want.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 15) {
         : cycle key = "rule_15" predictable_order = "true" skip_interval = "0" {
         : print "\"The fifteenth rule in Graham Nelson's Player's Bill of Rights is <to have a good reason why something is impossible<#f88>>.\"" ;
         : print "\"Parsers, since you can type anything in, give you the feeling anything should be possible. But one doesn't have the time to implement everything. So there are some barriers required to say: this standard verb isn't really relevant here.\"" ;
         : print "\"{qt} isn't a terribly ambitious game interactivity-wise. But of course we still need to tell you why you can't eat something right now, or whatever. And hopefully if you run into a puzzle where you have the right phrase, the reject makes some sense.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 16) {
         : cycle key = "rule_16" predictable_order = "true" skip_interval = "0" {
         : print "\"The sixteenth rule in Graham Nelson's Player's Bill of Rights is <not to need to be American<#f88>>.\"" ;
         : print "\"This was one of the more controversial rules, as the definition is not very exact. But of course, it's not just about being American. Needing to know obscure stuff specific to any culture or trivia might make it hard for people to enjoy things fully, even if along the way you learn interesting things about a culture or hobby.\"" ;
         : print "\"For {qt}, there's a slang word or two here that originate in the US, but the hope is, it is logical with only so many possible misspellings.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : else_if (tempint == 17) {
         : cycle key = "rule_17" predictable_order = "true" skip_interval = "0" {
         : print "\"The {y17}th rule in Graham Nelson's Player's Bill of Rights is <to know how the game is getting on<#f88>>.\"" ;
         : print "\"Progress tracking with points is a staple of text adventures, but it can feel a bit artificial and distracting to look up, even if the score is in the upper right. But a murder mystery may ask you for five pieces of evidence, or you may know a mansion has three stories and you've only visited one.\"" ;
         : print "\"Here, I tried to give an idea of progress by closing off hub areas as you found them.\"" ;
         }
         : gosub "ask_thor_tally" ;
      }
      : print "I missed a case for asking Thor. This should never happen. It's a bug." ;
   }
   color_check_bf : subroutine {
      : if (bf_color_note) {
         : return ;
      }
      : if (ever_bonus && ever_footnote) {
         : print "{note_once}{vd_bon} and {vd_fn} both follow the same color-coding scheme." ;
         : set_true "bf_color_note" ;
      }
   }
   color_check_bfa : subroutine {
      : if (bfa_color_note) {
         : return ;
      }
      : if (!ever_achievement) {
         : return ;
      }
      : if (ever_bonus || ever_footnote) {
         : print "{note_once}{vd_ach} follows different color-coding from {vd_bon} and {vd_fn}, since it requires more wide-ranging actions." ;
         : set_true "bfa_color_note" ;
      }
   }

   check_pcpc_achievement : subroutine {
      : if (pcpc_tile && pcpc_pile) {
         : print "You look towards the fourth wall again. No bonus points? Sadly, no. But an achievement, for thoroughly and observantly inspecting the trial pics. A care plan awaits, on solving this quest!" ;
         : set_true "achieve_pcpccp_pre" ;
      } : else {
         : print "You look towards the fourth wall. It's a good spoonerism, right? Isn't a bonus point in order? Apparently, you need to do a little more, if you're into that sort of thing." ;
      }
   }
   evaluate_warp : subroutine {
      : if (latest_warp_number == -2) {
         : set_integer var = "latest_warp_number" "-1";
         : return ;
      }
      : if (latest_warp_number == -1) {
         : collection_clear "jump_order_list" ;
         : return ;
      }
      : set_integer var = "tempint" {( collection_count("jump_order_list") )} ;
      : collection_push { collection = "jump_order_list" content -> ("" + latest_warp_number) }
      : if (collection_count("jump_order_list") == tempint) {
         : collection_clear "jump_order_list" ;
         : set_integer var = "latest_warp_number" "-3" ;
         : return ;
      }
      : if (collection_count("jump_order_list") == 12) {
         : set_true "achieve_cddc_pre" ;
         : return ;
      }
   }
   footnote_lister : subroutine {
      : print "{bflist}" ;
      : set_integer var = "tempint" "0";
      : collection_iterate "footnote_finding_list" {
         : set_integer var="tempint2" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( tempint ) }) )} ;
         : if (tempint2 > 0) {
            : print {("" + (tempint + 1) + ". " + item() + (tempint2 == 1 ? " (found, unread)" : "") )}
         } : else {
            : print {( "" + (tempint + 1) + ". (not found) " + (collection_get{ collection -> ("footnote_hinting_list") index -> ( tempint ) }) )} ;
         }
         : increment "tempint" ;
      }
      : set_true "ever_footnote" ;
      : gosub "color_check_bf" ;
      : gosub "color_check_bfa" ;
      : done ;
   }
   footnote_printer : subroutine {
      : if (!is_int(original "noun1")) {
         : print "Footnotes require a number. If you wish to list which footnotes you've found, type {vd_f0}." ;
         : done ;
      }
      : gosub "int_from_noun1" ;
      : if (tempint == 0) {
         : gosub "footnote_lister" ;
         : done ;
      }
      : if (tempint > collection_count("footnote_status_list") || tempint < 0) {
         : print {( "Footnotes must be between 1 and " + collection_count("footnote_status_list") + ", though 0 gives a list of what you've found." )} ;
         : done ;
      }
      : if (!cheat_dont_require && int(collection_get{ collection -> ("footnote_status_list") index -> ( tempint - 1)}) == 0 ) {
         : print "You haven't revealed footnote {tempint} yet." ;
         : done ;
      }
      : print {( collection_get{ collection -> ("footnote_text_list") index -> (tempint - 1) } )} ;
      : collection_modify { collection = "footnote_status_list" index -> (tempint - 1) content -> ("2") }
   }
   footnote_reveal : subroutine {
      : if (!have_won) {
         : return ;
      }
      : if (tempint == 0) {
         : return ;
      }
      : set_integer var="tempint2" {( int(collection_get{ collection -> ("footnote_status_list") index -> (tempint - 1) }) )} ;
      : set_false "reveal_this_footnote" ;
      : if (tempint2 > 0) {
         : return ;
      }
      : set_true "ever_reveal_footnote" ;
      : set_true "reveal_this_footnote" ;
      : collection_modify { collection = "footnote_status_list" index -> (tempint - 1) content -> ("1") ; }
   }
   footnote_hub_history : subroutine {
      : if ((!have_won) || (history_footnote_found)) {
         : return ;
      }
      : if ((!has_visited "west_tiles") || (!has_visited "east_branch")) {
         : return ;
      }
      : set_integer var="tempint" "6" ;
      : gosub "footnote_reveal" ;
      : print "For some history on both West Tiles and East Branch, look at {footnote_reveal_text}." ;
      : set_true "history_footnote_found" ;
   }
   footnote_endgame_check : subroutine {
      : collection_iterate "footnote_status_list" {
         : if (int(item()) == 0) {
            : print "You haven't unlocked the {achievement_tnnt} achievement yet." ;
            : return ;
         } : else {
         }
      }
      : set_true "achieve_tnnt" ;
      : print "For uncovering all the footnotes available, you win the {achievement_tnnt} achievement!" ;
   }
   gain_confidence : subroutine {
      : print {( "You gain " + (confidence_meter > 0 ? "even more " : "") + "confidence from this small contretemps." )};
      : increment "confidence_meter" ;
      : pocket "confidence" ;
      : return ;
   }
   homonym_close : subroutine {
      : if (!note_homonym) {
         : print "{note_once}you're really close to a point you need. When this happens, you should always get a hopefully amusing response that indicates such. There's no reward for finding them all, though, other than your own amusement." ;
         : set_true "note_homonym" ;
      }
   }
   hub_check_dependent : subroutine {
      : if (!note_dependent_point) {
         : set_true "note_dependent_point" ;
         : print "{note_once}solving puzzles that depend on others, like this one, will cause an inventory shuffle. You will lose an item or two but gain one." ;
      }
   }
   hub_check_independent : subroutine {
      : if (!note_independent_point) {
         : set_true "note_independent_point" ;
         : print "{note_once}every critical puzzle you solve here will add an item to your inventory, which will be used implicitly when solving another puzzle. It's not critical to see what they are, but {vd_i} may offer clues where to go next." ;
      }
   }
   hub_jerk : subroutine {
      : if ((is_at("hub_w_nw") && point_fellow_yield) || (is_at("hub_w_ne") && point_chalice_map) || (is_at("hub_e_nw") && point_grim_tune)) {
         : print "There's no chance or need for chat after your little nonviolent victory." ;
         : done ;
      }
      : gosub "talk_flag" ;
   }
   item_based_points : subroutine {
      : if (is_carried "no_greed") {
         : match "grow need" {
            : if (bonus_point_grow_need) {
               : print "You already grew the right need." ;
            } : else {
               : print "Not wanting anything is proof you have no greed, right? It's proof of super virtue? Well, yes and no. It also means you are not trying anything more. So you think of needs to grow, not for power or fame or wealth, but stuff that can help others." ;
               : set_true "bonus_point_grow_need" ;
               : set_false "retry_grow_need" ;
               : set_integer var="tempint" "14" ;
               : gosub "add_bonus" ;
            }
         }
         : if (have_won && !bonus_point_grow_need) {
            : match "grow _;_ need" {
               : gosub "say_half" ;
            }
         }
      }
      : if (point_shift_goals && !bonus_point_grow_need) {
         : match "grow need" {
            : set_true "retry_grow_need" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_carried "fast_vision") {
         : match "vast fission" {
            : if (bonus_point_vast_fission) {
               : print "You've already broken things down enough." ;
            } : else {
               : print "You extrapolate on the fast vision you have and re-interpret events from your past life in many new ways. The mental fission of previous complaints is fast. You make plans for, uh, fishin' for more, once this quest is over. More what? Lighting fires, fighting liars." ;
               : set_true "bonus_point_vast_fission" ;
               : set_false "retry_vast_fission" ;
               : set_integer var="tempint" "11" ;
               : gosub "add_bonus" ;
            }
         }
         : if (have_won && !bonus_point_vast_fission) {
            : match "vast _;_ fission" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      : if (point_fellow_yield && !bonus_point_vast_fission) {
         : match "vast fission" {
            : set_true "retry_vast_fission" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_carried "low_song") {
         : match "so long" {
            : if (bonus_point_so_long) {
               : print "A long (re-)good-bye is not really a good-bye." ;
            } : else {
               : print "You use the low song in your head to compose a kiss-off to people whom you don't want to stick in your memory, but they do. It helps lighten a few burdens." ;
               : set_true "bonus_point_so_long" ;
               : set_false "retry_so_long" ;
               : set_integer var="tempint" "10" ;
               : gosub "add_bonus" ;
            }
         }
         : if (have_won && !bonus_point_so_long) {
            : match "so _;_ long" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      : if (point_grim_tune && !bonus_point_so_long) {
         : match "so long" {
            : set_true "retry_so_long" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_carried "pacing_rations") {
         : match "racing passions" {
            : if (bonus_point_racing_passions) {
               : print "No. Best not get carried away." ;
            } : else {
               : print "You permit yourself to imagine being on a much higher-powered quest. Boy, you showed those boring old pacing rations! And the people who manufactured them! Or, well, you would have, if they were around.\nYour Walter Mitty moment over, you get back to focusing on your main quest." ;
               : set_integer var="tempint" "15" ;
               : gosub "add_bonus" ;
               : set_true "bonus_point_racing_passions" ;
               : set_false "retry_racing_passions" ;
            }
            : done ;
         }
         : if (have_won && !bonus_point_racing_passions) {
            : match "racing _;_ passions" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      : if (point_hunters_grill && !bonus_point_racing_passions) {
         : match "racing passions" {
            : set_true "retry_racing_passions" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_carried "peace_surging") {
         : match "cease purging" {
            : if (bonus_point_cease_purging) {
               : print "One doesn't want to overthink good intentions." ;
            } : else {
               : print "You use the feeling of peace, surging, to formulate what to do to march towards peace, or to make things more peaceful. Naturally there are things society needs to purge, but then there are too many it doesn't." ;
               : set_true "bonus_point_cease_purging" ;
               : set_false "retry_cease_purging" ;
               : set_integer var="tempint" "12" ;
               : gosub "add_bonus" ;
            }
         }
         : if (have_won && !bonus_point_cease_purging) {
            : match "cease _;_ purging" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      : if (point_shift_goals && !bonus_point_cease_purging) {
         : match "cease purging" {
            : set_true "retry_cease_purging" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_carried "trial_pics") {
         : match "tile pricks" {
            : if (!pcpc_tile) {
               : print "You wonder if it is worth advertising any sort of home security like this, especially since it might backfire on the inhabitant. But a spoonerism's a spoonerism!" ;
               : set_true "pcpc_tile" ;
               : gosub "check_pcpc_achievement" ;
            } : else {
               : print "You already inspected the trial pics that way." ;
            }
         }
         : match "pile tricks" {
            : if (!pcpc_pile) {
               : print "You've found a lot of wordplay tricks so far, and you wonder if you should branch off into salesmanship tricks. There are ethical boundaries, of course, but a spoonerism's a spoonerism!" ;
               : set_true "pcpc_pile" ;
               : gosub "check_pcpc_achievement" ;
            } : else {
               : print "Pile up too many tricks, and you wind up playing tricks on yourself." ;
            }
         }
      }
      : if (is_carried "rain_soul") {
         : match "sane role" {
            : if (bonus_point_sane_role) {
               : print "Fighting too hard for perfect sanity undoes the point." ;
            } : else {
               : print "Not that things are insane here, but you justify why working through such apparent nonsense is, indeed, good for the soul, even if it doesn't help society right away." ;
               : set_integer var="tempint" "13" ;
               : set_true "bonus_point_sane_role" ;
               : set_false "retry_sane_role" ;
               : gosub "add_bonus" ;
            }
         }
         : if (have_won && !bonus_point_sane_role) {
            : match "sane _;_ role" {
               : gosub "say_half_b" ;
               : done ;
            }
         }
      }
      : if (point_grim_tune && !bonus_point_sane_role) {
         : match "sane role" {
            : set_true "retry_sane_role" ;
            : gosub "warning_bonus_after" ;
         }
      }
      : if (is_exists "teary_chimes") {
         : match "cheery times" {
            : if (is_at "my_house") {
               : print "You take a moment to step outside and reflect..." ;
            : set_true "chimes_in_my_house" ;
            }
            : print "The teary chimes bring back memories of an old couple down the street, when you were a kid. You didn't like the chimes at first, but then when you talked with them, chimes started to remind you of them. They died when you were ten. You haven't heard chimes for a while. While the chimes seem to be saying \"time to move on,\" there's also optimism there will be other, different, good times ahead." ;
            : destroy "teary_chimes" ;
            : set_integer var="tempint" "17" ;
            : gosub "add_bonus" ;
            : set_true "bonus_point_cheery_times" ;
            : done ;
         }
         : if (have_won && !bonus_point_cheery_times) {
            : match "cheery _;_ times" {
               : gosub "say_half_b" ;
            }
         }
      }
      : if (is_carried("travel_grail")) {
         : match "gravel trail" {
            : if (is_at "plain_base") {
               : print "You look over at Thor. He nods. You summon a gravel trail which appears to the north!" ;
               : print "\"There you go,\" he cheers. \"The rest shouldn't be too hard, if you got this far. But wait, you'd better let me take this grail. I don't think you'll need it, but the next person to stop by might.\"" ;
               : print "You'd sort of grown attached to it, but he is bigger than you, and it is a little heavy.";
               : destroy "travel_grail" ;
               : set_true "point_gravel_trail" ;
               : gosub "add_point" ;
               : update_graphic ;
            } : else {
               : print "Nothing happens. Perhaps you'll want to use the travel grail elsewhere. Like somewhere that might have passages you haven't explored." ;
            }
            : done ;
         }
         : if (!point_gravel_trail) {
            : match "gravel _;_ trail" {
               : gosub "say_half" ;
            }
         }
      }
   }
   int_from_noun1 : subroutine {
      : set_integer var="tempint" {( int("" + original "noun1") )} ;
   }
   list_jump_commands : subroutine {
      : if (jump_commands_notified) {
         : return ;
      }
      : if ((!has_visited("plain_base")) || (!has_visited("west_tiles")) || (!has_visited("east_branch")) || (!has_visited("stealing_hill"))) {
         : return ;
      }
      : set_true "jump_commands_notified" ;
      : print "You've seen all the non-endgame locations in the game. There are several jump commands you can use in case you don't want to fiddle with directions." ;
      : print "" ;
      : print "" ;
      : print "{w_eb} = East Branch" ;
      : print "{w_pb} = Plain Base" ;
      : print "{w_sh} = Stealing Hills" ;
      : print "{w_wt} = West Tiles" ;
   }
   mark_jump : subroutine {
      : if (is_at("plain_base")) {
      } : else_if (is_at("west_tiles")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 1 )} ;
      } : else_if (is_at("east_branch")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 2 )} ;
      } : else_if (is_at("stealing_hill")) {
         : set_integer var="latest_warp_number" {( latest_warp_number + 3 )} ;
      } : else {
         : return ;
      }
      : set_true "jump_buzzing" ;
      : set_true "ever_jump" ;
      : set_integer var="footnote_1_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 0 ) }) )} ;
      : collection_modify { collection = "jump_list" index -> (latest_warp_number) content -> ("1") ; }
      : if (collection_get {collection -> ("jump_list") index -> (int("" + latest_warp_number))} == "1") {
         : set_false "jump_buzzing" ;
      }

   }
   note_diagonal_direction_from_hub : subroutine {
      : if (!has_visited("east_branch") && !has_visited("west_tiles"))
      {
         : print "As you start, Thor calls out to you. \"Oh, hey, those diagonal directions? Sorry about them. Usually not done in a text adventure. It can confuse people. But we have a good excuse. It keeps the map symmetrical, and the passages from bending too weirdly. There're just hubs with dead ends northeast and northwest, so hopefully you can visualize the map in your head.\"" ;
         : set_true "noted_diagonal_direction" ;
         : press_any_key ;
         : return ;
      }
      : if (!thor_warn_close && (is_carried("travel_grail") || point_gravel_trail))
      {
         : print {( "Thor coughs. \"That grail is all you need, really. " + ( bonus_point_test_wiles || bonus_point_beast_ranch || bonus_point_rig_boons ? "There aren't any bonus points left that way, either, in case you were curious." : "There's still stuff to do, but it's not critical to your quest." ) + "\"" )} ;
         : set_true "thor_warn_close" ;
      }
   }
   note_think_command : subroutine {
      : if (!think_noted) {
         : set_true "think_noted" ;
         : print "{note_once}you've found the right thing to say or do, but you weren't prepared yet. {vd_thk} will record this and other point-scoring commands you might discover, for when your character is fully prepared." ;
      }
   }
   read_book : subroutine {
      : if (!initial_book_poke) {
         : set_integer var="tempint" "17" ;
         : gosub "footnote_reveal" ;
         : print "You take the time to inspect the whole bookshelf. Perhaps the {rttr}, or a passage to it, is hidden behind one of the books. However, you find nothing, even after removing the books to see if the bookshelf can be pushed to reveal a secret passage, or something. Even a \"Books, hidden hooks biddin'?\" goes unanswered.\nBut hey, some of those titles look interesting!{footnote_reveal_text}" ;
         : set_true "initial_book_poke" ;
         : if (have_won) {
            : set_true "got_footnote_17" ;
         }
         : done ;
      }
      : if (have_won && !got_footnote_17) {
         : set_integer var="tempint" "17" ;
         : gosub "footnote_reveal" ;
         : print "You peruse the bookshelf again.{footnote_reveal_text}" ;
         : set_true "got_footnote_17" ;
      }
      : if (have_won && achieve_nbbn) {
         : cycle key = "books_bonus" predictable_order = "false" skip_interval = "0" {
            : print "{book_is} <Bad Hosts Had Boasts<#ff0>>." ;
            : print "{book_is} <Boo, Debtor, Do Better<#ff0>>." ;
            : print "{book_is} <Bought Gourd, Got Bored<#ff0>>." ;
            : print "{book_is} <Bye, Hidden High Biddin'<#ff0>>." ;
            : print "{book_is} <Dreamy Stinkers, Steamy Drinkers<#ff0>>." ;
            : print "{book_is} <Feel Cold, Keel, Fold<#ff0>>." ;
            : print "{book_is} <Grow, City So Gritty<#ff0>>." ;
            : print "{book_is} <Hit Wealth, Wit, Health<#ff0>>." ;
            : print "{book_is} <LOL! Aye, All Lie<#ff0>>." ;
            : print "{book_is} <Lunch, Pines, Punch Lines<#ff0>>." ;
            : print "{book_is} <Lurk, Wait, Work Late<#ff0>>." ;
            : print "{book_is} <Near Home Here, Gnome<#ff0>>." ;
            : print "{book_is} <Rake Might Make Right<#ff0>>." ;
            : print "{book_is} <Smite, Woke White Smoke<#ff0>>." ;
            : print "{book_is} <Thumb, Free From Thee<#ff0>>." ;
            : print "{book_is} <Will, Styled Still Wild<#ff0>>." ;
            : print "{book_is} <You May Moo, Yay<#ff0>>." ;
         }
      } : else {
         : cycle key = "books_to_read" predictable_order = "false" skip_interval = "0" {
            : print "{book_is} <A Will Way Ill<#ff0>>." ;
            : print "{book_is} <To Prep True Pep<#ff0>>." ;
            : print "{book_is} <See Bunny, Be Sunny<#ff0>>." ;
            : print "{book_is} <Chaz, Jess, Jazz, Chess<#ff0>>." ;
            : print "{book_is} <See Pride Preside<#ff0>>." ;
            : print "{book_is} <Thumb, Sing Something<#ff0>>." ;
            : print "{book_is} <Nor Fight For Night<#ff0>>." ;
            : print "{book_is} <My Skill, Sky, Mill<#ff0>>." ;
            : print "{book_is} <Tad, Who HAD To<#ff0>>." ;
            : print "{book_is} <Kenny Muller's Many Colors<#ff0>>." ;
            : print "{book_is} <My Son Simon<#ff0>>." ;
            : print "{book_is} <Two Trolls' True Tolls<#ff0>>." ;
            : print "{book_is} <Socially Show Sully<#ff0>>." ;
            : print "{book_is} <Dang! Big Bang, Dig!<#ff0>>." ;
            : print "{book_is} <Fusty Trite Trustee Fight<#ff0>>." ;
            : print "{book_is} <Mirth, Waking, Worth Making<#ff0>>." ;
            : print "{book_is} <Toil, Anchor, Oil Tanker<#ff0>>." ;
         }
      }
      : increment "books_read";
      : if (books_read == 17) {
         : print "That's all the books. If you continue examining, they'll cycle again, but in a different random order." ;
         : set_integer var = "books_read" "0" ;
         : set_true "achieve_nbbn_pre" ;
      }
   }
   rune_parsing : subroutine {
      : match "rig boons;rig boon" {
         : if (bonus_point_rig_boons) {
            : print "Nothing happened the first time, and persistence isn't going to work, here." ;
            : done ;
         }
         : print "You figure it's worth a try, to ask the big runes to rig boons. Alas, they don't start glowing, or anything. Still, you feel observant and in tune with your surroundings for following a reasonable lead." ;
         : set_true "bonus_point_rig_boons" ;
         : set_integer var="tempint" "9" ;
         : gosub "add_bonus" ;
      }
      : if (have_won && !bonus_point_rig_boons) {
         : match "rig _;_ boons" {
            : gosub "say_half_b" ;
            : done ;
         }
      }
   }
   say_half : subroutine {
      : match "* -;- *" {
         : print "Feels right, but what to pair that word with?" ;
         : done ;
      }
      : cycle key = "one_right" predictable_order = "true" skip_interval = "0" max_loops = "1" {
      : print "One of those words felt right, but the other didn't. You must be halfway there{for_bonus}.{already_got_check}" ;
      : print "Again, you feel like you got halfway there{for_bonus}.{already_got_check}" ;
         on_exhausted {
            : print "One word right, one word wrong{for_bonus}.{already_got_check}" ;
         }
      }
      : set_false "already_got_command" ;
   }
   say_half_b : subroutine {
      : if (!have_won) {
         : print "{custom_unknown_verb_error}" ;
         : if (!bonus_obfuscated_note_yet) {
            : print "{note_once}well, not exactly. You've discovered half of a bonus point. But the first time through, I won't be revealing them, so as not to distract you from the main quest. If you replay, you'll get a nudge, since we can assume you know the main way through." ;
            : set_true "bonus_obfuscated_note_yet" ;
         }
         : done ;
      }
      : set_true "half_bonus" ;
      : gosub "say_half" ;
      : if (!bonus_half_note) {
         : print "{note_once}since you've been through once, I will assume you know all the core points and are hunting for bonus points. This wasn't available the first time through, to avoid distracting you from the main game." ;
         : set_true "bonus_half_note" ;
      }
      : set_false "half_bonus" ;
   }
   reflexive_warp_reject : subroutine {
      : print "You're already here!";
      : set_integer var = "latest_warp_number" "-1" ;
      : done ;
   }
   talk_flag : subroutine {
      : set_integer var="tempint" {( int("" + (found_talkflag % (2 * current_talkflag))) )} ;
      # : print "{found_talkflag} modulo (2 * {current_talkflag}) = {tempint}. Is it less than {current_talkflag}?" ;
      : if (tempint < current_talkflag) {
         : set_integer var="found_talkflag" {( int("" + (found_talkflag + current_talkflag)) )} ;
         : increment "found_talktotal" ;
      }
   }
   think_thoughts : subroutine {
      : if (!think_available && !retry_available) {
         : print "There's nothing on your mind that you tried to do but weren't able to." ;
         : return ;
      }
      : if (think_available) {
         : print "Here is what you tried to do, and you haven't gotten it to work yet:" ;
      }
      : if (think_chalice_map) {
         : print "-- get the <CHALICE MAP<#0f0>> (West Tiles, NE)";
      }
      : if (think_fellow_yield) {
         : print "-- make the <FELLOW YIELD<#0f0>> (West Tiles, NW)";
      }
      : if (think_grim_tune) {
         : print "-- sing a <GRIM TUNE<#0f0>> (East Branch, NE) once you have a melody and lyric inspiration";
      }
      : if (think_healing_still) {
         : print "-- feel (or discover a) <HEALING STILL<#0f0>> (Stealing Hill)";
      }
      : if (think_hunters_grill) {
         : print "-- start up the <HUNTERS GRILL<#0f0>> with gifts of food (West Tiles, W)";
      }
      : if (think_master_plan) {
         : print "-- have the strength and self-belief to get the <MASTER PLAN<#0f0>> (West Tiles, N)";
      }
      : if (think_shift_goals) {
         : print "-- help others out enough to be able to <SHIFT GOALS<#0f0>> (West Tiles, SW)";
      }
      : if (think_hi_mouse) {
         : print "-- have a reason to say <HI MOUSE<#0f0>> to invite it back into My House";
      }
      : if (retry_available) {
         : print "Here is what you tried, but it was a bit too late:" ;
      }
      : if (retry_rare_plights) {
         : print "-- say <RARE PLIGHTS<#0f0>> when you have Player Rights" ;
      }
      : if (retry_so_long) {
         : print "-- say <SO LONG<#0f0>> when the low song is in your mind" ;
      }
      : if (retry_vast_fission) {
         : print "-- try <VAST FISSION/FISHIN<#0f0>> when you have a fast vision" ;
      }
      : if (retry_cease_purging) {
         : print "-- think <CEASE PURGING<#0f0>> when you feel peace surging" ;
      }
      : if (retry_sane_role) {
         : print "-- hope for a <SANE ROLE<#0f0>> when you have a rain soul" ;
      }
      : if (retry_grow_need) {
         : print "-- <GROW NEED<#0f0>> when you feel no greed" ;
      }
      : if (retry_racing_passions) {
         : print "-- have <RACING PASSIONS<#0f0>> when you possess the pacing rations" ;
      }
      : gosub "check_additional_meta" ;
      : return ;
   }
   tutorial_choice : subroutine {
      : if (have_won) {
         : return ;
      }
   : ask_bool {
      question   = {qt} has a tutorial mode for the first few puzzles. Would you like to use it?
      yes_answer = Yes, I'd like to use the tutorial.
      no_answer  = No, I don't need the tutorial.
      var        = in_tutorial
      }
      : print "Note you can change in and out of tutorial mode with {opt_tutorial} {yn} before you have completed the first few tasks, though this may break narrative continuity.\nAlso, note that your tutorial progress will appear in the upper right while tutorial mode is active." ;
      : press_any_key ;
      : clear_screen ;
      : ask_bool {
      question   = {qt} also allows for color-coded hinting for important location details. This may help, or it may spoil things, too. You can change this option in-game, but I want the player to be aware of it to start. Would you like to activate it?
      yes_answer = Yes, I'd like color-coded hinting.
      no_answer  = No, I'd prefer not to have color-coded hinting.
      var        = use_color_coding
      }
   }
   long_words_note : subroutine {
      : if (!long_word_warn) {
      : print "<ALSO:<#f0f>> in general, longer words will work, but parser conventions have evolved to help save the player keystrokes." ;
      : set_true "long_word_warn" ;
      }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( have_won ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "have_won";
         : gosub "win_game_stub" ;
      }
   }

   option_err_stub : subroutine {
      : match "_ -" {
         : print "Toggling {tempopt} without an argument ({yn}) is not supported." ;
         : done ;
      }
      : print "Toggling {tempopt} requires one of {yn} as an argument." ;
      : done ;
   }

   options_cheat : subroutine {
      : match "cheat yes" {
         : print "CHEAT is now activated. You don't have to do puzzles in order." ;
         : set_true "cheat_dont_require" ;
         : done ;
      }
      : match "cheat no" {
         : print "CHEAT is now deactivated. You will have to do puzzles in order." ;
         : set_false "cheat_dont_require" ;
         : done ;
      }
      : set_string var="tempopt" text="CHEAT" ;
      : gosub "option_err_stub" ;
   }

   options_colorhint : subroutine {
      : match "ch yes" {
         : print "Color hints are now activated." ;
         : set_true "use_color_coding" ;
         : done ;
      }
      : match "ch no" {
         : print "Color hints are now deactivated." ;
         : set_false "use_color_coding" ;
         : done ;
      }
      : set_string var="tempopt" text="{ch}" ;
      : gosub "option_err_stub" ;
   }


   options_notify : subroutine {
      : match "notify yes" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : set_string var="tempopt" text="{opt_notify}" ;
      : gosub "option_err_stub" ;
   }

   options_startwarp : subroutine {
      : match "* yes" {
         : print "Start-of-game warp is now on.";
         : set_true "option_start_warp";
         : done ;
      }
      : match "* no" {
         : print "Start-of-game warp is now off.";
         : set_false "option_start_warp";
         : done ;
      }
      : set_string var="tempopt" text="start-of-game warp" ;
      : gosub "option_err_stub" ;
   }

   options_tutorial: subroutine {
      : match "tutorial yes" {
         : print "Tutorial mode is now on.";
         : set_true "in_tutorial";
         : if (have_won && !tutorial_redo_note) {
            : set_true "tutorial_redo_note" ;
            : print "{note_once}there are no special achievements or footnotes related to the tutorial, if you're looking there." ;
         }
         : done ;
      }
      : match "tutorial no" {
         : print "Tutorial mode is now off.";
         : set_false "in_tutorial";
         : done ;
      }
      : set_string var="tempopt" text="{tut}" ;
      : gosub "option_err_stub" ;
   }

   tutorial_progress : subroutine {
      : set_true "ever_tutorial" ;
      : if (!tutorial_1_about_done) {
         : print "{note_cue_tutorial}An author frequently implements an {vm_about} commands page for big-picture introductory information that might disrupt the starting narrative. So try {vm_about} to get started." ;
         : return ;
      }
      : if (!tutorial_2_verbs_done) {
         : print "{note_cue_tutorial}The {vm_verbs} meta-command is useful to see what the most common commands are. A meta-command is defined as a request for game status that doesn't cause time to pass in-game. Some other games use HELP, though I find it too similar to HINT or HINTS.\nSince {vm_verbs} will show you other meta-commands, too, let's try that next." ;
         : return ;
      }
      : if (!tutorial_3_additional_metaverb_done) {
         : print "{note_cue_tutorial}The {vm_about} and {vm_verbs} meta-commands tipped off additional other meta-commands, listed in <orange<#f80>>, to help navigate the parser. The next step is to try any one now." ;
         : return ;
      }
      : if (!tutorial_4_x_me_done) {
         : print {( note_cue_tutorial + (tutorial_x_me_cued ? "{v_x_me} is a standard command to start text adventures, to get your bearings. You'll want to type it now to continue the tutorial. It may not be as grammatically correct as <X MYSELF<#f80>> or <X SELF<#f80>>, but it's easier to type, and modern parser games try to provide that convenience when sensible." : "Now you've looked into the meta-commands, you'll want to have a look at yourself. One convention of text adventures is that {v_x_me} provides clues of who you are and what you're doing with relatively few keystrokes. So try {v_x_me} as your first in-world command.")  )} ;
         : set_true "tutorial_x_me_cued" ;
         : return ;
      }
      : if (!tutorial_5_inventory_done) {
         : print "{note_cue_tutorial}now you examined yourself with {v_x_me}, another common command is to take {vd_i_long} to verify you are carrying the item you found. This can be shortened with {vd_i}." ;
         : return;
      }
      : if (!tutorial_6_x_ask_done) {
         : print "{note_cue_tutorial}Now that you verified you found something new, the next thing to do is to examine it with <X TASK<#0f0>>. Adventuron also recognizes <X ASK<#0f0>> and <X OOH<#0f0>>, but not <X TO<#0f0>>, as TO is part of complex commands such as <GIVE A TO B<#0f0>>." ;
         : return;
      }
      : if (!tutorial_7_listen_done) {
         : print "{note_cue_tutorial}sometimes a game will indicate you should use one of your senses. While guess-the-verb is frowned upon in parser games, having only five physical senses should limit the required guesswork nicely." ;
         : return;
      }
      : if (!tutorial_8_talk_voice_done) {
         : print "{note_cue_tutorial}that voice is talking to you. While it's not likely the voice will talk back, you can still try with {v_talk} ({qt} can figure the subject) or <TALK VOICE<#0f0>>. You can even abbreviate {v_talk} to {v_t0}.";
         : return;
      }
      : if (!tutorial_9_go_west) {
         : print "{note_cue_tutorial}the {cc_whoa_guest} must be a hint. Perhaps you should determine which direction it wants you to go." ;
         : return ;
      }
      : if (!tutorial_10_first_base) {
         : print "{note_cue_tutorial}{cc_whoa_guest} had you <GO WEST<#0f0>>. What about the {cc_burst_face}?" ;
         : return ;
      }
      : print "This is a bug. You should have finished the tutorial by now. Let me know how this happened." ;
   }
   tutorial_shutoff : subroutine {
      : if (in_tutorial && post_tutorial_long_notes) {
         : press_any_key ;
         : clear_screen ;
         : print "Thanks for going through the tutorial again! I did put a lot of effort into making it more than \"do this, then this.\"" ;
      } : else_if (in_tutorial && !post_tutorial_long_notes) {
         : press_any_key ;
         : clear_screen ;
         : set_true "post_tutorial_long_notes" ;
         : print "Congratulations! You've finished the tutorial. Now on with the game. With the tutorial over, there are no in-game hints, but there should be a walkthrough provided. Hopefully it won't be too necessary." ;
         : print "One other thing: someone ahead discusses rules game designers should adhere to and your rights as a parser game (or any game) player. There's no penalty for skipping this." ;
         : print "Similarly, there are bonus points for observant players, and there are also footnotes and achievements to revisit on replay. All this is only for really interested players." ;
         : print "The number one rule for you to follow as a player, though vague, is: enjoy yourself. Focus on what you like if and when you can, whether it's the necessary puzzles, the optional puzzles, or the discussion of what players have a right to expect from a game. And don't worry about the rest." ;
      }
      : set_true "tutorial_done";
      : set_false "in_tutorial";
      : press_any_key;
   }

   meta_about : subroutine {
      : print "{qt} was made for the 2025 Text Adventure Literacy Jam ({talj}) after years of judging it. It placed 4th of 7 entries." ;
      : print "I always wanted to write an Adventuron game. It, or the tutorial bit, was particularly inspired by <The Interactive Adventurer's Tutorial Adventure<#8f8>>[https://cobwebbeddragon.itch.io/interactive-adventurer-tutorial-adventure-talp], a 2023 entry by <Cobwebbed Dragon<#8f8>>[https://cobwebbeddragon.itch.io/] (clickable links,) as well as the <Shake a Tower<#0f0>> section of Infocom's classic <Nord and Bert Couldn't Make Head or Tail of It<#0f0>>." ;
      : print {( "You can see what sort of commands {qt} uses with {vm_verbs}" + (!has_visited("plain_base") ? ", though I'd like to note that each point-scoring command follows a certain sort of wordplay" : "" ) + "." )} ;
      : print "The {vm_thx}/{vm_credits} command lists people and entities who helped in {qt}'s production." ;
      : print "{vm_links} lists relevant links, and {vm_versions} lists summaries of versions." ;
      : if (!ever_about) {
         : print "{note_once}if you want the mechanic for point-scoring commands spoiled or explained, {vm_pts} will do so." ;
         : print {( "{note_once}finally, while {qt} has a lot of meta-commentary with footnotes (once you've won) and " + (has_visited("plain_base") ? "Thor" : "an NPC you'll find") + ", it's my hope {qt} can be enjoyed just as a game." )} ;
         : set_true "ever_about" ;
      }
      : if (!tutorial_1_about_done) {
         : set_true "tutorial_1_about_done" ;
         : increment "tutorial_score" ;
      }
   }

   meta_links : subroutine {
      : print "Clicking on the light green text below will open a new tab." ;
      : print "Here is a link to {qt_io}." ;
      : print "Here is a link to <TALJ 2025<#8f8>>[https://itch.io/jam/talp2025], where {qt} was entered on release. {qt} would not have been a thing without it, or without <Adventuron<#8f8>>[http://adventuron.io]." ;
      : print "Here are links to previous incarnations of TALP/TALJ: <TALP 2024<#8f8>>[https://itch.io/jam/talp2024/entries], <TALP 2023<#8f8>>[https://itch.io/jam/talp2023/entries], <TALP 2022<#8f8>>[https://itch.io/jam/talp2022/entries], and <TALP 2021<#8f8>>[https://itch.io/jam/talp/entries]." ;
      : print "If you find a bug, big or small, and want to report an issue, here is a link to {qt_repo}." ;
      : print "If you would like to share a transcript with me, send it to {email}." ;
      : gosub "check_additional_meta" ;
   }

   meta_meta_verbs : subroutine {
      : print "{vm_about} gives info about the game.";
      : print "{vm_thx} or {vm_cred} gives info about people who helped make {qt} or make it better.";
      : print "{vd_thk} reminds you of commands you tried that should work, or will work in the future, but you didn't yet have the resources." ;
      : print {( "{vd_sco} shows your score, both of core points (to finish the game) and bonus points, for observant players." + (bonus_score > 0 ? " Also, <BONUS<#f80>> shows bonus points you've found and clues where to get others." : "" ) )} ;
      : print "{vm_pts} shows what sorts of commands score points, with examples of fun ones that missed the cut for {qt}." ;
      : if (have_won) {
         : print "By winning the game, you've opened up footnotes ({vd_footnote_cue}) and achievements tracking ({vd_ach}).";
      }
      : print "Adventuron also offers the standard parser meta-commands of <SAVE<#f80>>, <RESTORE<#f80>> and <QUIT<#f80>>, to save a game for later, come back to it, or quit." ;
      : print "Adventuron-specific {vm_meta} commands include <TSTART<#f80>> and <TSTOP<#f80>>, which start and stop a transcript." ;
      : if (!meta_abbrev_noted) {
         : print "{note_once}you can abbreviate many of the non-native Adventuron commands above. Listing them all would make this readout too long, but experiment, if you like." ;
         : set_true "meta_abbrev_noted" ;
      }
      : gosub "check_additional_meta" ;
   }

   meta_options : subroutine {
      : print "Many games have options for sound, etc. {qt} uses <YOUROPT YES/Y<#88f>> and <YOUROPT NO/N<#88f>> to change them. <YOUROPT <#88f>> shows its status." ;
      : print "{tut} toggles the tutorial early in the game. With the tutorial finished, it recaps the lessons taught." ;
      : print "{ch} is used to toggle colored text hints." ;
      : print "{opt_notify} is used to toggle score notification." ;
      : if (have_won) {
         : print "{opt_warp} now lets you restart at the first room needed to find a footnote, bonus point or achievement, up to Plain Base." ;
      }
      : print "Note that {qt} uses {yn} to toggle options instead of {on} and {off}, since {on} is a preposition, which is often ignored by the simplified version of Adventuron's parser used here." ;
      : print "Also note that typing an option will not set it. At least, not in the initial version of {qt}." ;
      : if (in_debug) {
         : print "<DEBUG OPTION<#ff0>>: <CHEAT<#88f>> turns off/on dependencies in hub puzzles so you can complete them in any order." ;
      }
      : gosub "check_additional_meta" ;
   }

   meta_points : subroutine {
      : print "{qt} gives points for finding a spoonerism for objects or ideas in-game. So what is a spoonerism?" ;
      : print "Spoonerisms are when the starting sounds of two words are switched. Sometimes that just means  switching the first letters of two word, but other times, it may be about switching the initial sound, and maybe about tinkering with the spelling." ;
      : print "Examples of spoonerisms not included in {qt} include:" ;
      : collection_iterate "spoonerism_examples" {
         : print {( "* " + item() )} ;
      }
      : print "There should be no huge stretches in pronunciation in {qt}, although sometimes for spoonerisms, people do this, if it gets enough laughs. Also, {qt} should notify you when you've guessed one right word for core puzzles." ;
      : gosub "check_additional_meta" ;
   }

   meta_thanks : subroutine {
      : print "Thanks to {talj} (formerly TALP, p = project) admins past and future: {tx_ca}, {tx_gf} and <Pinkunz<#0f0>>. Thanks to those who came before who wrote so many great games that made me want to write something more welcoming than my usual efforts. {vm_links} will lead you to past comps." ;
      : print "Thanks to {tx_ca} for creating Adventuron." ;
      : print "Thanks (in alphabetical order) to my testers: {tx_wc}, {tx_gf} (who also helped me with collections,) {tx_ll}, {tx_cm}, and {tx_ds}." ;
      : print "Thanks to {tx_da} and {tx_on} who offered bugfinds and advice during TALJ/TALP 2025." ;
      : print "Thanks to you, for playing this game." ;
      : gosub "check_additional_meta" ;
   }

   meta_versions : subroutine {
      : print "<Version 1.0.0<#80f>> was released for the TALP 2025 Jam on April 30, 2025." ;
      : print "There were several in-comp updates. {qt_io} has this, with the details of what they fixed." ;
      : print "<Version 2.0.0<#80f>> is pending but planned for June 2025. Along with bug fixes and graphic tweaks, two bonus points are replaced, with the old points going toward an achievement. Several achievements are added, and bonus points now carry over after winning. You can now skip introductory rooms on replay if you've found everything you need there for achievements. The bookshelf will also have new book titles once you've read them all." ;
      : print "There are no future versions planned, barring catastrophic bugs." ;
      : gosub "check_additional_meta" ;
   }

   check_additional_meta : subroutine {
      : if (!in_tutorial || tutorial_done) {
         : return ;
      }
      : if (!tutorial_1_about_done) {
         : if (!meta_tutorial_note_1) {
            : print "{note_once}it's good to look into meta-commands offered by the game, but with this tutorial on rails, we are starting with the basics." ;
            : set_true "meta_tutorial_note_1" ;
         }
         : return ;
      }
      : if (!tutorial_2_verbs_done) {
         : if (!meta_tutorial_note_2) {
            : print "{note_once}this tutorial wanted to highlight {vm_verbs} as the most useful of the meta-verbs. So you re-trying this command after doing that will satisfy the next step." ;
            : set_true "meta_tutorial_note_2" ;
         }
         : return ;
      }
      : if (tutorial_1_about_done && tutorial_2_verbs_done &&  !tutorial_3_additional_metaverb_done) {
         : print "{note_tutorial}You found one specific meta-command. There are others, but I didn't want to force you to see them all. You can if you want. You just need to know that a robust text adventure takes steps to help the player not feel lost. This wasn't always the case back in the '80s, when disk space was much scarcer." ;
         : set_true "tutorial_3_additional_metaverb_done";
         : increment "tutorial_score" ;
      }
   }

   meta_verbs : subroutine {
      : if (!tutorial_2_verbs_done) {
         : set_true "tutorial_2_verbs_done" ;
         : increment "tutorial_score" ;
      }
      : print "While {qt} requires you to guess some verbs as part of a puzzle, it has a simplified parser otherwise." ;
      : print "{qt} uses all eight planar directions, abbreviated <N S E W NW NE SE SW<#0f0>> (don't worry! The diagonal directions are restricted to two hubs,) and U for up as well. You can use the long form of each direction, but it is not necessary. Also, {v_out} leaves if there is only one exit." ;
      : print "You can {v_take} an item, but there is no need to {v_drop} it. You can also <X<#0f0>> it, which is short for <EXAMINE<#0f0>>." ;
      : print "You can {v_talk} (<T<#0f0>>) to people you see. A subject or \"to\" is not necessary, as there will be no more than one other character per room." ;
      : if (talked_to_thor) {
         : print "You can also {v_ask} Thor about {v_rule}s (1-17) with 0 checking for what you haven't asked about." ;
      }
      : print "No other standard commands are needed to win {qt}. However, {vm_meta} will describe meta-commands, and <OPTIONS<#f80>> shows options that toggle. Also, many verbs have abbreviations." ;
      : if (jump_commands_notified) {
         : print {( "To save keystrokes, you can jump around hub locations with " + w_eb + " (east branch.)" + w_pb + " (plain base,) " + (point_healing_still ? "" : w_sh + " (stealing hill,) ") + w_wt + " (west tiles,) " )} ;
      }
      : if (in_debug && !have_won) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }

   nl_anagram_check : subroutine {
      : if (!anagram_nag) {
         : print "{note_once}however, the author did write such an anagram game. Three, in fact. You can find <Shuffling Around<#f80>>, <A Roiling Original<#f80>> and <Tours Roust Torus<#f80>>. If you enjoy {qt}, you may enjoy them, too." ;
         : set_true "anagram_nag" ;
      }
      : done ;
   }

   track_achievements : subroutine {
      : if (achieve_taat) {
         : print "You achieved all the achievements already, including {achievement_taat}. I'm glad you're still here, but ... time to move on?" ;
         : return ;
      }
      : set_true "achieve_taat" ;
      : gosub "track_achievements_1_red" ;
      : gosub "track_achievements_2_orange" ;
      : gosub "track_achievements_3_yellow" ;
      : gosub "track_achievements_4_green" ;
      : gosub "track_achievements_5_blue" ;
      : gosub "track_achievements_6_purple" ;
      : if (achieve_taat) {
         : print "For winning all the other achievements, you win the {achievement_taat} achievement! Very impressive, indeed! Thank you for your diligence. Now go play something else. Or, heck, design or write your own game. You're no slouch at thinking up possibilities." ;
      }

      : if (!point_hi_mouse) { # not included in endgame text since that is long enough already, and only those who really want to track achievements will see the color-coding note
         : set_true "ever_achievement" ;
         : gosub "color_check_bfa" ;
      }

      ## grey achievement (post-comp)
   }

   track_achievements_1_red : subroutine {
      : if (achieve_haih && achieve_mttm && achieve_tyyt) {
         : print "You got all the achievements for maxing inventory chatting: {achievement_haih}, {achievement_mttm}, and {achievement_tyyt}." ;
      }
      : set_false "achieve_taat" ;
      : if (achieve_haih) {
         : print "(Already got the {achievement_haih} achievement for taking inventory with the maximum number of items possible)";
      }
      : else_if (achieve_haih_pre) {
         : print "For taking inventory when carrying around the maximum number of items possible, you win the {achievement_haih} achievement!" ;
         : set_true "achieve_haih" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_haih} achievement yet." ;
      }
      : if (achieve_mttm) {
         : print "(Already got the {achievement_mttm} achievement for not talking to Thor)";
      }
      : else_if (point_hi_mouse && !talked_to_thor) {
         : print "For not talking to Thor, you win the {achievement_mttm} achievement!" ;
         : set_true "achieve_mttm" ;
      }
      : else {
         : print "You haven't unlocked the {achievement_mttm} achievement yet." ;
      }
      : if (achieve_tyyt) {
         : print "(Already got the {achievement_tyyt} achievement for trying to talk to everyone who could speak)" ;
      } : else_if (found_talktotal == max_talktotal) {
         : print "For trying to talk to everyone who can speak, you win the {achievement_tyyt} achievement!" ;
            : set_true "achieve_tyyt" ;
      } : else {
         : print "You haven't unlocked the {achievement_tyyt} achievement yet. ({found_talktotal}/{max_talktotal})" ;
      }
   }

   track_achievements_2_orange : subroutine {
      : if (achieve_tnnt && achieve_cddc2 && achieve_pcpccp && achieve_cnnc && achieve_roer) {
         : print "You already found all the footnotes and bonus points with {achievement_tnnt}, {achievement_pcpccp}, {achievement_roer}, and {achievement_cnnc}." ;
         : return ;
      }
      : set_false "achieve_taat" ;
      : if (achieve_tnnt) {
         : print "You already unlocked the {achievement_tnnt} achievement for uncovering all the footnotes available." ;
      } : else {
         : gosub "footnote_endgame_check" ;
      }
      : if (achieve_cddc2) {
         : print "You already unlocked the {achievement_cddc2} achievement for brushing aside bonus points." ;
      } : else_if (bonus_score == 0 && point_hi_mouse) {
         : print "For brushing aside bonus points, you win the {achievement_cddc2} achievement!" ;
         : set_true "achieve_cddc2" ;
      } : else {
         : print "You haven't unlocked the {achievement_cddc2} achievement yet." ;
      }
      : if (achieve_pcpccp) {
         : print "You already unlocked the {achievement_pcpccp} achievement." ;
      } : else_if (achieve_pcpccp_pre) {
         : print "For finding two ways to look at the trial pics, you win the {achievement_pcpccp} achievement!" ;
         : set_true "achieve_pcpccp" ;
      } : else {
         : print "You haven't unlocked the {achievement_pcpccp} achievement yet." ;
      }
      : if (achieve_roer) {
         : print "You already unlocked the {achievement_roer} achievement." ;
      } : else_if (ach_roer_west && ach_roer_east && ach_roer_base) {
         : print "For scoring points in every location, you win the {achievement_roer} achievement!{chimes_note}" ;
         : set_true "achieve_roer" ;
      } : else {
         : print "You haven't unlocked the {achievement_roer} achievement yet." ;
      }
      : if (achieve_cnnc) {
         : print "(Already got the {achievement_cnnc} achievement for finding all bonus points)" ;
      }
      : else_if (bonus_score == max_bonus_score) {
         : print "For finding all the bonus points, you win the {achievement_cnnc} achievement!" ;
         : set_true "achieve_cnnc" ;
         : if (!achieve_cddc2) {
            : print "{note_once}you will automatically get the {achievement_cddc2} achievement on the next playthrough, since it requires you to win one session without finding any bonus points, and there are no bonus points left to find." ;
         }
      }
      : else {
         : print "You haven't unlocked the {achievement_cnnc} achievement yet." ;
      }
   }

   track_achievements_3_yellow : subroutine {
      : if (achieve_qwwq && achieve_kssn) {
         : print "You already got both achievements for <ask>ing Thor about everything: {achievement_qwwq} and {achievement_kssn}." ;
         : return ;
      }
      : set_false "achieve_taat" ;
      : gosub "track_achievements_qwwq" ;
      : gosub "track_achievements_kssn" ;
   }

   track_achievements_4_green : subroutine {
      : if (achieve_ssss && achieve_gssg && achieve_rssr && achieve_srrs) {
         : print "You got all three achievements that speed- or slow-run: {achievement_ssss}, {achievement_gssg}, {achievement_rssr}, and {achievement_srrs}." ;
         : return ;
      }
      : set_false "achieve_taat" ;
      : if (achieve_ssss) {
         : print "(Already got the {achievement_ssss} achievement for not returning to Thor until you got the grail)" ;
      } : else_if (achieve_ssss_pre) {
         : print "For not returning to Thor until you got the grail, you win the {achievement_ssss} achievement!" ;
         : set_true "achieve_ssss" ;
      } : else {
         : print "You haven't unlocked the {achievement_ssss} achievement yet." ;
      }
      : if (achieve_gssg) {
         : print "You already unlocked the {achievement_gssg} achievement for not having to repeat the right phrase beyond Thor." ;
      } : else {
         : if ((hub_think_needed == 0) && (point_healing_still)) {
            : print "For not having to repeat the right phrase beyond Thor, you win the {achievement_gssg} achievement!" ;
            : set_true "achieve_gssg" ;
         } : else {
            : print "You haven't unlocked the {achievement_gssg} achievement yet." ;
         }
      }
      : if (achieve_rssr) {
         : print "You already unlocked the {achievement_rssr} achievement for taking the minimum number of moves between locations." ;
      } : else {
         : if (rssr_east <= 8 && rssr_west <= 8 && (rssr_base + rssr_hill <= 3)) {
            : if (ever_jump) {
               : print "You're close to the {achievement_rssr} achievement, but next time, don't use warps." ;
            } : else {
               : print "For taking the minimum number of moves between locations, you win the {achievement_rssr} achievement!" ;
               : set_true "achieve_rssr" ;
            }
         } : else {
            : print "You haven't unlocked the {achievement_rssr} achievement yet." ;
         }
      }
      : if (achieve_srrs) {
         : print "You already unlocked the {achievement_srrs} achievement for trying to solve all seven dependent puzzles before you were ready." ;
      } : else {
         : if (hub_think_needed == 7) {
            : print "For trying to flip all seven dependent puzzles before you were ready, you win the {achievement_srrs} achievement!" ;
            : set_true "achieve_srrs" ;
         } : else {
            : print "You haven't unlocked the {achievement_srrs} achievement yet." ;
         }
      }
   }

   track_achievements_5_blue : subroutine {
      : if (achieve_tmmt && achieve_cjjc && achieve_dbbd && achieve_cddc) {
         : print "You got all four achievements that use the warp commands: {achievement_tmmt}, {achievement_cjjc}, {achievement_dbbd}, and {achievement_cddc}." ;
         : return ;
      }
      : set_false "achieve_taat" ;
      : if (achieve_tmmt) {
         : print "(Already got the {achievement_tmmt} achievement for a three-room jump)" ;
      } : else_if (achieve_tmmt_pre) {
         : print "For making a three-room jump, you win the {achievement_tmmt} achievement!" ;
         : set_true "achieve_tmmt" ;
      } : else {
         : print "You haven't unlocked the {achievement_tmmt} achievement yet." ;
      }
      : if (achieve_cjjc) {
         : print "(Already got the {achievement_cjjc} achievement for trying to jump to a blocked-off room)" ;
      } : else_if (achieve_cjjc_pre) {
         : print "For trying to jump to a blocked-off room, you win the {achievement_cjjc} achievement!" ;
         : set_true "achieve_cjjc" ;
      } : else {
         : print "You haven't unlocked the {achievement_cjjc} achievement yet." ;
      }
      : gosub "track_achievements_dbbd" ;
      : if (achieve_cddc) {
         : print "You already unlocked the {achievement_cddc} achievement for performing all twelve possible warp jumps without duplication." ;
      } : else_if (achieve_cddc_pre) {
         : print "For performing all twelve possible warp jumps without duplicating one path, you win the {achievement_cddc} achievement!" ;
            : set_true "achieve_cddc" ;
      } : else {
            : print "You haven't unlocked the {achievement_cddc} achievement yet." ;
      }
   }

   track_achievements_6_purple : subroutine {
      : if (achieve_hbbh && achieve_nbbn) {
         : print "You already got both examining achievements: {achievement_hbbh} for beer and {achievement_nbbn} for books." ;
         : return ;
      }
      : set_false "achieve_taat" ;
      : if (achieve_hbbh) {
         : print "(Already got the {achievement_hbbh} achievement for noting beer around Thor)" ;
      } : else_if (achieve_hbbh_pre) {
         : print "For noting beer around Thor, you win the {achievement_hbbh} achievement!" ;
         : set_true "achieve_hbbh" ;
      } : else {
         : print "You haven't unlocked the {achievement_hbbh} achievement yet." ;
      }
      : if (achieve_nbbn) {
         : print "(Already got the {achievement_nbbn} achievement for reading all the book titles on the bookshelf)" ;
      } : else_if (achieve_nbbn_pre) {
         : print "For reading all the book titles on the bookshelf, you win the {achievement_nbbn} achievement!" ;
         : set_true "achieve_nbbn" ;
      } : else {
         : print "You haven't unlocked the {achievement_nbbn} achievement yet." ;
      }
   }

   # track_achievement subroutines are in alphabetical order

   track_achievements_dbbd : subroutine {
      : if (achieve_dbbd) {
         : print "You already unlocked the {achievement_dbbd} achievement for performing all twelve jumps between jumpable locations." ;
         : return;
      }
      : collection_iterate "jump_list" {
         : if (int(item()) == 0) {
            : print "You haven't unlocked the {achievement_dbbd} achievement yet." ;
            : return ;
         } : else { # without this else clause, for whatever reason, Adventuron doesn't "see" the above haven't-unlocked-yet.
         }
      }
      : print "For performing all twelve jumps between jumpable locations, you win the {achievement_dbbd} achievement!" ;
      : set_true "achieve_dbbd" ;
   }

   track_achievements_kssn : subroutine {
      : if (achieve_kssn) {
         : print "(Already got the {achievement_kssn} achievement for ASKing Thor three times about everything)";
         : return ;
      }
      : collection_iterate "ask_list" {
         : if (int(item()) < 3) {
            : print "You haven't unlocked the {achievement_kssn} achievement yet." ;
            : return ;
         }
      }
      : print "For asking Thor three times about all the rules in the Player's Bill of Rights, you win the {achievement_kssn} achievement!" ;
      : set_true "achieve_kssn" ;
   }
   track_achievements_qwwq : subroutine {
      : if (achieve_qwwq) {
         : print "(Already got the {achievement_qwwq} achievement for ASKing Thor about each rule in the Player's Bill of Rights)";
         : return ;
      }
      : collection_iterate "ask_list" {
         : if (int(item()) == 0) {
            : print "You haven't unlocked the {achievement_qwwq} achievement yet." ;
            : return ;
         }
      }
      : print "For asking Thor about each rule in the Player's Bill of Rights, you win the {achievement_qwwq} achievement!" ;
      : set_true "achieve_qwwq" ;
   }

   warning_bonus_after : subroutine {
      : print "That would have worked earlier, but you used up the item solving a core puzzle. Maybe next go-round?" ;
      : if (!warn_must_redo) {
         : print "{note_once}you can replay the game to pick off this bonus point, if you're a completionist. Meanwhile, {vd_thk} will keep track of what you saw." ;
         : set_true "warn_must_redo" ;
      }
   }

   ## I realize how bad this code is. But we can't save collections survivor status. And it's pedantic to expect someone to see all footnotes each time through. So this is the least bad solution I could think of. Well, the only one.
   ## It's a jerk move too to blame something someone took years to write by himself so people could have fun writing and playnig games for this awkwardness. This is the worst of it, and it's not terrible.

   footnote_read_from_survivors : subroutine {
      : collection_modify { collection = "footnote_status_list" index -> (0) content -> ("" + footnote_1_status) }
      : collection_modify { collection = "footnote_status_list" index -> (1) content -> ("" + footnote_2_status) }
      : collection_modify { collection = "footnote_status_list" index -> (2) content -> ("" + footnote_3_status) }
      : collection_modify { collection = "footnote_status_list" index -> (3) content -> ("" + footnote_4_status) }
      : collection_modify { collection = "footnote_status_list" index -> (4) content -> ("" + footnote_5_status) }
      : collection_modify { collection = "footnote_status_list" index -> (5) content -> ("" + footnote_6_status) }
      : collection_modify { collection = "footnote_status_list" index -> (6) content -> ("" + footnote_7_status) }
      : collection_modify { collection = "footnote_status_list" index -> (7) content -> ("" + footnote_8_status) }
      : collection_modify { collection = "footnote_status_list" index -> (8) content -> ("" + footnote_9_status) }
      : collection_modify { collection = "footnote_status_list" index -> (9) content -> ("" + footnote_10_status) }
      : collection_modify { collection = "footnote_status_list" index -> (10) content -> ("" + footnote_11_status) }
      : collection_modify { collection = "footnote_status_list" index -> (11) content -> ("" + footnote_12_status) }
      : collection_modify { collection = "footnote_status_list" index -> (12) content -> ("" + footnote_13_status) }
      : collection_modify { collection = "footnote_status_list" index -> (13) content -> ("" + footnote_14_status) }
      : collection_modify { collection = "footnote_status_list" index -> (14) content -> ("" + footnote_15_status) }
      : collection_modify { collection = "footnote_status_list" index -> (15) content -> ("" + footnote_16_status) }
      : collection_modify { collection = "footnote_status_list" index -> (16) content -> ("" + footnote_17_status) }
   }

   footnote_write_to_survivors : subroutine {
      : set_integer var="footnote_1_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 0 ) }) )} ;
      : set_integer var="footnote_2_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 1 ) }) )} ;
      : set_integer var="footnote_3_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 2 ) }) )} ;
      : set_integer var="footnote_4_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 3 ) }) )} ;
      : set_integer var="footnote_5_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 4 ) }) )} ;
      : set_integer var="footnote_6_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 5 ) }) )} ;
      : set_integer var="footnote_7_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 6 ) }) )} ;
      : set_integer var="footnote_8_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 7 ) }) )} ;
      : set_integer var="footnote_9_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 8 ) }) )} ;
      : set_integer var="footnote_10_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 9 ) }) )} ;
      : set_integer var="footnote_11_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 10 ) }) )} ;
      : set_integer var="footnote_12_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 11 ) }) )} ;
      : set_integer var="footnote_13_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 12 ) }) )} ;
      : set_integer var="footnote_14_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 13 ) }) )} ;
      : set_integer var="footnote_15_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 14 ) }) )} ;
      : set_integer var="footnote_16_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 15 ) }) )} ;
      : set_integer var="footnote_17_status" {( int(collection_get{ collection -> ("footnote_status_list") index -> ( 16 ) }) )} ;
   }

   bonus_read_from_survivors : subroutine {
      : collection_modify { collection = "bonus_status" index -> (0) content -> (bonus_point_turkey_quest ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (1) content -> (bonus_point_shush_lout ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (2) content -> (bonus_point_rare_plights ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (3) content -> (bonus_point_bane_place ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (4) content -> (bonus_point_theory_bore ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (5) content -> (bonus_point_death_sentence ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (6) content -> (bonus_point_test_wiles ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (7) content -> (bonus_point_beast_ranch ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (8) content -> (bonus_point_rig_boons ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (9) content -> (bonus_point_so_long ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (10) content -> (bonus_point_vast_fission ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (11) content -> (bonus_point_cease_purging ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (12) content -> (bonus_point_sane_role ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (13) content -> (bonus_point_grow_need ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (14) content -> (bonus_point_racing_passions ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (15) content -> (bonus_point_eye_stay ? "1" : "0") }
      : collection_modify { collection = "bonus_status" index -> (16) content -> (bonus_point_cheery_times ? "1" : "0") }
	  : if (bonus_score_start == bonus_score && !achieve_cnnc) {
         : print "You get the achievement for no bonus points in one go-through." ;
         : set_true "achieve_cnnc" ;
	  }
	  : if (bonus_score == max_bonus_score && !achieve_cnnc) {
	   : set_integer var="bonus_score_start" {( int("" + bonus_score) )} ;
	  }
   }

   win_game_stub : subroutine {
      : gosub "footnote_write_to_survivors" ;
      : win_game ;
   }
   win_notes : subroutine {
      : if (!have_won) {
         : print "Thor stops by to congratulate you. \"I knew you could do it! And if you wonder why I didn't do it myself? Well, I could have. But that sort of stuff, where we meddle in mortals' affairs directly instead of guiding you, makes Ragnarok come sooner.\"" ;
         : print "Thor also notes that footnotes will be available on replay, if you choose to peruse them. Most of them will occur within the flow of the game, as you examine, or whatever. There are also achievements, which are slightly harder." ;
         : print "These can be tracked with {vd_ach} or {vd_ac} on replay. But don't feel obliged to complete any of them. They're meant to be tough, and there are other games to play. Also, feel free to just look at achievements.txt on {qt_repo} to spoil them." ;
         : print "Finally, there is a {opt_warp} command that lets you skip ahead of beginning rooms with no bonus points, footnotes or achievements to discover." ;
         : set_true "have_won" ;
         : return ;
      }
      : print "Thor nods and smiles. \"Won't give you the long spiel again, but yeah, thanks for your continued patronage and interest. Ugh. That sounded corprorate.\"" ;
      : print {( "" + collection_get{ collection -> ("footnote_status_list") index -> (2) } )} ;
      : if (option_start_warp && cheat_leap_level < 3) {
         : if (int(collection_get{ collection -> ("footnote_status_list") index -> (2) }) == 0) {
            : set_integer var="last_cheat_leap_level" "1" ;
         } : else_if (!bonus_point_shush_lout || !bonus_point_rare_plights || (int(collection_get{ collection -> ("footnote_status_list") index -> (3) }) == 0)) {
            : set_integer var="last_cheat_leap_level" "2" ;
         } : else {
            : set_integer var="last_cheat_leap_level" "3" ;
         }
      }
      : print "{option_start_warp} {last_cheat_leap_level} vs {cheat_leap_level}." ;
      : if (last_cheat_leap_level > cheat_leap_level) {
         : set_integer var="cheat_leap_level" {( int("" + last_cheat_leap_level) )} ;
         : print {( "Thor gives you a thumbs-up and says that, due to you finding a bit more bonus content this time, you'll start " + ( cheat_leap_level == 3 ? "at the plain base, the fartheset ahead you can start" : "a bit farther this time" ) + "." )} ;
      }
   }
   win_warp_start : subroutine {
      : if (!option_start_warp) {
         : return ;
      }
      : if (cheat_leap_level == 1) {
         : set_integer var="score" "1" ;
         : goto "burst_face" ;
      } : else_if (cheat_leap_level == 2) {
         : set_integer var="score" "2" ;
         : goto "first_base" ;
      } : else_if (cheat_leap_level == 3) {
         : set_integer var="score" "4" ;
         : goto "plain_base" ;
      }
   }
}

# end subroutines

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not here.
   ask_new_game                                   = Would you like to restart {qt}?
   ask_quit                                       = Do you wish to quit {qt}?
   invalid_choice                                 = {yn_or_12}
   post_quit = I hope you enjoyed the experience. Pressing any key will restart {qt}.
   inventory_list_empty = Nothing (yet)
   inventory_list_header = Stuff you've acquired:\s
   you_cant_go_that_direction                     = {exitserr}
   unknown_verb                                   = {custom_unknown_verb_error}
      }
   }
}

# end themes

on_render {
   : if (is_at("west_tiles")) {
      : if (point_master_plan) {
         : overlay "check_mark" x="124" y="0" ;
      }
      : if (point_chalice_map) {
         : overlay "check_mark" x="164" y="0" ;
      }
      : if (point_fell_short) {
         : overlay "check_mark" x="192" y="14" ;
      }
      : if (point_take_crackers) {
         : overlay "check_mark" x="124" y="28" ;
      }
      : if (point_shift_goals) {
         : overlay "check_mark" x="80" y="28" ;
      }
      : if (point_hunters_grill) {
         : overlay "check_mark" x="64" y="14" ;
      }
      : if (point_fellow_yield) {
         : overlay "check_mark" x="84" y="0" ;
      }
   }
   : if (is_at("east_branch")) {
      : if (point_fly_score) {
         : overlay "check_mark" x="124" y="0" ;
      }
      : if (point_bending_truth) {
         : overlay "check_mark" x="164" y="0" ;
      }
      : if (point_boring_way) {
         : overlay "check_mark" x="192" y="14" ;
      }
      : if (point_dirt_home) {
         : overlay "check_mark" x="164" y="28" ;
      }
      : if (point_pouring_rain) {
         : overlay "check_mark" x="124" y="28" ;
      }
      : if (point_funny_mountain) {
         : overlay "check_mark" x="64" y="14" ;
      }
      : if (point_grim_tune) {
         : overlay "check_mark" x="84" y="0" ;
      }
   }
   : if (is_at("my_house")) {
      : if (point_see_glimmering) {
         : overlay "my_house_glimmer" x="45" y="2" ;
         : overlay "my_house_glimmer" x="185" y="4" ;
         : overlay "my_house_glimmer" x="205" y="9" ;
      }
      : if (bonus_point_eye_stay) {
         : overlay "my_house_i_stay" x="158" y="2" ;
      }
   }
}

# end on_render

## On_debug and on_startup both call the INIT/TUTORIAL subroutine, but on_debug sets a flag or flags to allow for cheat commands and also checks to make sure the footnote collections all have the same length, since we can't define objects or classes
## I now use GT CHT to toggle my in_debug variable

#on_debug {
#   : print "Note to self and testers: remind me to comment out first two lines of on_debug if this appears." ;
#   : set_true "in_debug" ;
#   : gosub "init_check" ;
#   : gosub "init" ;
#   : gosub "tutorial_choice" ;
#}

on_startup {
   : gosub "init" ;
   : gosub "tutorial_choice" ;
   : gosub "win_warp_start" ;
}

## on_tick is primarily used for the tutorial
## main on_tick (for searching)

on_tick {
   : if (verb_is "examine" && subject1_is "ooh_task") {
      : update_graphic "ooh_task_picture" ;
   }
   : if (jump_buzzing) {
      : print "You shake off the temporary buzzin' in your ears from the jump." ;
      : set_false "jump_buzzing" ;
   }
   : match "tstart _;tstop _" {
      : mask {
         : print "N.B.: my mail address to send the transcript to is {email}." ;
      }
   }
   : if (in_tutorial) {
      : gosub "tutorial_progress" ;
   }
   : if (!inventory_incorporeal) {
      : match "i _" {
         : if (is_carried("low_song") || is_carried("confidence") || is_carried("focus") || is_carried("no_greed") || is_carried("fast_vision") || is_carried("rain_soul") || is_carried("peace_surging")) {
            : print "{note_once}items listed in <GREY<#888>> are abstract moods or feelings that will help you overcome obstacles when the time comes. You can manipulate some of them, if you're clever enough, but it's not necessary to win {qt}." ;
            : set_true "inventory_incorporeal" ;
         }
      }
   }
   : if (verb_is "inventory" && !inv_plus_warn && inv_any_bonuses) {
      : print "{note_once}the plus in parentheses {pip} after an item means you found how to get a bonus point from it." ;
      : set_true "inv_plus_warn" ;
   }
   : if ((latest_warp_number != -3) && (!achieve_cddc_pre)) {
      : gosub "evaluate_warp" ;
   }
   : if (!ever_note_footnote && ever_reveal_footnote) {
      : set_true "ever_note_footnote" ;
      : print "{note_once}you can view footnotes with {vd_footnote_cue}. Each individual footnote's notification only appears once. I won't reveal how many there are, but you can figure the precise number out by guessing and getting different error messages.";
      : print "You can also type {vd_f0} to get a list of footnotes." ;
   }
   : if_examine "crackers" {
      : set_integer var="tempint" "15" ;
      : gosub "footnote_reveal" ;
      : print "All shapes and textures and colors. What a variety! You vowed, when you were a kid, that you would buy one of each box of crackers you found in the story and eat one from each, each day. But this dream burst as you got older.{footnote_reveal_text}" ;
   }
}

## on_pre_describe/on_describe are mostly for moving ambient items around

on_pre_describe {
   : if (is_just_entered() && is_at "zone_endgame") {
      : if (is_exists "teary_chimes") {
         : create "teary_chimes" ;
      }
   }
}

on_describe {
   : if (!point_healing_still && linger() == 0) {
      : if (is_at("west_tiles")) {
         : increment "rssr_west" ;
      } : else_if (is_at("east_branch")) {
         : increment "rssr_east" ;
      } : else_if (is_at("plain_base")) {
         : increment "rssr_base" ;
      } : else_if (is_at("stealing_hill")) {
         : increment "rssr_hill" ;
      }
   }
}

## Test VERB NOUN that the player types and executes conditional actions

on_pre_command {
   : match "west _" {
      : if (is_beside "cheering_voice") {
         : if (in_tutorial && !tutorial_8_talk_voice_done) {
            : print "That's the way to go, but since this is a tutorial, there's another hoop to walk through, first." ;
            : done ;
         }
      : set_integer var="tempint" "2" ;
      : gosub "footnote_reveal" ;
      : print "The voice says \"Yes, yes. That is the right way.\"{footnote_reveal_text} The fogginess clears a bit, but as you go west, you can't see anyone.\n\"Just a little more vetting. You'll meet someone who, uh, failed. Don't worry, though. They're obnoxious but harmless.\"";
      : set_true "point_go_west" ;
      : set_true "tutorial_9_go_west" ;
      : increment "tutorial_score" ;
      : gosub "add_point" ;
      : press_any_key ;
      : goto "burst_face" ;
      : redescribe ;
      }
   }
   : if (!examine_warn) {
      : match "examine *;look *" {
         : if (original "verb" == "examine") {
            : print "{note_once}to save keystrokes, you only need to type <X<#0f0>> (noun) to examine." ;
            : gosub "long_words_note" ;
            : set_true "examine_warn" ;
            : press_any_key ;
         }
      }
   }
   : if (!look_warn) {
      : match "look -" {
         : if (original "verb" == "look") {
            : print "{note_once}to save keystrokes, you only need to type <L<#0f0>> to look." ;
            : gosub "long_words_note" ;
            : set_true "look_warn" ;
            : press_any_key ;
            : redescribe ;
         }
      }
   }
   : if (!inventory_warn) {
      : match "inventory _" {
         : if (original "verb" == "inventory") {
            : print "{note_once}you only need to type {vd_i} to take {vd_i_long}." ;
            : gosub "long_words_note" ;
            : set_true "inventory_warn" ;
            : press_any_key ;
         }
      }
   }
}

## main on_command

on_command {
   : if (!say_warn) {
      : match "say _" {
         : print "{note_once}if you figure a phrase, you don't need to <SAY#0f0> it explicitly, though it shouldn't hurt to include it." ;
         : print "Just use the two words needed. The parser will understand." ;
         : set_true "say_warn" ;
      }
   }
   : match "o _;out _" {
      : if (out_argument_note) {
         : match "o *;out *" {
            : print "{note_once}{v_out} requires no argument. It just looks if there's only one exit out." ;
            : set_true "out_argument_note" ;
         }
      }
      : set_sentence "out" ;
   }
   : if (is_at("zone_hubs")) {
      : match "out _" {
         : if (is_at("east_branch") && points_right_side == 7 && point_healing_still) {
            : set_sentence "sw" ;
         } : else_if (is_at("west_tiles") && points_left_side == 7 && point_healing_still) {
            : set_sentence "se" ;
         } : else {
            : print "That is ambiguous here, as you have more than one direction worth exploring." ;
            : done ;
         }
      }
   }
   : match "eat _" {
      : if (point_hunters_grill) {
         : print "You already ate what you needed to." ;
         : done ;
      }
      : if (is_carried("crackers") || is_carried("pacing_rations")) {
         : print "Too much for you. You need to share." ;
         : done ;
      }
      : print "You never explicitly need to EAT anything in {qt}. But, minor spoiler, doing or describing the right thing will allow for a nice communal feast." ;
      : done ;
   }
   : match "credits _" {
      : if (!credits_to_thanks_note) {
         : mask {
            : print "{note_once}General credits from {tx_ca}, the creator of Adventuron, can be seen with <*<#f80>>{vm_cred}." ;
            : press_any_key ;
            : set_true "credits_to_thanks_note" ;
         }
      }
   }
   : match "achievements _" {
      : if (have_won || cheat_dont_require) {
         : gosub "track_achievements" ;
      }
   }
   : match "footnote _" {
      : if (have_won || cheat_dont_require) {
         : gosub "footnote_printer" ;
         : done ;
      }
      : else {
         : print "Footnotes aren't available until after you've won the game." ;
      }
      : done ;
   }
   : if (jump_commands_notified) {
      : match "sh -" {
         : if (point_healing_still) {
            : print "{stealing_hill_mad}" ;
            : if (!achieve_cjjc_pre) {
               : print "(However, just trying to find this sort of loophole, making it back to a room the developer shut off, shows you're an enterprising adventurer and might be a very good tester for other games. It's an important part of the whole process, as testers often see programmers' blind spots. And it can maybe help start you on the way to making your own game! Okay, ignore this if you already have. But either way, a small silly achievement awaits at game's end for trying this.)" ;
            }
            : set_true "achieve_cjjc_pre" ;
            : done ;
         }
         : if (is_at "stealing_hill") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "12";
         : gosub "mark_jump" ;
         : goto "stealing_hill" ;
         : redescribe ;
      }
      : match "wt -" {
         : if (is_at("zone_east_spokes")) {
            : set_true "achieve_tmmt_pre" ;
         }
         : if (is_at "west_tiles") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "4";
         : gosub "mark_jump" ;
         : goto "west_tiles" ;
         : redescribe ;
      }
      : match "eb -" {
         : if (is_at "east_branch") {
            : gosub "reflexive_warp_reject" ;
         }
         : if (is_at("zone_west_spokes")) {
            : set_true "achieve_tmmt_pre" ;
         }
         : set_integer var = "latest_warp_number" "8";
         : gosub "mark_jump" ;
         : goto "east_branch" ;
         : redescribe ;
      }
      : match "pb -" {
         : if (is_at "plain_base") {
            : gosub "reflexive_warp_reject" ;
         }
         : set_integer var = "latest_warp_number" "0";
         : gosub "mark_jump" ;
         : goto "plain_base" ;
         : redescribe ;
      }
      : match "sh *;pb *;wt *;eb *" {
         : print "Just the first two letters for the warp command." ;
         : done ;
      }
   }
   : gosub "item_based_points" ;
   : match "talk _" {
      : match "talk me" {
         : print "\"Me so see-mo'!\", you mumble to yourself in encouragement." ;
         : done ;
      }
      : match "talk *" {
         : print "Nobody here like that to talk to." ;
         : done ;
      }
      : print "I couldn't find anyone here to talk to." ;
      : done ;
   }
   : match "ask _" {
      : print {( "ASK is used only for " + (talked_to_thor ? "Thor, the major NPC in {qt}." : has_visited("plain_base") ? "Thor, whom you should {v_talk} to first" : "Someone you'll run into shortly." ) )} ;
   }
   : match "take _" {
      : if (!take_note) {
         : print {( "{v_take} is not widely used in {qt}. Most of what you take, you take automatically. There " + (point_take_crackers ? "was that" : "may be a") + " special-case exception, though." )};
         : set_true "take_note" ;
         : done ;
      }
      : print {( "This " + (point_take_crackers ? "wasn't" : "isn't" ) + " where you need to {v_take}." )} ;
      : done ;
   }
   # individual items I can't quite use synonyms for
   # it's quite possible I could do _ big, etc. But X is the big verb.
   : if (is_carried("no_greed")) {
      : match "x no" {
         : set_sentence "x greed" ;
      }
   }
   : if (is_at("west_tiles") || is_at("east_branch")) {
      : match "x big" {
         : set_sentence "x runes" ;
      }
   }
   : if (is_carried("chalice_map")) {
      : match "x map;x chalice" {
         : set_sentence "x map" ;
      }
   }
   : if (is_carried("master_plan")) {
      : match "x master" {
         : set_sentence "x plan" ;
      }
      : match "x plan" {
         : mask {
            : set_integer var="tempint" "13" ;
            : gosub "footnote_reveal" ;
         }
      }
   }
   : if (is_carried("rain_soul") && !is_at("hub_e_s")) {
      : match "x rain" {
         : set_sentence "x soul" ;
      }
   }
   : if (is_carried("travel_grail")) {
      : match "x travel" {
         : set_sentence "x grail" ;
      }
   }
   : if (is_exists("teary_chimes")) {
      : match "x teary" {
         : set_sentence "x chimes" ;
      }
   }
   : if (has_visited "plain_base") {
      : match "theory boar" {
         : print {( "The goat is my animal, actually. But " + (bonus_point_theory_bore ? "you already found my little secret you're really close to right now." : "you're close to finding something kind of clever. Not critical, but clever." ) )} ;
      }
      : match "theory bore" {
         : if (bonus_point_theory_bore) {
            : print {( is_beside("beery_thor") ? "Thor is bigger than you. Best not to overplay this, even if he's in on the joke." : "You snicker some more at what you realized." )} ;
         }
         : else {
            : print {( is_beside("beery_thor") ? "You worry Thor will be upset by this observation, but he booms \"Ha! Good one. I was sort of hoping you'd figure that. I actually don't mind people saying that. It implies I said something too smart. Better than being called a musclehead or whatever.\"" : "You snicker at what you've found, a bit worried what Thor might say if you found it around him. Hopefully mind reading is not among his powers." )} ;
            : if (!is_at("plain_base")) {
               : set_true "said_bore_outside_base" ;
            }
            : set_true "bonus_point_theory_bore" ;
            : set_integer var="tempint" "5" ;
            : gosub "add_bonus" ;
         }
      }
      : if (have_won && !bonus_point_theory_bore) {
         : match "theory _;_ bore" {
            : gosub "say_half_b" ;
            : done ;
         }
      }
   }
   : match "x me;x self;x myself" {
      : set_integer var="tempint" "1" ;
      : gosub "footnote_reveal" ;
      : print "As AFGNCAAPy as ever!{footnote_reveal_text}" ;
      : if (is_at("nameless_lameness") && !xme_twice) {
         : print "Also, just to make sure, you stumble about a bit to make sure nothing else interesting is lying around. It is not." ;
         : set_true "xme_twice" ;
      }
   }
   : match "turkey quest" {
      : if (bonus_point_turkey_quest) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke might make things a bit stale." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point!" ;
         : if (in_tutorial) {
            : print "Figuring this out in the tutorial is extra impressive. There are still basic commands to figure out, but congratulations on looking ahead to what the main game will be about." ;
         }
         : set_true "bonus_point_turkey_quest" ;
         : set_integer var="tempint" "1" ;
         : gosub "add_bonus";
      }
   }
   : if (have_won && !bonus_point_turkey_quest) {
      : match "turkey _;_ quest" {
         : gosub "say_half_b" ;
         : done ;
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "link _;links _" {
      : gosub "meta_links" ;
   }
   : match "meta _" {
      : gosub "meta_meta_verbs" ;
   }
   : match "option _;options _;opts _;opt _" {
      : gosub "meta_options";
   }
   : match "points _" {
      : gosub "meta_points" ;
   }
   : match "thanks _" {
      : gosub "meta_thanks" ;
   }
   : match "verbs _" {
      : gosub "meta_verbs" ;
   }
   : match "versions _" {
      : gosub "meta_versions" ;
   }

   # hint/help do nothing in QT
   : match "hint _" {
      : print "There are no in-game hints for {qt}. This webpage should be packaged with a walkthrough.txt, {opt_ch} can tell you what to work on, and you should be notified when you have one word right in a puzzle." ;
      : done ;
   }
   : match "help _" {
      : print "{qt} prefers {vm_verbs} for technical/parser help and {opt_ch} to cue which things to work on in the game-world. There should also be a walkthrough." ;
      : if (!asterisk_help_note) {
         : print "{note_once}you can type <*HELP<#f80>> to see Adventuron's default general help." ;
         : set_true "asterisk_help_note" ;
      }
   }

   ## standard verbs that do nothing in QT
   : match "z _" {
      : if (!wait_note) {
         : print "While waiting is a standard parser command, there are no timed puzzles in {qt}." ;
         : set_true "wait_note" ;
      }
   }
   : match "drop _" {
      : print {( drop_referenced ? "No need to {v_drop} anything." : "While classic text adventures often required the player to use {v_drop} due to inventory limits, this is often regarded as needless fiddling today. Modern text adventures, such as this, often take steps to keep the player's inventory manageable so they can focus on puzzles, finding plot-plausible reasons to dispose of items that are no longer necessary. Plus there aren't many items to carry here." )};
      : set_true "drop_referenced" ;
   }
   : match "xyzzy _" {
      : set_integer var="tempint" "8" ;
      : gosub "footnote_reveal" ;
      : print "A low voice booms \"Vexing howls? Hexing?! VOWELS!\"{footnote_reveal_text}";
   }
   : match "listen _" {
      : if (point_see_glimmering && !summoned_teary_chimes && is_at "zone_endgame") {
         : print "You locate where the tone is coming from. Teary chimes, at the front of your house. They remind you of many things. Maybe there's some specific tangent to ponder before moving on with things." ;
         : create "teary_chimes" target="my_house" ;
         : set_true "summoned_teary_chimes" ;
         : done ;
      }
      : if (is_exists("teary_chimes")) {
         : print "The teary chimes ring out consistently but not incessantly." ;
         : return ;
      }
      : print "You don't hear anything right now." ;
      : match "listen *" {
         : if (!listen_no_subject_note) {
            : print "{note_once} listening is a general command. It will ignore any subject." ;
            : set_true "listen_no_subject_note" ;
            : done ;
         }
      }
      : done ;
   }
   : if (is_carried("pacing_rations")) {
      : match "x pacing;x rations" {
         : print "Very sensible rations for any sort of long journey, obviously completely well-thought-out and unemotional and stuff.";
         : print "The printing on its packaging avoids sensationalism most admirably: <YUM? NO. NUMB, YO!<#888>>" ;
         : update_graphic "pacing_rations_picture" ;
      }
   }

   # diagnostic commands
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "You have completed {tutorial_score} of <" + max_tutorial_score + "<#f0f>> tutorial steps." )} ;
      }
      : print {( "Your <core score<#0f0>> is " + score + " out of <" + max_score + "<#0f0>>." )} ;
      : if ((has_visited "west_tiles") && (has_visited "east_branch")) {
         : print "You've solved {points_left_side} of 7 parts of West Tiles and {points_right_side} of 7 parts of East Branch." ;
      }
      : print {( "Your <bonus score<#f80>> is {bonus_score} out of <" + max_bonus_score + "<#f80>>." )} ;
      : if (!score_bonus_nag && bonus_score > 0 && bonus_score < max_bonus_score) {
         : set_true "score_bonus_nag" ;
         : print "{note_once}You can track which bonus points you've found with <BONUS<#f80>>. Also, while {qt} will always let you know when you're half-right on a core point, it will not do so for bonus points. This isn't to be mean or stingy, but rather to make sure you don't get sidelined guessing a non-quest item." ;
      }
   }
   : match "think _" {
      : gosub "think_thoughts" ;
   }
   : match "i _" {
      : mask {
         : if (carried() == 9) {
            : set_true "achieve_haih_pre" ;
         }
      }
   }
   : match "bonus _" {
      : gosub "bonus_display" ;
   }

   : if (have_won) {
      : match "cheat leap;leet cheap" {
         : print "You need to mash these two words, then use {yn}, to toggle the start-game warp." ;
      }
      : match "cheatleap _" {
         : gosub "options_startwarp" ;
      }
   }
   : if (in_debug) {
      : match "cheat _" {
         : gosub "options_cheat" ;
      }
   }
   : match "ch _;colorhint _" {
      : gosub "options_colorhint" ;
   }
   : match "notify _" {
      : gosub "options_notify" ;
   }
   : match "tutorial _" {
      : if (has_visited("first_base")) {
         : print "You are already past the end of the tutorial, which ended on solving Burst Face.\n" ;
         : if (ever_tutorial) {
            : print "So here's a recap of its contents:" ;
            : collection_iterate "tutorial_stuff" {
               : print {( "* " + item() )} ;
            }
         } : else {
            : print "You've obviously done well to get here without the tutorial, which contains only general advice and no hidden secrets, but if you'd like to visit it, type {opt_tutorial} {on} before reaching First Base once you've won or restarted {qt}." ;
         }
      } : else {
         : gosub "options_tutorial" ;
      }
   }
}

# end on_command

## assets are arranged by room, in approximate discovery order. QT is listed below TQ, with F

assets {
   graphics {
      nameless_lameness : dynamic_graphic {( tutorial_7_listen_done ? "nameless_lameness_2" : "nameless_lameness_1" )} ;
      nameless_lameness_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4dLS0v/AACAgICPj49CHXltAAAB6UlEQVRYw+XYLZaDMBAHcHKEvFe9Ar0OiUXVIbhCe4TKWnoABBdAILFcANFb4LkC29eGlkxmhoRAzf59y+8lM/kKAhUhVYZX+uiZ9pPwlbtK/sytVMlU0ul/ZPJM/c5pykXlOj4SvDP97kcDxBDwOwG6rQFiAdCggBICsun7hxfguBYwEIA7Dij8AQEKiKgSAIDMACQJmANbwGAJ0EqgMAAHd4DQAaANGhaQGYDEGwCKIAQ1eJ/PwGwAUgg4rgb0c0ADAfmXASEAdNQMpKAEPoBKff9sWYR6EVgD5OaAGAXkXwAMGEAbAGQV8AAIAhBhgDwn1sF0PUA6ALo1gJoHwK0AAJrdAdIFAA8D5F7IAi7/DlBxAEECYgzQbQ6QC4CWWwhnVSgluRfwUyDNLhy0/RjbizYEiK0AKQ2ovgs4kIATBpAkIGYAnzNxaQFgzwPLgGZ7wOgB6CCgIO4ls0PhG3DmALMu7HcGXO0ALQe47QqIXAClATAuBhUAjCPWhr6AjAbUqwBxy3UBUgQMoGIA5GbYugLMIqiJlWgJ0GOX42VA5gkAp3LyecIAlJ4AYQD49xEaYKyF1O306gRo9gYYp/LeFVBQhyJjBlQbAIDA3icMQOgAkNRKqPUh/0YVw/cRGwCcA2MAtLX4D/JD09PQHmHUAAAAAElFTkSuQmCC";
      nameless_lameness_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4dLS0v/AACAgICPj49CHXltAAAB80lEQVRYw+XYLZaDMBAHcHKAFXkPvQK9DolF1SG4QnuESiw9AIILIJBYLoDoLfBcgd22oZDJzED4qNm/b/m9ZCZfjqMipEr3Sus/U4/xXrmrpM/ccpVYJRr+R4bPlO+ch1xVkv4vztcjD8Hwu28NEEDAzwBo9gaIGUCFAnIIiIfvuy/AaS2gIwB3HJBtBzgowKdKAABiAxCGYA4IwBi9CGcBWglkBsBdChhHQOgA0AYVC4gNQGg/AgAAisADNXifzsBkACIIOK0GtFNABQHphwEeADTUDESgBEZAob5/WViEehEsBsjdAQEKSD8A6DCANgDIKrABIAiAjwHSlFgHo/UAaQFo1gBKHgC3AgCoDgdIGwA8DJB7IQu4/jtAwQEECQgwQLM7QM4Aam4hnFShlORewE+BNLuw0/ZjbC/aESD2AkQ0oPgswCUBZwwgSUDAAMYzcb4AwJ4H5gHV/oB+A6CBgIy4l0wOhW/AhQNMurA9GJAsA9Qc4HYowLcB5AbAuBgUAND3WBtuBcQ0oFwFCGquC5AiYAAFAyA3w9oWYBZBSaxEc4AWuxzPA+KNAHAqJ58nDEC+ESAMAP8+QgOMtZC6nSZWgOpogHEqb20BGXUoMmZAtQEACOx9wgB4FgBJrYRaH1L3ghYAvOUAOAfGAGhr8S96lNUYSAJIWgAAAABJRU5ErkJggg==";

      burst_face_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVTU1O0tLSlpaWenp54eHhiYmJpaWlxcXFaWlqtra2WlpaHh4f//4AAAECAgICPj49XvJqTAAAC10lEQVRYw62YDY70IAiG8QAmeP8raTIHaO/ytYI/qBXcfE122tnuDI/w+kIX7uH4gTzkTRfWh99+x/Q93THd2H4QPuIH2H6HASA+P1dawftlAkYSBCUB+X6Mb4hU//DKAFeJ/QXv5wRAd0XXHcEyPnA8ihUFQCy3vj7sxwSAQ758z3RdCQBgW4LEr1ctQVKq9wIQWI1fakCxIacEYXtMAHEpwo8P08m1+AHxfY+Z4Xl1XA0DQMFIK4Df9jsc6628wrv2DMCZMAAkKn0nOkMCBgDk6M/J0VuHjPZ9eN5rsQW/ZoAf2DKQF8xCQGibArcAkaJecekDyQBAMnxXzUrAEDotbmtwS7HPTpizA1oGePXvVVZiEARo12DvA80EdAAu9+MDpESSAaVFl4AIHFsGtjY4aoADQqk5XUE4AohNg7kE8QCgC8jZb281gCS9aLENdQVysvuuzOVQAR71lzZAPkzb4U8Aohe2xrTfhddCBdeZDxQAXMwDihX6PrI4gaAy+JCTBSiLx/0+GAG6kKVL6zUo+ocVALvi1gdeCVxrI0qWGpRW4Fw/CUFxBEMKojoTGgCepTYA5DbMfVlLwWiEyToPCIDQAOpcVLuD1YpSLXsDiElJwRi2b0ZYd6iagmq8qZWAahOjEaAS1F85KGSWFKQeBG5zDdzkPK0o5I+5X541xAlATwG2kViaYR6TVIBUpw/jk1FLQGn6ciR+I2NpEKhPhYmSX4VwAEAZd1iLLUWpzoWiE6YiAritNXBdI4ROiaUSYAPohZiOAChEzT4OCQjuCOBbA/c3AHbjJ8L4nKoB+OnRJKvxCMCFyYPCYApoeTLhqSSr4AQgOJyfz0Ei4W4kETNZOi9Bq3tZd98hlNG898CtBn6aE7flopwMtgB+HIr/AwAO/yZxu8l04YGnTigB3BR/uw387IGcDDOAG6NN/7DabQPpgf1e/CsAzpPhZhv40QPb8Q/bUeMLJVVwzgAAAABJRU5ErkJggg==";
      burst_face_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAIAAACemLPeAAAE2ElEQVR42u1dzZnjIAzF/tzB1DG3KSB3HzMNuDIamDn6ngJy2zq2huyBbxnCjxACDxIO31zWcRwDT9J7QrCTUheFaNfrmzqsfX//bftA87bbtrV64LreVb+27x/k72qtmw/v0Xj4NZwopWa2vX2hvx79B02fLDzkDeDxuDwel469bfgTZPRrrbXW3KanHv1mKK7Xt1aDzBD9BsD2L3VP9PqilJqmW/feuj9EjnQ09DPEPfmdo303F7XWZnwqh5ch+gEAA+g3FydAA/TtcOk8EdBvYWQhEn1CRwoUjQCp90xdj3YZP7x8cE8zXdhCkgbQvdthb7OvhEe/B30YQ3wMIAvx8AY3VtjrEoPeQQawcNaypsNIU0SiPwV9e9Hc4EJkXd97DcK63j0bgC3Wvj88MtHbRm0wQVo4R73mrwGjP4Wqfe8ZBLTWLkNrJW/IzxTRAK/vfTRL0TqtWuhBvfxPw/xpQxsAyE/ozvHdYdhZAv+JJn+iV0LDmE+F/pTP83CwbZuHqvp0JLl9fb3DYPV6ZF070rubzkr08Rbi03TzYO39094choVlVGRHkyRAlhDDHPb9owsXAig7HBNKdZEs9w+Te/dTSAS7liHa/XupDw8B0Tm2ejdMm0h0iimKj0yMjiRt8W1p9SCe0++CO4tpWCL3cv8mF+SitIjiA/iWAv0jSoCsGHhaBxgmApSmfTDOsm9F0Ofnn1IHj1w0OKEBuKxncAPAQAHDE9jWw0WFDZ7FibABOP9DoDDutwYRwdnJHhL9luR4SX3pAgbpwl0lEE3ypDI/TxpAnbjx17vI9CsZ+nKXhOG8JyyU3euLF2uGXweAyQM3918f/bK2IdEGMLQHyY5m9bxmdoTi7s5/Qkwg0S/C/WMGx6C8aDHhJG1W7VKq/NlOqezj7/5LLUEi4YFZCbydC2UAeNEtXSILWuSCMz9hq7QB5gURgA0Y9x3aANKtn0UEl1YHiFPtmCpoVbJCzNAGUq65hsLEDWBINVw636z4Txay0X0CsDsIn8lcEAM2QKdAKf4khQjR9r+fwYCzNpAKEUK5EE0n/JwKUaMkhDIiGCIdS6DrLRa5+xEzDgPYgK2XDkE+m8/CimopQaB08twdj5xdnUfAal4VWAV3V5GZ7wqqjwNRtTBlT4YTIQaKCt+LhGD3HfGEJQsMlFPb56VsnMd459Ra2NNOGszRiGxtgFD1Xlr6370IlHDQSzblBR+sIqKRDcArEBrBALJu0g30mHNQPBzYTYkd40BpfMveid8dMV4E8EVwkx8TIRKiB4R493h7aLZt66uGi0LQMCXQTRq2FkhuJic7rxinCNQS24t8MkJZOdtQMp2hYQ2AeRAAFkcxk+3agLtC5H63ow3AQWCMTczN+Q+yDVUK4XrB0uSJtyDKrWvhEXE16BdRDFuPflgDGDU8D4P+1IGYZMFQo0d/Jw7Q0C86VoToB9Zwsxpgmm5DRQC3lIVcIgF/sePZEApd8TZqEIBPB0LugPk5D2K6FVAgKbVxlZOKOUOh41m5rSArcRdYlvkg0T+yBjja7/7H3/0MvWZlJFHmk13lxRjJgP9HWEOOkcoInaQx6XKR6lXBUaFwlef8mpvUM0Por+t9pE2S0g8Fijr40s0xLwoExX0+Xr95AkqEDADQ32oj+z9U/q6s8w3UOAAAAABJRU5ErkJggg==";

      first_base : dynamic_graphic {( point_bro_poor ? "first_base_after_bro_poor" : "first_base_before_bro_poor" )} ;
      first_base_before_bro_poor : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAADStIwAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP+lKioA//////9h8viPAAABXUlEQVRYw8WYTWrEMAyFX5ddFCUnGJgL5Cg9X1Y9z0AhJyhzBXnZRVFlx83Psn5BNjMQBjJ8fJae4sCoNa7r1v4P4ABSJegB8PO8RAEB8OWLV0BswUrAKiAAVK5QAKZ83AFdBQSAvDvAk1UAYgf8bgcgFRAA+Zv3gFMAqn+QATgFhIF5zq3IxiHa9c/zh+kbG4cEwOtsCnoiNAKgtIGCH4po70EDzkNxGAOLEOUjp+cCebnFASggh7uzgsF0jGxDk8/lpMCvGxQwUbwsRwVD/m2MBDA3oLuCcvV/BYyBxxYEWUG4AZPHfdJNQXwNmHxPk4fR1gbhXQC77wDhOfA3EEz3KAxNwgqAChA+C2oYehrqYRxaFwChBFBFiDIOhRJwAQAngEnCDSD1eSp2gBrEvc4FqI9kqdPJyP2vAL3Oht6CpQZSr9Nx3gHQAtoBtAKkXm9ISgmAFkACCC3AfgHKKpPEICpolwAAAABJRU5ErkJggg==";
      first_base_after_bro_poor: base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAADStIylKiqAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////8EusaTAAABoklEQVRYw8WXvXECMRBG104YR0KmgBvTAUMBVOHQ5xbIqMWRW3EDXAe+zCE64RyvdyWBnaKPWe0Mo0jizdsf6Yhrw+foGAuq3nksBM0AbqQAAEgKFmvfDCApWC9WXTOAXAUr3wwgKVissCqAAFTBGmwECIBTBrBGwABuMAswAM4GEAUgAK4ABMDHIQogCpYSvhkA+8cE0DUDOBILwJNvBsCOvxEFIMDE0bEqqG6EeoCT/gSAN0wK0JkDjMyfCsAcFcCbAxzC6TClA5KBSgUAQBj3h1wDnAC8eQrG/TgxP7y9F4DOGOAl7Pspn5ABvDFALwCvrDmg+2X1jVAP8NOH4XnSI8gBlyIA8BWG3kWiCF2KwCQM/TAR7bYzcsC7ABnFYZD9OwkHKIDugg9yswKQFcy9JUCUvXQGyArcXWcJIA0YFYBceR3OOXpDABIFMVWhK69DWa9WAABICzr5e6Kty6/DuWrxpgBElxSIgrRcq6AeIJ4BqJxxNDYQtQiSgMsngm0NkOZAALZ/XwimXSAZkC6k/wJM50DUJtSlVGAehRWT8Bcu5JFKowtkJAAAAABJRU5ErkJggg==";

      plain_base : dynamic_graphic {( point_gravel_trail ? "plain_base_after" : "plain_base_before" )} ;
      plain_base_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAC8klEQVRYw82XvZLcIAyAeQPG1ZWZ2RdI4eLKfaabFJR+Dlf7irqkYLZSLEAS2IDti3cu7JyHM1j6LPRnYzoDq+PPHY8v9MTbsMFic0BDz9jYP1YAOuLxvwEA+iN1NA23Ach09hIAWCQBmTsqWqRbk96NAUh9Aoi/5amweJEFwuuZINmoMgWAwBkA2A64A3A/fp8BVHq4Y5sAcbULgON4/HYJEDWhAewBhHnHB/gMHI0xXJsnkB9BlE6xDaYLYHDHAiHgvcsA3NRKDxGAUkqUHpOL7QGY3SMgEzhXACxGGDsAJEoPeAMA9pQTkrXdBsCN2AEgxSJ9BSAbjoYhmeB9A/Dr3gXIwtCuAZb8wCmomogcC5OJdxULkB90osBKIjJrgJ1U7FmyTNBVAVwz3VZEU6n7TgA8ASCSZQInatcBC0As/Fo0wpVCVwAmPvivAGitE8GxTcgA2CeKYEyB65N/efUzkvB8FHpmArBVAK11McXSPjBbC3QB3Mdb5uj04HOeVUv6pwoQImAlOPZJOYCtAWAGMAwKEN90nhlhUT8/2DI1gKLY8nEbyAHMBgBMG4DNLgCPthNsAMglUkOYA9jkL+KE9D6gIZcAXOtFERtOUAAkwXzqDMAmKIoGP7sBoLQZxu8bK5GZ3Qb1ptZh9AGbZ0KxiBQNVCdcAYAoud1+4mpmLFvHT+lCtQ7Kfiel/AwA1AL7AGLoqBYKAHaDSQFCCQIrgk1iKGqB+ICCSiJaAUglSWptDmATHRXHcRzfJ3Es7UhAv3cUAEw7ta0ApJbGk4fSB+KiLwAOfZjYLwBUUn1aXKJVAP7906wLAFgFWIzAALtxavY+Tps+wEW1rDznAfZ2bKKgc6yx4SPnvxBglYq/H8B2vCYmotcCcLajEliMBzLcKwCmYfBlNawCaPN8IUBsBYdBe0KwDYAky39cC+BJLQEgd8WmDsAP++HHpQCoAHn6WQNoVvocrrVAGAGg2PVsnUDY+1qAek/Ez34Ob2cA/gImzfDTCE2eZAAAAABJRU5ErkJggg==";
      plain_base_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAD20lEQVRYw7WXQW4bMQxFeQADhFddBsgFuvCiy5wp6EJLn8OrXGUOYEBXYZrFwIAAViQljTTWTOSinjbuZD48fCIp6hf4/jrxxrUpbFwTA4D8EAICIKUfoPgHktiL89Z/39eDAFdkjpHiJ8tHDBVBJCDprYqHJwIEiRLjUAwdoylCDBcfUVSS6J8HECZdNGh4BRAYDW8AIgZ+HsBEkmqSQmMsNaLUAaQL5GESfR9gI9DpEYArEWqrSTjJgXSitoIimBi4C/DVT8HXVmb6DUAWThZOtna2VUvnJ9H3AVINZhev37/k8/xoBYKXokvLSWDSoksLaGDEJB54A0A3vHMLgHMPTgEv208WjqnxbcsbBWfRbwO8za4FcOdHEnCNOZZ21/Wy9l/sAzIEyqIkYAPgK4ddANzv8Q4IICsFW691f/wXbVdSEf02AJ/uAU4PNEBcoixYQuvMRVmwPNA9kERNgADM5/TFcsPO3QNoH4xNALQuj1kHm37aiUg6horoM0B5c7mZ+wDn0QawLtehIznQLQD56MmiJeAJACG9lzTlEk9PHq2HwGTRZ4A5v7nc2JfuLxw7AnTlWnqyPEgpQLai5cHElAADcLnw/wFg0qWDnXVgS9eSyyNYRF8Acn8tfSZHNV+a194+tnfM2gOQzZs0etmGEaW5nMWcgAzgjlWja6Eul4/ltfYLDU0AiwHpGEgAmI6BIvoVwPvxxwKgK71dCkK8u5TMfOcBBkxYFEsCugApzm0BGGyCMA2YMBX9AjA3AOfdhcK3DWi9x60J48aEycMDbwPIoLTr9Sev7ohg34MkE4atCePahKnkdwAgB/nz+sqrOznF8tAqH1UDZhOGrQnj2oSJGHgHALkFwBoAUxvMHYB4BGUTxq0Jo8qEqeh3ANQwVADUZCC1gXznFC+3mkDZhGFrwqgyYSIG3gNYtrtWHpseSKLrAFxxxISp6AcB+G72JHF28e8KIHBlwqg1YUiNGPgBAOwCxM26AghTbcKoNWFAjej3AbAGsMLVANAHmBoTRq0Jg0YMvAvAuDPyyVKiR1cDcMUhE6aiXw+31Sj+F4BA3JgwbE1YIwb+BgB2pl0aRGuA+L+QIROmov8OIE+7y/riArcGmNLYLyaMWhNWiwfuA3weX1anYQ8AF/NcAVxhzISp6O8B1ApGgMUTwgZAPgjcSw0QYNCEiXjonbASVgBkwFSW7B4gN8f7sQIQDzBkwlT0PYC5AJyr8XNbxf9YptKxzsCkPgsaE0atCVvEw6bHUID24WYFPmuAKwyaMBX9IEDfE+UKHI/LJAzJZ3FjwrA1YUUMnbf+Bd9gBJa+zZ+BAAAAAElFTkSuQmCC";

      west_tiles : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABeklEQVRYw+2Yf87DIAiGSU9i8ABb6AF2/+vsAq4/5ldm0YKh2/dHmzRG0ujTF0UQ8PiJ4x2mZxyndsjGdz/bIdsDs5NicFB8g+N9HnR9JVvNjl4AkQ1KbYDIbOQGgHyyNgC3oR9AYP6mDLD5f26zAJt9cARA/rctBfbfOQFENjDVAQKzkSvA3rcigLBWvAAC8zfV4kBk/cEZYLe/JQWsMcAEUMYCAcAcA0wApX8FAHMMsAEEtu8HKQ4E1qczAD73+F4BewxYAMqBvv3+HqDcz19vLxf8AwD46Tq4XHDFgb6zgKSzIPadBV0Ah8fxE0/NBw4TkkfCEzKiz/xPqgtWgKmb0hNPzAmplhPmtO2RUvIGiJa0fJpfLUFHXXBYmMwCqCUAfUKY/d26H1j6y/xaCey1IbVqwzkWrAJoJYCeGNAuz9/zKyWAnhjQvKDIAiglAN0KKO8BavcDk/1vfp0E0BMDWndEtw0geQFEqeSqAWCySQA9MaAJYJTgBXdLVyyeX4HuAAAAAElFTkSuQmCC";

      east_branch : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABiElEQVRYw+2YUZLDIAiGOQscYGfgAHv/6zQHcLuNSTSCihPTPtSn1FT/T1DAAHY0ORrHLpJT4/K/Ih1zA44RfB6Aos94PwA51385gNsAnQDU8PUGIG8GkGkAWN9tUY4mAlDV21FuRL8XIEMwAEjEfQYcACcCagGgC8AaQKklyTb3q29IfwUwh+TOJEtNxArM2zR1gByaSj+XR68NsNFuD3xeEa0icHIno3WuWYYaVzYOPzvAHIkolzbWJwS5rekLuhFAvgBfgH6AMtIPHbthAC3ZjRx7HATgdtjtMBF2LgPEqK93jT2C/S6OKMl6MZOv5/8lUI5bFAD7TBJCqEdVMx8fDilzLGBSabNSgmw/fp76YbHqvzWx9FYE6Wto1KKZfiTgnoqoipCstbckCwcAW3dDhw3cNWE0wIugcjO6ASAc9Yyy62kawK4fFv1aoNmFpwAE3QPvB+C7AB5GjOXB6zE492AEMCwwsAvBqR+My7H64YIvAkj1A9rX81kfqTL9h5HjkqTlM8EfRkPI4jGIFp8AAAAASUVORK5CYII=";

      hub_w_n : dynamic_graphic {( point_master_plan ? "hub_w_n_after_master_plan" : "hub_w_n_before_plaster_man" )} ;
      hub_w_n_before_plaster_man : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAhElEQVRYw+3UywkAIQyE4RRg/0XkYgtbgLCteA7CrGwJIvz7yNwlH0OiNTiWgAQkIAHLL88BAyQWcErj3w3MHShwA8PoHThQgKSOAwoK6FYK3IDRgNES8AmAL2YCwjfkvYC6SWCr46PKa4CAKXBHAeIBAQOcBsQDAGIB9yliH9GuJCABF2/W9E17T7/QAAAAAElFTkSuQmCC";
      hub_w_n_after_master_plan : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAiUlEQVRYw+3VuRGAMAxEUfdfihI1QkVKFl+4ATPzk9VArIcu2gNHM8AAAwwwwAADDDDAAANwQMBxA9B8K4UAVOPpyZWFAE5acS2IXfwkAD13ja9XLwUyA70DWg2AAPEBKoqbgdsBvN6CNYTQHThrWNAdiNV8UXcgdw1UyoDWMPdfgGnBzEoCfosXzzjyF/ZYz+8AAAAASUVORK5CYII=";

      hub_w_ne : dynamic_graphic {( point_chalice_map ? "hub_w_ne_after_chalice_map" : "hub_w_ne_before_malice_chap" )} ;
      hub_w_ne_before_malice_chap : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw8XWQY7DIAwFUEtedeU7TC5g1Rftdu5Uaa7CAUbKGChtIGwIg22lqZRF/eLyE+BrrORYLMiop+ri4A/CBIBZD0RBtANs7QAU0IzgbgbQxsgAiqgEpgCgfQ9gCWj676kagR3g1V8FLgBBChTbBwosHgCIvfMHrABVCinfffq6nsM5wO9P/rgA8AhgI8AxBCEngPL5cgxmAYXhBgDTCWxNCt9PojqHdxsAa1utDEAHgMYw7BQgvZDEBiAtgCgaWoCYAXQJegI47gUg/QXoAhAqGWgGsAywyWkEnQwMrsIZQNmRgHgBJO8JxQog54q74s5lO0BMgSOAIRUaAbbe7eeaWASXAIzH7sXAaAYos68LV0+g1/+ZjrNgMeCVvgQIzzz/ei2ungC+50Cfe2fDCXxCkF+IcD2H8B8pnMnhJOBbywsQl8ANbg94dB6GKwAyAhAjQO8RMAj4A7zBbqsBSRiFAAAAAElFTkSuQmCC";
      hub_w_ne_after_chalice_map : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAbklEQVRYw+3S0QkAMAxCQWdpNoj779YVIlRKQAeQ+3g4yjiadIlVgJoBOgAbgHwfQQCrADUFdAAmAGmIIAAYEpAiCACOBJQIAlgEKAXQARgApCWCAGBJQIggAHgSmEcQwBpAqYAO4DGANEXwHXABCrUdDkSf978AAAAASUVORK5CYII=";

      hub_w_e : dynamic_graphic {( point_fell_short ? "hub_w_e_after_fell_short" : "hub_w_e_before_shell_fort" )} ;
      hub_w_e_after_fell_short : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABL0lEQVRYw8WWS66DMAxF75t6EL1sgLW706wqbIA1lCL6UQuxndjiAmJEzlHsWGA5S/3La7AEB21+vAEEfrgBJH60AUR+sAFkfqwBFPxQA2j4kQZQ8QMNoOPHGUDJdzfAscA539mgIh0JtPhtgzmb8JtA+hFo88U9mC0FwI6GgX9qMO3vbDP4FqhQ5Gix7NOEFVnM/5KEdad+gVQ1AlLmqf8YugiMzIEegdR9GnwEjptS1ZUuAq9x5jMJzQID/HUWOggA/UPxPYjKK6wQKB8BynlyaYcK76t0CzCoAbi1+UyPe0igzZfC2yYMCIAIA/wNiwEBMA/xv1TMArxdFwoQ8fpcKcDMJUBA8T/ybGGQVw3Qd4auFYgqgUEgpgktNQg5hpavmOlSgQIvfvGaqN25A79dYLzWQLxqAAAAAElFTkSuQmCC";
      hub_w_e_before_shell_fort : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABH0lEQVRYw9XWQRLCIAyF4ec2C8ZewLNnzanwAj2DlbGVqbRNIBnGVHfq/ymFEfPRpNu0DGbdTMrXzzjvawXq/iFg7et/AxvAt+8twGXfWYDrvq8Agr5I8HyYAX77AkFrvwKo9R1XAbK+nwDCvrkAdcBx31iQEGqAs76lIGVA+AGc9y0FyNcecNWvC9o24NovAQmCMT+AUPSny7nPwW8XhCQBeG7DvwSEwQBgLGA7zmxOQjWgo7+chQaAjgUoDqK4DQsAsRggtg9F/nxKM4BB7X2m96ML0NXPX78LAKKeBchZdADA3NXfUdQAztdAABEvz5EAZo4OAMH/kfUWBlmtAdr20FiA1xIoAD43oWYNXLah5l3MNBQQYdWPVidq87wAfKRiVShnHvcAAAAASUVORK5CYII=";

      hub_w_s : dynamic_graphic {( point_take_crackers ? "hub_w_s_after_take_crackers" : "hub_w_s_before_cake_trackers" )} ;
      hub_w_s_before_cake_trackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABN0lEQVRYw92VwW7DIBBEV/6D9c0nWv9xjvxkkXuuMjGx4xoSt4GxN2r3gkZC8GCGRT5eXPJ3AYBBpwJwtgUIiKUOU91GI4Awb4fp7PEisNTxAOF7s24kcFcQoB5BSo1fAfhTvIQhBSiNg1TvP57c+yWF1QQEgFPtvC1ASAEQCfwdAMwscNGG7nUWdDohWAJkr8BHBF0aksErSGKgt2cAwz6QIgxXBAfLTpgxDGsDzH/Dx8aHw0L45MrH9YF85Rko57IDmPUGl4EFGwCFCFKfgA0LCk0QMgF0CoRMAJ0CIRNQkfsqANzp1AL8Mp8FCF9nSvMA2Sdbqn8C6J8qkHq7pG5aqWYB3qSh9D8AwGfL6B1uAMroPSx4bwm9SwaU0DxA3/TrI5XqXQD6tl7zAM04T9tqzXfC4+oCbO+g76wTpBYAAAAASUVORK5CYII=";
      hub_w_s_after_take_crackers : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAADXUlEQVRYhc2Yy2oqQRCGhSGg7e1VBoqAEjznFQLi+whushRcucs6K8FlNj6AC2HWA4L74AMcyKnqduyqmp6bCSYVGVMO2t/8dZue1tsPW+s3ALy2mN3bpw86a2/k9/beyB9+eiO/++6N/H7qjfz2izfyBx/eyH+YeSOAV7b+cok+W3+3Q5+tfz6jz9bfbNBn6x8O6LP153P02frHI/ps/efnlhSgs5QC9HZSgOFZCtDdSAH6BylAey4FGBylAA8IIARYL6UA+50U4PMsBXjfSAHSgxTgZS4F+DhKAWYIwBOigwDc7yEA94cIwP0uAnC/jwDcbyMA9wcIwP0HAhARQAARAQQQEUAAEQEEEBFAABEBBBARQAARgSAArfSPAQDa30YACwkAf+zq+FYIAGMGcMZU4wAxWjMAGOHigEcLcAKg9emtCAAvcfyNCkCMay/wWw4A/yEJ6M0CTCH7uwLEEJcANFYA6OIhgmh0VeAEXoEpZJYBrMjRIbAYTAF7zAC2AE9XgCRNAFJ7sAB07UAUMLrmAImQ5UAIIOYATgGLwRSwRweAy0f0/QxgAhBP0hQmDoBORiMGYOMPvgpg+uheBQo4gGIFtsSLLxTBAdirQQnSWxVQOaBDoBWwV2hfXgFgCjTPAVcFKygIgVYALgrEEM6BGlXgQgCiD1AceCf0CrgC8ApgCjgFnkQVeIBAH+AKzDIBHkUnXKFkZQCsCogg9kmYB8h3woocIKMPxgzAh0AroMswD5CbBaIKQiGwAJEAKFFAN6LkAhBlAPHoGxRo0IqpBFJdBQtYwJdyoH4rTiJwEmR9gDKU9YEaVUCjSFdBfQVsEbJZcGlEDfqAbQO+D+z9NCpSQCShBrC/zVtxZQ5cG+EFwN8QhIfRVs0CBWDPtX0jqpwFJD5wgKACvBHlZoErwuRGBfwwDAPkWrGaBbYK8OwEbsyBnAIqBLlhpGYBpX9if7B2Fag7Ip0DFQpgCshZQArEXoHKPpC7JwSAMoBcKyYCNgt0DlR1wtBN6XhdEoJAK94GZkHZvkBWQem+wCgFjFLAqEZkFIBRAMZtTFwaIIBRAKZVd2/qFLh1b3qCgr3pmwIwCsCozbFRAEYBGAVg1ObYKACjAO7+eIIe0fDdqqGHNvf1f8VDqh+1/zZPM48vP43iAAAAAElFTkSuQmCC";

      hub_w_sw : dynamic_graphic {( point_shift_goals ? "hub_w_sw_after_shift_goals" : "hub_w_sw_before_gift_shoals" )} ;
      hub_w_sw_before_gift_shoals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACB0lEQVRYhc3WvYoCMRAA4MFgIeuxr3B4lV0wreAr2KT2lRa7vIX9IhxsKyhYipX9IRx2Qi6b2d1kXQUxOcbp/GHm28kkWfghipPAACqAIAZUDQAyANbnjBZg6lMBcAUY3QwIQTuEJ2qAeBsApwGcqDvwHgBgtADOiDvAyZeA8ihuBpCoA34DKAAnvwECNmEhXgve7IPIgP3+ieIML2LcB4GAwuUtG8p3u111wPgxnfqfoPVbIKBMMZk0D5Ycj/mK2RqzmSsyHA6hVZZFBfR6vSo9z9eHPMHsaZqW39rFvm62uv3cMQF8ORorTH8sI7cAvtAXWQFSvdHnsz8CXh/CAQM1UlmGDcgP+QcC+lLL+RwnoPzjtgEIqKckAsDM4GRkYmwBSb7OV2sLmGkTFwSk+qrPHsALHgEwUEuVWQAH2EGCgL5cyDkCuNZbnf4PwNTnSo3VAAHlCiCAS3mRfQQAmC2gOwDsfzgAwGwBdQsAMFtAIsCuQAeAo8gCAaJagQ7ArsBDABPVacQDAcVdwEo8A2j2YghA3AWw+wDWAvAYgMIDMAcQDsAc4Pt2/iIAhAN8igbAHAC7joDCr+nP4euAwgN8NQBMjoBfB7h3CkBgBzxAhk9UHkTMAeb1TWAA3Su6XokogE56C6hf/OHmLr7pw8uAOj3exe3XEHsQPS4aE9DuZycefO3FHw8KxVhEYFXGAAAAAElFTkSuQmCC";
      hub_w_sw_after_shift_goals : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABDUlEQVRYhc3VQRLDIAgFUGa4EDPcf5Vtb+G+Z2g7WjXRGBJsf9jqyBMwoScogsYgFEDBgFQAggFifmEs4J0fBYgdYNwMqGKHMKABehuAYAABXYF7AIixAGFwBQTeAuSnOA8gqAJ1ARCAUBdA6eELvRaS3wEA8EnM+n0HTsBSziUrYL3RCdhczIqpt04D9EOONvwfUCo1YwibQw1B6Tc0A5BmULo9N6BkEqDkp5KVDM/CC1iaA+2t4CSfDDAr4iZ2AnYOpwMBa+qaOAFNAdaFGAKy0QMY33N/BrlukwOQC9Cd98EkrFYcgDOX7m3z/o47EyBH49dxTAW0otEi/wFgiOuAzTlniv8LwE7+Y9YLB9xGiGTynMwAAAAASUVORK5CYII=";

      hub_w_w : dynamic_graphic {( point_hunters_grill ? "hub_w_w_after_hunters_grill" : "hub_w_w_before_grunters_hill" )} ;
      hub_w_w_before_grunters_hill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA/0lEQVRYhe2UQRKDMAhFOQs7Nh6WXa7XA3iGQlRM0mg3/nFDxnbSeV/mCaa0vrwoBVIgBVIgBVIgBfqf7Gu5jj/P6QfflEBwmvGLChBOU858f/+DnOZ8UgHEQ+AzBMYuongIjHx8CBS/E+A/BR7hFFy4FGVV24iqFE8szf0gTjEhEf+U4pdazpNRAccpGmSBImZYg4ZtI9FFHKcYkPiKgH2b6lEAyClekD5gimwj23qI5LQeR9Tw1iITU95jtQCUU5wJ95P6lu4TqgFG81aA92NyBLxFjOadgK0zUHvVF0BwahLnOZXaIRl6COFNB5p/KrFNGWeI4cQvrxRIgdcFvqhcaqJm8QFwAAAAAElFTkSuQmCC";
      hub_w_w_after_hunters_grill : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAxElEQVRYw+2UsQ6DMBBDHT4Aia1jlT9lY+IbM3bqNxSFUqkoBLuHBFLPAwkgn56PI3ieLDiAAzhA9e1Y2Cki/BcHeBR2igj/xQF8BnwG/CT8d4CEb6m1KX+tauiybsO8ygCUH3wAGBsgA4QPe15lAM4PPgCMDVABwsI+5wDSDxOw7wcdoE22BrQiwBRg6Lv3JX/BpDaA8oMOoAHQfsSy7usC06MoiPazAI0RoLECRFG0fxOgeksAsH4HcAAHkH/wo3U6wAuG9bfB/3KTYgAAAABJRU5ErkJggg==";


      hub_w_nw : dynamic_graphic {( point_fellow_yield ? "hub_w_nw_after_fellow_yield" : "hub_w_nw_before_yellow_field" )} ;
      hub_w_nw_before_yellow_field : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//gAAA//////+6En4uAAAC9klEQVRYw8VWMW7jMBAkoCZFAuNecAD1AAva1oG+ZsANCwOpXQT5SgA3KVQESJWC8Bd0VpMUB92SkmhyaZmrc3K3RoiYGM/Ozq5Iic5Gaz9+VPbjBQPSB8BpTYcYyVrC1ZqtMF8aYncBqnFlC6i6e639crBYrd/8ihmQKwS0vzWGz1WZjYPHwYA4AVDZZU4LtCXz9m067SMZkGEExuALqHou7Qxu+3T64CpmQPr0xUlABlwB7b1+vUOy0w9Aa4Ebb85GBmT034uK2wJTCvIfQnuFbzADcp2Au6DDyP4adpgBCSeAOQVicNPyOzvRcG35wTM8BRliMf7TzHgKtN5pUt77I3UgCblKgN49En/fd7QFKcgo4NfPrvsxS4C1E+sJRtyUHDwFKYgnoJkp4AvPgb4FYm4LvvIkFGNq8Z/uApP9c7fzpvEf34bNosP0n0/NHAHIf4wu+yV9H0hDhiF44o/AKKDtjtHrzpK+ESUhzgK38h1AdhpLusGA9JyYu+GN4PcIMOPHbIATsOwkTXZc0mRJyEApHrruQ4hZAqREfp/uKCX++UgGxPZe3L4YAdtnsZjTguOSliOjitMQQ6i2L+rhw6wsD8R4dUsZXuVQypzsMCBQ3JjUGLiuM4hDudjY705AGUEjcgYEhDoJUOJSfgXfIQANULe9gGd1xgJFDRgElDlll5SdATECsOxVbfjrPZqRTedXQAXkIEN2afYCAQmI7cA6W9VowbbeoxtiOv8mEIBMMhyxMi9lOGIMCIDJuYIaA/ZGzWR+BaGAMo9GnnacAUEB2HYnoLhZT+bfEAEQPVAlfeY4EFg0AKvaxr7/dj6/AirA9LIklgMQy5MQEJkvoBBT+TeRADPQkj50ZMLSkKIofAFZlp3Pr+CcAJKupOk4EBMnAVP1ewaAdxRL2mHadAZkQoCaNGA8B6IzJTp2GJAh6iGm829iATn1MjpiGJApAeqCAe4ckJRM5pHfSYgTsF95AtQlA04z8Fd3T8kQoC4aAH8A5AsHFQ1gAVQAAAAASUVORK5CYII=";
      hub_w_nw_after_fellow_yield : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//gAAA//////+6En4uAAAB70lEQVRYw9VWu63DMAz0Al6CHsCAVAceTk1WSJGdDKRKQWQHq37wkx1bjyKDJ1oqjFBIEeFwdzz93Mxr+XXQGtZBSgEpqWYn84zLL1OpXh5SbGCYL4i0ndAs4oN2rIBUGPA/GIpyDcvEi3SsgNQsAa5kZH6VQ4pUQIoNDG8ujAH7txy+YscKSIUBf8GxbRBtnLaIzdjiIwasgNQsASILeOsX2Qr8D6kz0LaMfRy5gRyk3IDdmolxhsDfZUngOciXL8EzjJT9HkZiIAupOgV4u7Mt/rxhegpykG++B06/Cc9/C05/DQP/JB77nn8P5CHlBvw8ic+dnn8RZSE1CQR2Xj2fUEC+10A/Axebei6WhVQYAAj8lG4CCD+KVEBqlmDqeTsgOs5DSgzYrQBsWgY6NqOA5Osay63/owEjoIJcATmgf7VnGLjyADYDpuPswNkVkEP6WwDEQGchZYdlLjGQgRzSd4mBwATpFjOdgXSLKSAH9PcAdgOmE1uer7gCckDfMQNWtGL4mdNA1PoxgGhgWUvDIreWRZ6FqPWdMLBsaOCHju0wBUSp/xcANcC4jOhOAVHquw8GgF+0cosrIDp9EsB+D4g7RVw7Coha30kDHc9SXDEKiFafBhDvAeBk0Im8sxClvvtgoPDtMSX6SQD2F9D5OKzREY5BAAAAAElFTkSuQmCC";

      hub_e_n : dynamic_graphic {( point_fly_score ? "hub_e_n_after_fly_score" : "hub_e_n_before_sky_floor" )} ;
      hub_e_n_after_fly_score : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw+1VO7LDIAxU48L25WhyL1p31Knocyf7BhAwkZYYz6ui58wEzWQi2M1q+SlEPXp8RSxW0vkh6d1xdjMyOS6SPnzLpOF2ogomTXdqVRdrUX+GqhOmQf0Rqr5hpvpDqwpmqj9Ro5qcWqx/xqqcODVY/4hV+SMzr39oVMHM65+oUbUEAyQGHLGsIRggMeCJZcHM1YdGFcxcnQ1Uqt1AN2DxYmf0ASev2+DFjugDXl43mKm69AGogpmqSx+oVH/ewNV9uBvo0ePqWC+Oo4EY/uZ/HG8MxELJX/FE7eN4NhAZTJ8tRiaKgCpOeU4wOM6DLb5STZwNBJhLWdmjLUBADT83UGYSL6zaOBuI9U2RzdpEQA0/GijnFvdxKCNdnIpNIezPo+zWfk9XbZxqY3w5w35CLKCLU30yr8tZfvYmoIdTfTPkwMKJgBJeGwhv2XZopEr41/0b/ns8ARQDOnILAl1wAAAAAElFTkSuQmCC";
      hub_e_n_before_sky_floor : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtklEQVRYw+2VawrDQAiEvf9h1xto6yPGLKG/Om2hDmRJ9pvIsBpCNBqNRqPRaDQajf5e68vaA7C+9r+dk+2pX45Vb95B8gxwAFWxNaFWARy3FqhwgEqcrtyEcgvAEid0eNzAZwEop8VGmn0vAObPANIPpqRVAMvJVvYNjX7tBcCcls9onEt9Lmnw8GCeAbxL3Me1R0XyChDDEQkv3QLzFoDPtnUHmFNMqNS6Lnf9GcN/7m/4cT0AR9iROk1tXK0AAAAASUVORK5CYII=";

      hub_e_ne : dynamic_graphic {( point_bending_truth ? "hub_e_ne_after_bending_truth" : "hub_e_ne_before_trending_booth" )} ;
      hub_e_ne_before_trending_booth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA5klEQVRYw+2UMQ6DMAxFc4CKKGuH+lRZcy+2zFWPwiGydI0aNiYXB5AQ7UJb5asiH4koGeLH9zcqgqX+FsC86lIWgIiY8mt6EgBgkUk0blEAnAEYB4BzQBLAPAMAMgCfgkRJvj6xeDFumMoCrPovAZAVBABzgLcOmOIOJCkuGTA5C3S0KUADLNXCckNoIABBc77i7pqIAej7h9S3LmIANDM30VrrFKYFemhHAKADYWilBQ6XgSmEDjYF8xi69dE+gOuHOk+LP3Vqc7RPXwJ4deu8ggC8+RVXgApQAQ4G8CtVgAoAB3gCmp0r2VJT7KYAAAAASUVORK5CYII=";
      hub_e_ne_after_bending_truth : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAsUlEQVRYw+3UsQ3DMAwEQK/ANoV/KrUaMHu5NcAJPqYcu0mAGEmgh2F+oULV4UVqmMUZTguw14ydAYTRCafBAXh3gMPc24GIaQBLA0+AqAEIG4jn32eAggb0W7AUEP2vuyBoIF4/9iBmQTIDDcAGkDbAtQFTALg9ASX/gHwLxIDx0FU/wFS1gKloAaWUizcwV/UMVPUW/AC4f5nboavPOS/gzVecgAQk4GKAfyUBCZADHjetW6UpE8lUAAAAAElFTkSuQmCC";

      hub_e_e : dynamic_graphic {( point_boring_way ? "hub_e_e_after_boring_way" : "hub_e_e_before_warring_bay" )} ;
      hub_e_e_before_warring_bay : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACMElEQVRYw8WWwWqDQBCGV0IPRQhZvFvwAYoiHoRCHyJ47Uvl5KXP4H1LXqB5CC30UIRtS++1465bR+omKrv1T/IflsB8+WfWCeGgoBVfR0TVt0xQnwF46QBu1wIIgn+IYF2AI68ZO45DkN8OWOxBzRkIONYC4AVz3YLxFQEII64OIAisD0HNhI6rAbCnZ3Zqp0ADwCtnR32+FgCo2jnE55YboGmCBKCU+hafQqq+LoGK3nw2wMDhbQmAELgFOgBKqxvnwweOLoXvoWmO5gAUUJ3oAKivWuBzSwB1AfkX7vg1rPzhDLzlUKM3BfCaYZu7CxgkwNz63C1AAO8NMqn3Bsr2tmgVaJaBBHCAwGIC8h7o/xFx6tBd14SSP/Jtb+prW/5QIlvyLDjqAWgrhwuE8i0vkSmVr1mJbNF/Ai0A9QVBd3Cdb7EpXWVbbCYB4BpgAOg8NiXR+d4MAsSgCOp7sVQaH7Ap7ZOBXdTdaaL+ABzSgSkl8R7bZS0GyNMDNqUs2WMzF8EfgFZfQxs5MBeBABBDaBrgbilAmkOV3iRAkmEzGcEYwH2DrNV9A2V7MxqBxQTiyQARTGCkpjCE27/pTR5u4n2IzGQERATQAnQRhGkeIusOkyxEZjKCFsCDVwQvqet8g03qKttgMxgBAERe5ElTM4CtexBmAzMYAQBQ8eO9mJ5ZBnNXwfQI5C3oPvplMHsVTI5AALThqxEYXwazV8HkCMhvbS+2oWkJWNTFCH4ALFcpDe35xPYAAAAASUVORK5CYII=";
      hub_e_e_after_boring_way : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABZklEQVRYw8WWMW7EIBBFJzVStIieggNEQrQ+ND0SJ8gh4rRInCED2I53tWxim9F8sCU38PznjzFklCnKPIJ1/0LwBbDNi+s+LpVeAHwvAB/4+L6bF3W/1CsAY34t2M2rFtwv9U8AIgNiTiHE5xCwVQBrQJWBlAMKOf4CIIt6AOEhZEaAqg6AMbsQ0CgFL7wIkQ0ghL4FBSDPUkqduQBQDYCuAJsiCwA64MvuoutA2b8o4yQqgQgFogMg5Xx7A40cmiwDHkD0AKReS6CJU/C8DWdNn4HYABJTFyxHQecwaAA3AJkp1f0SN4DWBJRFSJ0ENICtCUlz0P8hkboB0KoPgG3ACuBQFvdX7rKmzxMaCeDYASZuAHcWoIbQ8VgwFsCxA0zcAO4UgMUE2jEpPG4BVAMKAJMFBUDhsDhYLEAAq6xqNw4LEEDWl1dOsljQumC5OCyoAMV8OwxgOt6GbqVgsADceB2y4Adtgm1RkSwvawAAAABJRU5ErkJggg==";

      hub_e_se : dynamic_graphic {( point_dirt_home ? "hub_e_se_after_dirt_home" : "hub_e_se_before_hurt_dome" )} ;
      hub_e_se_before_hurt_dome : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABi0lEQVRYw8WXXY7FIAiFzw5Yf1c1W+G1Twwo/lRvJrk0Mr1pa65RP+EAFvLmgl4k76aID+W6uDL8DwBjb2UCMPChmQiAvnF9M6UDsN3Up+BsgLo2lmYiAJrzWwyEnYA3EWCvqZkIAO5CcPdz1AQxANoBJBOAHWASIb9T0/c5oBrCNEAOEPQBYjFYVlNDQMUHnwdpADARaCFi014RgcYiBU0QAahrwYTwoz91P1WqJAD2Uei1gNwvSQC6Ho0o7C+S0NkEAQn2rdM8hRoCOQDSt4r7uq6mPcR8gNCItulb5OZhjkgcIBADw/szQOs7DVB3SaMCeh2MngoQkEDzgyUC8jTQKkIWgGXgsnah0AckC2DOPvYoMbkE5lEAmgdSEyUtvSctQH8A4DwAu7tHMEznYwTTypcanI6iNEdkuTMAbPeuuv51XOQoWQAl+KjV4RoGUknOA0D6Aez5beiZiE4D9GW2r2PE4jAGsIzkYf0cAKzGxrNKHQfY5MaPrhwAbDU6GYC2v/MA+DMAQgC/9ff8qf8Ctc8AAAAASUVORK5CYII=";
      hub_e_se_after_dirt_home : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAy0lEQVRYw+3VMQ6DMAyF4XcFlJNY7M19uRZ7lxwgLUKiHYhkWy/JgD0gFqKPP0Hg7RhZbid51oLjmX1pzGsQQFqANAbQDOBKAGIAVwIwA3gSgBnAkwDUAI4EoAZwJAA3gD0BuAHsCUAOYE4AcgBzArADWBOgWkY0gGRa0gQoq2pyN0DWAUovQKk6QM2dAFkLKL22QAuojwGcX93v9jtjAWmV4/J3K88AXK0DMOsQxhYE4Dh5MvkQnoBZ/4LrVQMQAApgs4wOYFpyOuAD2wKbyFO+eg8AAAAASUVORK5CYII=";

      hub_e_s : dynamic_graphic {( point_pouring_rain ? "hub_e_s_after_pouring_rain" : "hub_e_s_before_roaring_pain" )} ;
      hub_e_s_before_roaring_pain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyElEQVRYw+3VOw6DMBAE0CkjFz5zSp8iovaptk3jM8QmRWK8KEixdxLhEUICgebxWUAiBxPw6QCBf9u63ctiBxDk0ABrOw2AVwgAVLEG1O2XcE2WgG17jh1AmnZLgCjXrgAGfYjU9mB2B0Rvt7sDorfbAzbtOwAMAuR5D0cA9b+pF+BZRAOkdBzg8wnCBMBDwASUbzX1EQyZgv8CsKcgj8DZAej9EiDmuLJaYhOn7VKO+ya/DWizuLIQAf0zAROAnXE7GSBOADEPrgZwvE2iMzYAAAAASUVORK5CYII=";
      hub_e_s_after_pouring_rain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA1ElEQVRYw+2XMQ6DMAxFvRVxWrasHr1xhc4+YccGEimgOslA7SDhL4uF4T/lxUgA0ZrnUxvSDOSK1qwF8v8DuUJuSWkczvWBUi0fPsJEvSO6MrBX194ixEz2ClL29gRgrWC7nCUDFMApdgryYp7yCovZFkjtMQuZKDhcutKeAQwUSO3hAKCroNJeALQVoNwezBSg3G6nAOV2YwVx30MNQF9BKmoAaG9BB0BbQRdA/0PkClzB3RUo/5iMBuCYeXu8+Scz6+feAOwADvAsAH4yADvAwHwBk0EBGBu+j74AAAAASUVORK5CYII=";

      hub_e_w : dynamic_graphic {( point_funny_mountain ? "hub_e_w_after_funny_mountain" : "hub_e_w_before_money_fountain" )} ;
      hub_e_w_before_money_fountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABQElEQVRYw+2WTQ6EIAyFu+f+l5jNdN+EC5F4gNnMGKNofxAEjJkElkbK5+P1WXg9vGAADIABMADMp9/7VhHA+0aAzwD4F4DpnjUAmgACUv4Ecr4fgCiGAD6HFABcNwBRLDgkUVwjza+g7wUgigVE4h9sIJFz5E8u4xLAodhyHIETAAppIoR1j30Z1wBisRUAxZVrpIlman9yGdcAYrGE4BrpcGzUjzm1xQPacoYHduGjfmxbSxcYTae7YLfeph+nrMuBZLhEJCOjNv24U6uSMBcuthTbLu7UKoBcuGgzLJKtunGnVgGIPLACmAcCk6zFAypckv8EHghcsvou0OGSbD4eCFyy+hxIeMAIYMEkJWudB+RfUQewuBUhWftAwnPACGDhy5O26TGSGR4on0q6zIRG6hTPZV0AimbDMZYXA/wAWFjFQbCRejAAAAAASUVORK5CYII=";
      hub_e_w_after_funny_mountain : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABkUlEQVRYw+2VMZKDMAxFXfrYLoULtjU38ORkVEubakkw642EpYmNlU0TFUzw/KCnLwnMd1es6/rT9wTT9e/lDrC+E2DL32mB6Tag0wLTbUCnBT0A89cOAO8CAEj5rzD+G8BCDABIFgCALFIGIO2GR4yiSBdgwRM/IwCQRMoAZOJxfmxB41qY1rVnDUAWtL4cWwC2ob+OnAHIAiLSBZi3oc+1JgOGabtOAVlARMoApNb0cxi2awjIAm4tlABm3O79BjsApUgZgLQbyhgLUR3ApTLiIxW5wcdUVBfVACiTv3D578dUpAsQf3ud2p4LHaYUIRdNRMoAedrT4FsewBORVwWIgItz2ecdIN85IgJVgEO7iQXheNo0BaZ1Bf5qLcIxa6EFUCSzDIBl1kIJIKKGT5IFrhCBGgCUz7aCAUTklQAiXrogNNwxIlACIEsnddxyIq8CwL74jxawe1FjgTmxApwFFqTvQzdAFABchQEVFpizBtCirSTy3QBRBHAVBjy3wJw2AJdtZZFX+hy/LD4AH4AbTA20ol5/gu0AAAAASUVORK5CYII=";

      hub_e_nw : dynamic_graphic {( point_grim_tune ? "hub_e_nw_after_grim_tune" : "hub_e_nw_before_trim_goon" )}
      hub_e_nw_before_trim_goon : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABWElEQVRYw9XYMW7DMAwAQG4dNBj9Qld/LhsHD32Hp3yB8KKBn9JmZFIpKZaUtEEBGSARwgYyhSdKTGjD10Dwi9gGvgvOAYjZWQIclVsZMNf8LqWnJlAH0P0yAjhZO4DUgewAECPoA1r+KUqEJti0AL4Acv4ksAEQxSAEuZ2zAeTs2WAEiDV0AdIE38sd8JmvCmBNAPUAZwCYprYFIZgBwqQPkDMY9wMA8ADYlAD7XrqwboEzAHAPYAtA6oLbul77NtQAzD1glbAE3BLg2gFYE5AOQalAYBsAHWfAGQGOPugKoAHgBjgmojPPJiMAEkCZgcpMyNoAGYVrVpmK61OSUwNwHYOpO4GgU4E8kxP+BmCpihZA/o8RMfVByB/YI7AiwKNklLwfiJcEWBgXzQrk5T/F4A/BKMA/51+0AK3l/1j+QBucAFTDqdc07w3wj9uvApj/A/C7AX4Ap0wt9uYREV0AAAAASUVORK5CYII=";
      hub_e_nw_after_grim_tune : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA4UlEQVRYw+3UMQ7CMAwFUOOFlZ4Ay0sGbtelZ+EarDkEV2FlMmmngpQmtah+EfHc1k/J/yV1TMzMzfEtagDHO5ccIDbAvwCy+z0pbIAKAIMBTAIFMHUfgnwJPDUoAqQ7GwMBIp3dkQA9nMwe+wIs7HeksJwBsytjAU+DApSMhJCA8RHhugxuAhDityNYBMTvA2gahQGE0wlU/wY2AhASQCOAa0vgSGERoGAAT4DQwwAy9uA4DDBAmpDWh8oMrk9hJUB7IEB1fgMQgM5CiAGo7gdQ2L+6Bg3wc4BSBlenEA54AT/8ZRfOt2AhAAAAAElFTkSuQmCC";

      ## stealing hills

      stealing_hill : dynamic_graphic {( point_healing_still ? "stealing_hill_after" : "stealing_hill_before" )} ;
      stealing_hill_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABvElEQVRYhb2YjY3CMAxGrWaAWwF1AksZgP23QcoAXNK0tLF94M+9EgkhVcF5fXb+oNnRbk/Rcm+chyZ7TZ7YFAIofUTaMFL7vl8HMP+YANwB6vBsATxcoc8AEOWjgisBZA5KF0DtkxoJGQDThQDPLoAycaKehWANngFo7qm/PIcngRfAKIJqn9IKYJbAfwLMZBRBG5sTp3UVkADeyL5uUkHJqgkApwAvgFKgAWIC3ADmRHwjwFmCfgC1Fn0Q4FuFEACrDN8I8Mf1drRm4t/je0sQAFAKjgRyfL8AAEAp2AnU+H4BAIBWsFWifo5E9XfVChYJ6vUhAQiApcAGgIICfQ0FZgYQARCAWox6GSoF7kUIBjAOp3UzVADTNwESfxPA2BAqQHgbCACoTXk5EIuHYEiot8hB6QAiB9OFACIHFYCTBMAygALcBEA9EsoqnK4FGBQsx2FRhdAqhAOMZWgBwAHB/oOC7Vp4QgAMMH8CQOPBADQApMRjCvB46A+OOeB2MaoT8UQGcICDgsLtbpYp3eMCAgC7gtLvhbwD4AICALuCsv5JtQNEouE/eSlQ16KAgAjANhP1vQCeg7X9AsHkk0F1ooCdAAAAAElFTkSuQmCC";
      stealing_hill_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAB4UlEQVRYhb2W2Y3DMAxEiS1FvwRcPH/VjQrYGlZ3SB22SC9CIEgQizOPIwkw/ForOFaXWQb+xf8FgRnADfVtgNHfTGAEmP2tBDaAlb+RwASw9rcRWAB2/iYCA0DYA1xfAdj7WyLQA9wEYIlAD3Dnb4hADTAHAKnMEagBZlcBoI5ACxBWY785BUqA2xNoIlACPPtrN0EHcBCANgIdwIm/MgIVwFEAyghUAGf+uggGgHDXfxjATQSLhwKgO+zb30Sw5IPVis0QrwDC5jEHeNAI7rgW+DtxGJegc7TW6O2wq589fuDa/Dkwfbyd4hPAAcC+ORUxAtgs8dMYh+kvI4h/+M14MOt7R0g4ykjAx7qkvSuafiaESR+p/eJJKQOQnX34j3YnBKlPLlOiw9xE13uAUJQonz//oZEAoQC2Q4ppGca96DpBC9DRo5SnNFrXJr4AZvmcU0LAiN10tP59whDDpGrPdqATgJQn/oXpLlw2+4YQ0vmvco5/NUTgAaAEYIXjH8+10+gmZbb0YhnEunJVkNqJ9O5F+XbuagpS7Iqf+c2WCioV0nQS4o0gdQSpn7Dufe2nRZITANY7kGFrDN62Bb4O38VosTEzAF/i82V0i77nysyeZOz4DCDX633nGiYa6g+Nl0UF3/bTiQAAAABJRU5ErkJggg==";
      stealing_hill_finds : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACDElEQVRYhb2XO27DMAyGhW69RcGVgM7aNUsPwVW30dalZ6j1sCLqadJIuDiAyZ8ff0mxbf604aEKq5Yxgtzfnyqb9b9BoAaAJt4N0PZXEygB+v5aAh3AqL+SQAUw7q8j0ADM+qsIFAB+DmDfAjDvr7FAApBiYYDGArkDq/4KC8QASwMUFoiXIDcyIbqfCgukAH4HYF8LsFkABYEQYN9fuggygKcBlevGfNywQAYAVwBkFogA/DUA+zIAuAYgsqAB8Kt6DxfDriZobjKA0mFefi3W9QzBjDImQ9wC8JPbNcBGw8PlGODPxLsXbQSgsQbvYXh8bCzwtXZ9v37RxuUU3ICvNcC6mCoCM0lx3RiNAZ+POr4bgL7WTcYbvOk7ICRsZVoDHmsAy9tD0nQ9oen0kUZOrQ3oAVhlGf6pXQibTw2CSImAsYjsGKA1YAXgkxLF/eeeNBwgGYDnJsWQhsdaFB3P1FsDBgAF/ZByFEYr2lQnmF4++hQQ8MA+ddYGDACgkCNSbl+tQCFovnWovmA4C7bfAO1/wOAYFgQf9n+Wg/pyIrJvHeQAtStygJlGaZJmCw9Vz/LSUUE6d6SDG+HOfZdd4GI2DDMgT9s2kYadcJwIwi5vE6GeMK99rifoZToAzGcgwmYb3KBwTxDqktwpRoOF6QHqFBcPIwzq9hGZHXHbcQ/A8+V9+2gmauIfl9daftYMb48AAAAASUVORK5CYII=";

      ## gravel trail

      gravel_trail : dynamic_graphic {( point_missing_house ? "gravel_trail_after" : "gravel_trail_before" )} ;
      gravel_trail_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABx0lEQVRYw+2V22rDMAyG/94WYie3g62vnt0W9i7uA4ikL1D8AkGT5Ba24kG1bA6DiR78q1T+rEOMy8aGf4C/D/BVhNAIAAibAsxBd6pBoA0A9KgI2AxAjh4kC3OopKYVAOZKxR/d/ycA5hoAWo2h9gAqBw6/DzDbyXUKNAtX56DmqcBqAN0y3MIMV/OEXQ/Q74aS8fNt/+Hl8QSsBjjL/mK74ZPh0gxgqFpwABxX2ev92UsC9o9H+D7AOI4KULVjCwAzotOmAG9EtBZg3BvFaCRwyq6egSdPKGAvHyPyXpYx++Su3gKeUGDO0Bcjsiy8srb/wROqOFhAcuSofpcctAR3ZehdoVTrW7woaC5JaekpdR+2f6beFeqGIE4TTjll6ifYJPSQVOSO+OQLJbmQZCgXW2GckpIwTKmsp+XQxeXkCoWMAmROqY1bJpHJZAL16KhzhRKHJEH70XqC3ZK0E66SUpKvxRcq2izEzNGQVkoB6JLrv7qQsbDhKCOyRpL/v5YT1mYov7aXttRMqOT20uawdKZBNZfIdhvAChPLw7qptEcTcpTCSEbs6dxWGpK2hX7o3dBc6nXI4mLzc3MJu5/MX67J1vIdXMI7pO04lggAAAAASUVORK5CYII=";
      gravel_trail_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABhklEQVRYw+2XsWrDMBCGbzM4g/CbejOkUD9GyFK8BdylnTr4gToUEm0aAr38d6eWQpRR50BzxEGfZMPH3UlO6OgaX8sbIwKuzYLoOlpVoFtZ4N1NYL+/T4FufQEiH4GX4w2BEP+7gE8JeNgNw/gjQDn8MnCitPtYhm8T+BueAk9lAZcSQGC4JeByDpw4DYj1BBCfz7+74CFwJTB7xGGbB68PgTsUmNp5hsWkJlQJD9uMBQGidsIqxRZDHM1VsOkzbq4FmCPJhykwBnUw9RnPJQHczoRbA17TsQ6mMWNJIAa58AyZeA1sxoznUg/oCh6RMlXC1Gcs9ABSg9yIJmudqiB6wLAkQKarj6ByVTD1GQsCyFGUApF2DNfBNGYsCIiaZIqDCtfBps9YFsCm0a1jG6gGNn1xVX4oaYoYrUK26opZwNojyCr7ogrIPrS+VSlXVIGobwPSwgQ7u93QSoA5igGFQXb07PZDK0FgbQv5YvJFE5DKyN9VnWdXtB6Q01rn7SXqiSJwAQXnhjD2IT6rAAAAAElFTkSuQmCC";

      ## my house
      my_house_graphic : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgAD/gAAAAICAAIBAAACAgIDAwMD/AAAA/wD//wAAAP//AP8A///////lVppUAAAB00lEQVRYw+3WMVKEMBQG4KczmYlVwBkdrHa1s7TwHjQcwMbaI4RK7qCXsLfRE7EniEAI7wXCwmICFj6YZXZngG9/8kLgzlm8qEsWPqq9yrn7TuD8dV/4B8hTANwGxFhTd4O2+AAwEgEcCcCcmhOABCwXQChdDoCcD+D2qTEFNJdvblM6AVBtQrgA7gjmAK6fTT1NA4Qq1aYAEGVF8Au4+nxstwcXwBoMQq0OAJbCIAGxHgCyqqDXBeV6AMlqQMpntGEYQBMAiaBpQvDcBfH4RKQDIBFUHVjvq7VhGwBG0ExEsB6AGUBqJeB5DNx8v9/r/asHkAjgZAyI9QBZVzxgF4wDAAEw+ToOAWAISKcWJCEAkgJ4OMDoeoAMgW4QhABYbUgnouqLmYispx4SYF86ywwgaALRK3/Re/7HAJClBsAy2ADA6n+ui9E+zK1l/AaAnTKVbALIu/sf/M8DPQC+jgkAA4gDt2E3DTQTgSOAPDAA3z10aY5xJZ4A0dvlxce+/rjtA5jrXZQUOT3+A34D0I+XAsAuOgi7iuDMOi4HtOsrAsAO04UA8uNOHawjXwqQppux1DyAfSyXAoSaLMz9CMBEcCpAqoU1AJTLAMIboI3ACfgBvwXEgitAoFEAAAAASUVORK5CYII=";
      my_house_glimmer : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAANklEQVR4nG2NSQ4AIBDCwPj/L9eDUdSRG0uDAUVGwsu1hHpGu8ShQhtEBjfZE1ay/YvyeWr6AQmVHQmjMv6YAAAAAElFTkSuQmCC";
      my_house_i_stay : base64_png "iVBORw0KGgoAAAANSUhEUgAAABEAAAAQBAMAAAACH4lsAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAOUlEQVQI133LwQ0AIAwCQDZg/y3ZAGsbifEhn14CBRJ60hKOzJ+unV9BkMkS67AFE9RudzVClN9kAd6aSTDGWNFoAAAAAElFTkSuQmCC";

      # final command stuff
      tiny_shrunk_shiny_trunk : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAqUlEQVRYw+3YwQ2AIAwF0CYdoKs06f47uYHCwUQPNYGUfgw08cSBx0cRoBNctAEbsAF/BNBXJQCIzanSouMBh9u/lpYEAJkbQH3GA9wArAagYACDAWpgQMZXcLj9l+EbGMBggBoYwDkA/zdg6ATyAcpgANHqAPgULP8OKL12Z3MAJBNwr34PQHMA0SuhgAHtAQQDBAzoCCAWIGBATwChAMkBxB2M57gfuAAqp+unOj774QAAAABJRU5ErkJggg==";
      costly_lost_key : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAApklEQVRYw+2XSw7AIAhEe6c5APc/Dwdorb82dkcJsxAWWk1MXxCBOU6yHQmQAKZT+owylxIIABmjYizrVxgAvgCIBND2yzdA2woLQmAFMDrA/ApkCUKrA/yeoeyVB3okggsAWO/dB6A4wMMFfwCsyc8TYBodQHYFqHm4TAmQABwA9LaEBDBqgd6lWLeshqmMuC0Zuyllt+V0YUKXZnRxSpfnmYgc7QKMI1vml/UUKAAAAABJRU5ErkJggg==";
      the_ring : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABBUlEQVRYw+XXUQqDMAwG4EAOkKsE+ugx9+Q5fPRSvUHnAo4KRmgX/w7MZC+C/WjTv0qltTJdlDQ/jtrHT07pdqdd0Axwx092h+4HuMXGkNuXwMbhsyVgCKBkG+y0CezvdoB1gbpdAAB8BOr2IQJQ2ANsvQEBZPY2ozIhACUwCzsBfhoVyBKoG8cKAfAOWOxXNyEEkL+bYErLdIwiCCByF/YAcpVD8/w6ZjECwBVgXZfDBCAAuToKJrvqwwgAYBfAEMDFK2HCANwQVDxAeTCA6OmA4Uvw+B7Q/WPknwCCBOzp98tREJ2EMhjQPgHBABkM6JiAWIAMBvRMQChAMAD/jahAANH1BsdzMAmMVyO0AAAAAElFTkSuQmCC";

   # overlay graphic (s)
      check_mark : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAEFJREFUKFNjZCAE/jP8Z2BkYAQpAxN4AdGKkRQSNploxWgK8ZtMtGIsChEmo0viVQzSBlOAQyGqm0lSjGw6jlgCAPhyHAy7s/zYAAAAAElFTkSuQmCC";

   # item pictures below here
      ooh_task_picture : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA/klEQVRYheWYUQoCMQxE9wa9/50CvUoPEIidZD/W9i9qRmhWVArqI5PMsF6Wq3Ftlfui5MdsbCetFqCpzEvNX2y+2Yl+DYASs+4IvRpg2N2BCYAGaFaBPMBaxQD4OfTA7glIK/AJQHQ/JqAcYASA2D0B5RLQZwA+gOaLdH/kNUgDrAfVAHQrHt79+TR3QCBBOcB2Uh1G60F9GLkCoYLUA9B9gA7QzI0obAhGRAmjZ1HC6K3KZ8D9x1cAVtTrw2hHOgxgaPQfXoRNOC8L6ABtjr5qhHEnZAF9CP/BiDwI4EHYBMqd0UJ0GEBkgd4XQQL6ENLX8AkQEpx3Z/Stv+leQtqKrntlWgkAAAAASUVORK5CYII=";

      pacing_rations_picture : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAk0lEQVRYw+2WXQrAIAyDc//DeoUOfzYrDmUwDBjbF32QftSaiEAOfD6A0KX53f4ANkwFgAmBAMCZARuGBEBtN+JERqK8gBxASktl740IQKtFggC577WmKAAahPIqF5kRH+B4AXopXnoFfAB7kWPul4wL8NixLEDxY9p/gAUAfwVw6qwA0MsvyF5AB1Bzw0nsD/B3XEeQyfWQ2qlQAAAAAElFTkSuQmCC";

   #scenery pictures here
      seth_dentons_picture : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACWSwAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////9DrV1ZAAAA8ElEQVRYw+2Wyw6DIBBFpyuXg39aV/z2/QM6gPVRtUlJc2cho0I0MXM8DKCkhsBPj7+HNAFABQLY27mvh51EgKRJc6ulRQmyAUtrl8obIFENWOZPA8UL2UCtgQwgdAPes0DOgwaguDjvAjAn26eu/T0ArkqwrQxbAMYlYolpuQ8cgGCf+jgAZAEsABvrI4CtzmABWM2dAIAIAC0AYSgAQgcQQQVAJpBalXkm8gzUIQhqBLYjzgDgA0CHqIsBgD0NdwaI03Bdd7YGiAvRmm9rwAXg9gbGZzEw+QHEpxmIngA+27E7gPcf0X+jA3SADtABXkAS5iNZs2sJAAAAAElFTkSuQmCC";

   }
}

# end assets
