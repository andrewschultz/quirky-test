
start_at = nameless_lameness
start_theme = my_theme

## Defines locations in the world, along with how they connect

locations {
   nameless_lameness      : location "You are surrounded by nameless lameness. It's all very, very grey." graphic = "lameness_16" ;
   bold_hub  : location "You are in a bold hub." ;
}

connections {

   ## Connects locations together (bidirectional)
   
   from, direction, to = [
      ## bold_hub,     north, bold_hub
   ]
}

barriers {
   
} 

## Defines objects

objects {
  ooh_task : object "Ooh Task to Ask ('Ooh Task')" ;
}

## Booleans and integers

booleans {
   footnotes_available : boolean "false" scope="survivor";
   score_notify: boolean "true" ;
   turkey_quest_point : boolean "false" ;
   in_debug: boolean "false" ;
   ## tutorial booleans
   in_tutorial: boolean "false" ;
   tutorial_about_done : boolean "false" ;
   tutorial_x_me_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;

   ## parser shortcut booleans
   look_warn: boolean "false" ;
   examine_warn: boolean "false" ;
}

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "1";
   score : integer "0" ;
   bonus_score : integer "0" ;
   max_score : integer "1" ;
   max_bonus_score : integer "1" ;
}

vocabulary {
   : noun      / aliases = [task, ask]
}

subroutines {
   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>";
      }
      : increment "score";
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : print {( "<" + "You just found a bonus point!" + bonus_alert + "<6>>" )};
      }
      : increment "bonus_score";
      }
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : press_any_key ;
   : clear_screen;
   : print "Submitted for the 2025 TALP competition." ;
   : press_any_key ;
   : if (footnotes_available) {
     : print "Because you went through once, footnotes are now available.";
     : clear_screen;
     }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( footnotes_available ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "footnotes_available";
         : win_game ;
      }
   }
   options_notify: subroutine {
      : match "notify yes;notify y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no;notify n" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "notify -" {
         : print {( "Toggling <NOTIFY<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "notify *" {
         : print {( "The argument after <NOTIFY<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   tutorial : subroutine {
      : if (!tutorial_x_me_done) {
         : print {( tutorial_x_me_cued ? "One convention of text adventures is that you want to examine yourself first, to give clues about who you are and what you're doing here. <X ME<#0f0>> will do this." : "<X ME<#0f0>> should be your first command." )} ;
         : set_true "tutorial_x_me_cued" ;
      }
   }
   meta_about : subroutine {
      : print {( qt + " was made for the TALP 2025 jam after years of judging it. I always wanted to write an Adventuron game." )} ;
      : print "You can find specific thanks in the <THANKS<#f80>> command." ;
      : set_true "tutorial_about_done" ;
   }
   verb_list : subroutine {
      : print "The standard list of verbs works here." ;
      : if (in_debug) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }
}

strings {
   my_score : dynamic_string {( score + "/" + max_score )}
   bonus_alert: dynamic_string {( bonus_score == 0 ? " There are a few in the game, and SCORE will let you know your progress." : "" )}
}

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

	ask_new_game                                   = Would you like to restart Quirky Test?
	ask_quit                                       = Do you wish to quit Quirky Test?
	post_quit = I hope you enjoyed the experience. Pressing any key will restart the game.
	you_cant_go_that_direction                     = There's no exit that way. EXITS will show which there are.
	unknown_verb                                   = Nothing comes up from that. VERBS gives a list of what you need, though there are ones to guess, too.
   }
      }
   }

## On_debug and on_startup call the INIT subroutine, but on_debug sets a flag or flags to allow for cheat commands

on_debug {
   : set_true "in_debug" ;
   : gosub "init" ;
}

on_startup {
   : gosub "init" ;
}

## on_tick is primarily used for the tutorial

on_tick {
   : if (in_tutorial) {
      : gosub "tutorial" ;
   }
}

## on_describe is for moving around

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : if (!examine_warn) {
      : match "examine _" {
         : print "One-time note: you only need to type <X<#0f0>> to examine.";
         : set_true "examine_warn" ;
         : press_any_key ;
      }
   }
   : if (!look_warn) {
      : match "look _" {
         : print "One-time note: you only need to type <L<#0f0>> to look.";
         : set_true "look_warn" ;
         : redescribe ;
      }
   }
   : match "salesmen _"  {
      : if (is_at "nameless_lameness") {
         : print "Good guess, if this were an anagram game." ;
         }
      }
   : match "turkey quest" {
      : if (turkey_quest_point) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point." ;
         : set_true "turkey_quest_point" ;
         : gosub "add_bonus";
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;

   }
   : match "exits _" {
      : if (is_at "nameless_lameness") {
         : print "There's a puzzle here to start. The tutorial can walk you through it." ;
         }
      : else {
         : print "I should list exits here.";
      }
   }
   : match "verb _;verbs _" {
      : gosub "verb_list" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "drop _" {
      : print "While classic text adventures often required the player to use DROP due to inventory limits, this is often regarded as needless fiddling today. Text adventures often take steps to keep the player's inventory manageable so they can focus on puzzles, getting rid of items that are no longer necessary.";
   }
   : match "x me" {
      : if (is_carried "ooh_task") {
         : print "Got what you need." ;
      }
      : else {
         : pocket "ooh_task" ;
         : print "You find something called Ooh, Task to Ask." ;
         : gosub "add_point";
      }
   }
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "Your <tutorial score<3>> is " + tutorial_score + " out of <" + max_score + "<#ff0>>." )} ;
      }
      : print {( "Your <core score<4>> is " + score + " out of <" + max_score + "<#f00>>." )} ;
      : print {( "Your <bonus score<#f80>> is " + bonus_score + " out of " + max_bonus_score + "." )} ;
      }
}


assets {
   graphics {
      lameness_16 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVSUlKtra2fn5+YmJimpqZgYGBnZ2dubm5ZWVl1dXWRkZGDg4NLS0u0tLR8fHyKioo9s6mBAAAB6ElEQVRYw+XYIZaDMBAGYHIELrACvQ6JRdUjse0RKmvpARBcAIHEcgFEZS0KzxXovja0ZCYzJARq9r8A3yOTySSeJyN8meGVPnym+SR45SaTPXMtZBKZtJsSP1O9c5xylrmMf/HemQA/CiCCgN8J0G4NEAuAWgsoICCZvn9/AQ5rAQMBuOkBuTvA0wJCqgQAIEGAOAZrYAoYDAFKCeQIcLcHCBUAtkHNAhIEiJ0BoAgCUIO3+QrMfkAKAYfVgH4OqCEg+zIgAICWWoEUlMAHUMrvnwyLUC0CY0C3OSDSArIvAAYdQPkBmi7gABAEINQBsozog+l6gG8BaNcAKh4AjwIAqHcH+DYAOAyQZyELOP87QMkBBAmIdIB2c4C/AGi4Rjirwq4jzwJ+CXy8CwflPNadRRsCxFaAlAaU3wXcScBRB/BJQMQAPjNxYQBg54FlQL09YHQAtBCQE/eS2VD4Bpw4wGwX9jsDLmaAhgNcdwWENoACAdDFoASAcdRtQ1dAQgOqVYCo4XaBpggYQMkAyMOwsQXgIqiITrQE6HWX42VA4ggAUzn5PIEAhSNAIAD/PkIDUC+kbqcXK0C9NwBN5b0tIKeGIrQCchsAgNC9TyBAYAHoqE6o7EP+jSqC7yMmALgG6AcovfgBhBvnaozG45IAAAAASUVORK5CYII=";
   }
}