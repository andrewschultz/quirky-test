
start_at = nameless_lameness
start_theme = my_theme

## we start with simplest defined then move to more complex

## Booleans and integers

booleans {
   ## game state booleans
   in_debug: boolean "false" ;
   score_notify: boolean "true" ;
   tutorial_done: boolean "false" ;
   footnotes_available : boolean "false" scope="survivor";

   ## regular point tally booleans
   point_first_base : boolean "false" ;

   ## bonus point tally booleans
   bonus_point_turkey_quest : boolean "false" ;
   bonus_point_theory_bore : boolean "false" ;

   ## tutorial booleans
   in_tutorial: boolean "false" ;
   tutorial_about_done : boolean "false" ;
   tutorial_verbs_done : boolean "false" ;
   tutorial_x_me_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;
   tutorial_item_taken: boolean "false" ;
   tutorial_additional_metaverb_done : boolean "false" ;
   tutorial_x_ask_done : boolean "false" ;

   ## parser shortcut booleans
   look_warn: boolean "false" ;
   examine_warn: boolean "false" ;
   inventory_warn : boolean "false" ;
   long_word_warn : boolean "false" ;
}

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "1";
   score : integer "0" ;
   max_score : integer "1" ;
   bonus_score : integer "0" ;
   max_bonus_score : integer "2" ;
}

## strings

strings {
   ## short stubs
   # meta verbs in orange
   abt : string "<ABOUT<#f80>>" ;
   exits : string "<EXITS<#f80>>" ;
   sco : string "<SCORE<#f80>>" ;
   thx : string "<THANKS<#f80>>" ;
   verbs : string "<VERBS<#f80>>" ;

   # yes-or-no
   yn : string "<YES<#f88>> or <NO<#f88>>" ;

   # options in blue 00f
   notif : string "<NOTIFY<#00f>>" ;

   # regular commands in green
   xme : string "<X ME<#ff0>>" ;
   qt : string "<Quirky Test<#ff0>>" ;

   # tutorial stuff in purple
   tut : string "<TUTORIAL NOTE:<#f0f>> " ;
   otn : string "<ONE-TIME NOTE:<#f0f>> " ;

   ## dynamic strings

   my_score : dynamic_string {( score + "/" + max_score )}
   bonus_alert : dynamic_string {( bonus_score == 0 ? " There are a few in the game, and " + sco + " will let you know your progress." : "" )}
   notify_string : string {( "You need to specify " + notif + " " + yn + " for score notification changes." )}

   ## location strings
   burst_face_after : string "You're at first base now." ;
   burst_face_before : string "You're at a burst face. You feel about ready to take an initial step." ;
}

## Objects with vocabulary

objects {
  ooh_task : object "Ooh Task to Ask ('Ooh Task')" msg="It is a request to find the <Rare-Thing-There Ring<#a33>>.";
  beery_thor : object "Beery Thor" msg="Big and strong.";
}

vocabulary {
   : noun      / aliases = [task, ask]
}

## Locations with connections

locations {
   nameless_lameness      : location "You are surrounded by nameless lameness. It's all very, very grey." graphic = "lameness_16" ;
   bold_hub  : location "You are in a bold hub." ;
   burst_face : location "{ point_first_base ? burst_face_before : burst_face_after }" ;
}

connections {

   ## Connects locations together (bidirectional)

   from, direction, to = [
      ## bold_hub,     north, bold_hub
   ]
}

barriers {

}

subroutines {
   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>";
      }
      : increment "score";
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : print {( "<" + "You just found a bonus point!" + bonus_alert + "<6>>" )};
      }
      : increment "bonus_score";
      }
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : print "Submitted for the 2025 TALP competition." ;
   : press_any_key ;
   : if (footnotes_available) {
     : print "Because you went through once, footnotes are now available.";
     : press_any_key ;
     }
   : clear_screen ;
   }
   tutorial_choice : subroutine {
   : ask_bool { ##? how do we put QT in here?
      question   = <Quirky Test<#ff0>> has a tutorial mode for the first few puzzles. Would you like to use it?
      yes_answer = Yes, I'd like to use the tutorial.
      no_answer  = No, I don't need the tutorial.
      var        = in_tutorial
      }
      : print {( "Note you can change in and out of tutorial mode with <TUTORIAL<#00f>> " + yn + " before you have completed the first few tasks, though this may break narrative continuity." )} ;
      : press_any_key ;
      : clear_screen ;
   }
   long_words_note : subroutine {
      : if (!long_word_warn) {
      : print "<ALSO<#f0f>>: in general, longer words will work, but parser conventions have evolved to help save the player keystrokes." ;
      : set_true "long_word_warn" ;
      }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( footnotes_available ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "footnotes_available";
         : win_game ;
      }
   }
   options_list : subroutine {
      : print {( "The only current option is " + notif + ", for score notification." )};
   }
   options_notify: subroutine {
      : match "notify yes;notify y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no;notify n" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "notify -" {
         : print {( "Toggling <NOTIFY<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "notify *" {
         : print {( "The argument after <NOTIFY<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   tutorial_progress : subroutine {
      : if (!tutorial_about_done) {
         : print {( tut + "An author frequently implements an " + abt + " commands page for the player to access. This contains details that might disrupt the cover-screen narrative. You can try it now." )} ;
         : return ;
      }
      : if (!tutorial_verbs_done) {
         : print {( tut + "The " + verbs + " meta-command is useful to see what the most common commands are. You can try it now." )};
         : return ;
      }
      : if (!tutorial_additional_metaverb_done) {
         : print {( tut + "The " + abt + " and " + verbs + " meta-commands tipped off additional other meta-commands that may help you get your bearings. You should try one now." )};
         : return ;
      }
      : if (!tutorial_x_me_done) {
         : print {( tut + (tutorial_x_me_cued ? "You'll want to " + xme + " to continue the tutorial." : "Now you've looked into the meta-commands, you'll want to have a look at yourself. One convention of text adventures is that " + xme + " provides clues of who you are and what you're doing with relatively few keystrokes. So " + xme + " should be your first in-world command.")  )} ;
         : set_true "tutorial_x_me_cued" ;
         : return ;
      }
      : if (!tutorial_x_ask_done) {
         : print {( tut + "The last thing to do is to <X TASK<#0f0>>. Adventuron also recognizes <X ASK<#0f0>> and <X OOH<#0f0>>, but not <X TO<#0f0>>, as that's a reserved word." )} ;
         : return;
      }
      : if (tutorial_x_ask_done) {
         : print "Congratulations! You've finished the tutorial. Now on with the game. While the tutorial is over, you can still use HINT or HELP or HINTS.";
         : set_true "tutorial_done";
         : set_false "in_tutorial";
         : return ;
      }
      : print "I should have had something to do for the tutorial. This is a bug, but not a game-breaker. It probably means you're done with the tutorial.";
   }
   meta_about : subroutine {
      : print {( qt + " was made for the TALP 2025 jam after years of judging it. I always wanted to write an Adventuron game." )} ;
      : print {( "You can find specific thanks in the " + thx + " command." )} ;
      : set_true "tutorial_about_done" ;
   }
   meta_thanks : subroutine {
      : print "Thanks to TALP admins past and future.";
      : print "Thanks to Chris Ainsley (sp?) for creating Adventuron.";
      : print "Thanks to my testers.";
      : print "Thanks to you, for playing this game.";
      : gosub "check_additional_meta" ;
   }

   check_additional_meta : subroutine {
      : if (!tutorial_additional_metaverb_done) {
         : print {( tut + "good job. You found one specific meta-command. There are others, but I didn't want to force you to see them all. You can if you want. You just need to know that a robust text adventure takes steps to help the player not feel lost." )} ;
      }
      : set_true "tutorial_additional_metaverb_done";
   }

   verb_list : subroutine {
      : set_true "tutorial_verbs_done";
      : print {( "While " + qt + " requires you to guess some verbs as part of a puzzle, it doesn't require any nonstandard verbs to move around or manipulate objects or NPCs." )} ;
      : print "There are no diagonal directions, only N S E W U D and IN and OUT. You can use the long form of each direction, but it is not necessary." ;
      : print "You can <TAKE<#0f0>> an item, but there is no need to <DROP<#0f0>> it. You can also <X<#0f0>> it, which is short for <EXAMINE<#0f0>>." ;
      : print {( "No other standard commands are needed to win " + qt + ". However, <META<#f80>> will describe meta-commands, and <OPTIONS<#f80>> toggles options." )} ;
      : if (in_debug) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }
   verb_meta_list : subroutine {
      : print {( "ABOUT gives info about the game." )} ;
      : print {( "THANKS gives info about people who helped with the game. I usually use CREDITS, but Adventuron reserves that for its own." )} ;
      : print {( "There are also standard commands like SAVE, RESTORE and QUIT." )} ;
      : print {( "Adventuron-specific META commands include TSTART and TSTOP, which start and stop a transcript." )} ;
      : set_true "tutorial_additional_metaverb_done";
   }
   verb_options_list : subroutine {
      : print {( "Many games have options for sound, etc. " + qt + " uses <OPTIONS YES/Y<#00f>> and <OPTIONS NO/N<#00f>> to change them. <OPTION<#00f>> shows its status." )} ;
      : print {( "The main option is <TUTORIAL<#0f0>>" + (tutorial_done ? "but you've finished the tutorial" : ", though it's disabled once the tutorial is done" ) + "." )} ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

   ask_new_game                                   = Would you like to restart {qt}?
   ask_quit                                       = Do you wish to quit {qt}?
   post_quit = I hope you enjoyed the experience. Pressing any key will restart {qt}.
   you_cant_go_that_direction                     = There's no exit that way. {exits} will show which there are.
   unknown_verb                                   = Nothing comes up from that. {verbs} gives a list of basic standard verbs, though you will have a few to guess based on rules.
   }
      }
   }

## On_debug and on_startup call the INIT subroutine, but on_debug sets a flag or flags to allow for cheat commands

on_debug {
   : set_true "in_debug" ;
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

on_startup {
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

## on_tick is primarily used for the tutorial

on_tick {
   : if (in_tutorial) {
      : gosub "tutorial_progress" ;
   }
}

## on_describe is for moving around

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_pre_command {
   : if (!examine_warn) {
      : match "examine *;look *" {
         : if (original "verb" == "examine") {
            : print {( otn + " to save keystrokes, you only need to type <X<#0f0>> (noun) to examine." )} ;
            : gosub "long_words_note" ;
            : set_true "examine_warn" ;
            : press_any_key ;
         }
      }
   }
   : if (!look_warn) {
      : match "look -" {
         : if (original "verb" == "look") {
            : print {( otn + " you only need to type <L<#0f0>> to look." )} ;
            : gosub "long_words_note" ;
            : set_true "look_warn" ;
            : press_any_key ;
            : redescribe ;
         }
      }
   }
   : if (!inventory_warn) {
      : match "inventory _" {
         : if (original "verb" == "inventory") {
            : print {( otn + " you only need to type <I<#0f0>> to take inventory." )} ;
            : gosub "long_words_note" ;
            : set_true "inventory_warn" ;
            : press_any_key ;
         }
      }
   }
}

on_command {
   : match "salesmen _"  {
      : if (is_at "nameless_lameness") {
         : print "Good guess, if this were an anagram game." ;
         }
      }
   : match "theory bore" {
      : if (bonus_point_theory_bore) {
         : print {( "Thor is " + (point_first_base ? "" : "likely ") + "bigger than you. Best not to overplay this." )} ;
      }
      : else {
        : print {( point_first_base ? "You snicker at what you've found, but then figure you better not do so to Thor's face." : "You worry Thor will be upset by this observation, but he booms \"Ha! Good one. I was sort of hoping you'd figure that. I actually don't mind people saying that. It implies I said something too smart. Better than being called a musclehead or whatever.\"" )} ;
       : set_true "bonus_point_theory_bore" ;
       : gosub "add_bonus" ;
    }
   }
   : match "turkey quest" {
      : if (bonus_point_turkey_quest) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point." ;
         : set_true "bonus_point_turkey_quest" ;
         : gosub "add_bonus";
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;

   }
   : match "exits _" {
      : if (is_at "nameless_lameness") {
         : print "There's a puzzle here to start. The tutorial can walk you through it." ;
         }
      : else {
         : print "I should list exits here.";
      }
   }
   : match "verb _;verbs _" {
      : gosub "verb_list" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "thank _;thanks _" {
      : gosub "meta_thanks" ;
   }
   : match "drop _" {
      : print "While classic text adventures often required the player to use <DROP<#0f0>> due to inventory limits, this is often regarded as needless fiddling today. Text adventures often take steps to keep the player's inventory manageable so they can focus on puzzles, getting rid of items that are no longer necessary.";
   }
   : match "x me" {
      : if (is_carried "ooh_task") {
         : print "Got what you need." ;
      }
      : else {
         : pocket "ooh_task" ;
         : print "You find something called Ooh, Task to Ask." ;
         : gosub "add_point";
         : set_true "tutorial_x_me_done";
      }
   }
   : match "x ooh;x task;x task;x ask" {
      : if (is_carried "ooh_task" && !tutorial_x_ask_done) {
         : mask {
            : set_true "tutorial_x_ask_done";
         }
      }
   }
   : match "burst face" {
      : if (is_at "burst_face") {
         : if (point_first_base) {
            : print "Already changed things." ;
			: return ;
         }
		 : set_true "point_first_base" ;
		 : create "beery_thor" ;
		 : gosub "add_point" ;
	  }
   }
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "Your <tutorial score<3>> is " + tutorial_score + " out of <" + max_tutorial_score + "<#ff0>>." )} ;
      }
      : print {( "Your <core score<4>> is " + score + " out of <" + max_score + "<#f00>>." )} ;
      : print {( "Your <bonus score<#f80>> is " + bonus_score + " out of " + max_bonus_score + "." )} ;
      }
   : match "option _;options _;opts _;opt _" {
      : gosub "options_list";
   }
   : match "notify _" {
      : gosub "options_notify";
   }
   : match "meta _" {
      : gosub "verb_meta_list";
   }
}


assets {
   graphics {
      lameness_16 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVSUlKtra2fn5+YmJimpqZgYGBnZ2dubm5ZWVl1dXWRkZGDg4NLS0u0tLR8fHyKioo9s6mBAAAB6ElEQVRYw+XYIZaDMBAGYHIELrACvQ6JRdUjse0RKmvpARBcAIHEcgFEZS0KzxXovja0ZCYzJARq9r8A3yOTySSeJyN8meGVPnym+SR45SaTPXMtZBKZtJsSP1O9c5xylrmMf/HemQA/CiCCgN8J0G4NEAuAWgsoICCZvn9/AQ5rAQMBuOkBuTvA0wJCqgQAIEGAOAZrYAoYDAFKCeQIcLcHCBUAtkHNAhIEiJ0BoAgCUIO3+QrMfkAKAYfVgH4OqCEg+zIgAICWWoEUlMAHUMrvnwyLUC0CY0C3OSDSArIvAAYdQPkBmi7gABAEINQBsozog+l6gG8BaNcAKh4AjwIAqHcH+DYAOAyQZyELOP87QMkBBAmIdIB2c4C/AGi4Rjirwq4jzwJ+CXy8CwflPNadRRsCxFaAlAaU3wXcScBRB/BJQMQAPjNxYQBg54FlQL09YHQAtBCQE/eS2VD4Bpw4wGwX9jsDLmaAhgNcdwWENoACAdDFoASAcdRtQ1dAQgOqVYCo4XaBpggYQMkAyMOwsQXgIqiITrQE6HWX42VA4ggAUzn5PIEAhSNAIAD/PkIDUC+kbqcXK0C9NwBN5b0tIKeGIrQCchsAgNC9TyBAYAHoqE6o7EP+jSqC7yMmALgG6AcovfgBhBvnaozG45IAAAAASUVORK5CYII=";
   }
}