
start_at = nameless_lameness
start_theme = my_theme

## we start with simplest defined then move to more complex

## Booleans and integers

booleans {
   ## game state booleans
   in_debug : boolean "false" ;
   score_notify : boolean "true" ;
   tutorial_done : boolean "false" ;
   footnotes_available : boolean "false" scope="survivor";
   talked_to_thor : boolean "false" ;
   jump_commands_notified : boolean "false" ;

   ## regular point tally booleans
   point_first_base : boolean "false" ;

   ## QT goals, north then clockwise
   point_master_plan : boolean "false" ;
   point_chalice_map : boolean "false" ;
   point_fell_short : boolean "false" ;
   point_take_crackers : boolean "false" ;
   point_shift_goals : boolean "false" ;
   point_hunters_grill : boolean "false" ;
   point_fellow_yield : boolean "false" ;

   ## TQ goals, north then clockwise
   point_fly_score : boolean "false" ;
   point_bending_truth : boolean "false" ;
   point_boring_way: boolean "false" ;
   point_dirt_home : boolean "false" ;
   point_pouring_rain : boolean "false" ;
   point_funny_mountain : boolean "false" ;
   point_grim_tune : boolean "false" ;

   point_travel_grail : boolean "false" ;
   point_missing_house : boolean "false" ;
   point_see_glimmering : boolean "false" ;
   point_hi_mouse : boolean "false" ;

   ## quasi-point
   fh_travel_grail : boolean "false" ;

   ## bonus point tally booleans
   bonus_point_turkey_quest : boolean "false" ;
   bonus_point_theory_bore : boolean "false" ;
   bonus_point_death_sentence : boolean "false" ;

   ## tutorial booleans, organized by order you see/do them in
   in_tutorial: boolean "false" ;
   tutorial_about_done : boolean "false" ;
   tutorial_verbs_done : boolean "false" ;
   tutorial_additional_metaverb_done : boolean "false" ;
   tutorial_x_me_done : boolean "false" ;
   tutorial_x_me_cued : boolean "false" ;
   tutorial_inventory_done : boolean "false" ;
   tutorial_inventory_cued : boolean "false" ;
   tutorial_item_taken: boolean "false" ;
   tutorial_x_ask_done : boolean "false" ;

   ## parser shortcut booleans
   look_warn: boolean "false" ;
   examine_warn: boolean "false" ;
   inventory_warn : boolean "false" ;
   long_word_warn : boolean "false" ;
}

integers {
   tutorial_score : integer "0" ;
   max_tutorial_score : integer "1";
   score : integer "0" ;
   max_score : integer "5" ;
   points_left_side : integer "0" ;
   points_right_side : integer "0" ;
   bonus_score : integer "0" ;
   max_bonus_score : integer "3" ;
}

## strings

strings {
   ## short stubs
   # meta verbs in orange
   abt : string "<ABOUT<#f80>>" ;
   exits : string "<EXITS<#f80>>" ;
   exitserr : dynamic_string {( is_beside "cheering_voice" ? "No, that's not the way out. Trial and error might get it. Or figuring what the voice really means." :
      tutorial_x_ask_done ? "In this nameless lameness, any move without figuring where to go could get you even more lost. You need some clue, first." :
      is_at "nameless_lameness" ? "You don't want to wandering off without any direction, but maybe that voice could offer a clue." :
      "There's no exit that way. {exits} will show which there are." )} ;
   hint : string "<HINT<#f80>> or <HINTS<#f80>>" ;
   meta : string "<META<#f80>>" ;
   sco : string "<SCORE<#f80>>" ;
   thx : string "<THANKS<#f80>>" ;
   verbs : string "<VERBS<#f80>>" ;

   # yes-or-no
   yn : string "<YES<#f88>>/<Y<#f88>> or <NO<#f88>>/<N<#f88>>" ;
   on : string "<ON<#f88>>" ;
   off : string "<OFF<#f88>>" ;

   # options in blue 00f
   notif : string "<NOTIFY<#00f>>" ;

   # game title
   qt : string "<Quirky Test<#ff0>>" ;

   # regular commands in green
   lishea : string "<LISTEN<#0f0>> or <HEAR<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;

   # tutorial stuff in purple
   tnote : string "<TUTORIAL NOTE:<#f0f>> " ;
   tcue : string "<TUTORIAL CUE:<#f0f>> " ;
   otn : string "<ONE-TIME NOTE:<#f0f>> " ;

   ## dynamic strings

   my_score : dynamic_string {( score + "/" + max_score )}
   notify_string : string {( "You need to specify " + notif + " " + yn + " for score notification changes." )}

   ## location strings
   burst_face_after : string "You're at first base now." ;
   burst_face_before : string "You're at a burst face. You feel about ready to take an initial step." ;

   sub_hub: string "Another mini-hub here. You can go up over a hill, south back to the bold hub, or in any of the eight directions." ;

   ## quickie trips seeding for dynamic strings, starting north and going clockwise
   qt_plaster_man : string "A plaster man stands here. Perhaps there is something inside it." ;
   qt_master_plan : string "With the plaster man destroyed, there's not much left here." ;
   qt_malice_chap : string "You feel the malice here from the malice chap." ;
   qt_chalice_map : string "You got the chalice map here. There can't really be anything left to do." ;
   qt_shell_fort : string "A shell fort sits here. It occasionally fires rounds that get close to you. While there's no danger of you getting hit, it's still annoying and gets in the way of trying to find anything." ;
   qt_fell_short : string "The shell fort lies barren now. You even ransacked it for rations." ;
   qt_cake_trackers : string "Cake trackers mope about here, looking for cake, mumbling about how they only have boring food to eat. They are nonspecific about what boring food it is, but maybe you can figure that out." ;
   qt_take_crackers : string "Man! Those folks sure had a lot of crackers. But they were greedy and wanted cake. You've taken all you possibly need, and there are still several boxes left over." ;
   qt_gift_shoals : string "Gift shoals are here. Yet no matter how many gifts they wash up, you don't see anything you like." ;
   qt_shift_goals : string "The shoals seem more peaceful now that you have fixed your mindset." ;
   qt_grunters_hill : string "Grunts emanate from here. It's like people are trying to forage for food, but of course their making noise makes it hard. Their grunts are mainly about not having enough food." ;
   qt_hunters_grill : string "Well, you've had your feast, and it was delicious. It's filled you up for the journey ahead. Hanging around here wouldn't burn any calories, so you should probably get going." ;
   qt_yellow_field : string "Someone is blocking you here in this yellow field. Why, or from what, you're not sure." ;
   qt_fellow_yield : string "The yellow field is pretty to look at, but there's nobody and nothing here that can help you further." ;

   ## tricky quips seeding for dynamic strings, starting north and going clockwise
   tq_sky_floor : string "The sky/floor here gives you poetic thoughts. Well, maybe not quite poetic, maybe wordless. You're not quite sure, but when you figure it out, you're sure you'll think up something cool." ;
   tq_fly_score : string "It was inspirational to think up a neat little tune here, but you want to share it now." ;
   tq_trending_booth : string "A trending booth sits here, spouting all sorts of things you can and should be doing that are more exciting than silly old text adventuring. The arguments seem convincing, and yet ..." ;
   tq_bending_truth : string "Noise continues to emanate from the trending booth, but you sort of recognize a lot of its rhetorical tricks, so you can ignore it and leave when you want." ;
   tq_warring_bay : string "You don't know how or why a war started in this warring bay, but it's ongoing and seems like it has for a while. Everyone there seems to find it very, very exciting." ;
   tq_boring_way : string "Well, you made this a boring way. You feel content having contributed to peace, but all the same, this being a boring place, you can't imagine having anything interesting to do here." ;
   tq_hurt_dome : string "hurt dome" ;
   tq_dirt_home : string "dirt home" ;
   tq_roaring_pain : string "You feel roaring pain. While there's some shelter here from above, it doesn't help with the internal stuff." ;
   tq_pouring_rain : string "The shelter keeps you safe from the pouring rain, which shows no sign of letting up. Probably just have to make a run for it when you can." ;
   tq_money_fountain : string "A money fountain is here. People dive in, trying to get the money, but they somehow come up empty. It's very upsetting and soul-draining for them." ;
   tq_funny_mountain : string "A mountain with a cheery face somehow carved in its side makes all who walk by laugh or smile as they go on their day. It helps you, too, though you recognize true happiness is a journey that extends away from here, and the mountain just gives a temporary boost." ;
   tq_trim_goon : string "A trim goon sits here, ready to rough you up. They seem quite pleased to have the job they do." ;
   tq_grim_tune : string "You sit and bask in the area, now barren, which only reenforces the grim tune you whipped up. You see, with some modifications, it could work against non-physical cruelty." ;

   ## fate hills
   fate_hills_desc: dynamic_string {( fh_travel_grail ? "Well, finding the travel grail wasn't your ultimate fate, but it probably helped you get here. Not much more to do." : "You feel something fateful in the air. Like you need to do something, and you need to be prepared."
   )};
}

## Objects with vocabulary

objects {
  # in inventory
  ooh_task : object "Ooh Task to Ask ('Ooh Task')" msg="It is a request to find the <Rare-Thing-There Ring<#a33>>.";

  # scenery
  cheering_voice : scenery "cheering voice" msg="It gives a cheery \"Whoa! Guest!\"" conspicuous="false";
  seth_dentons : scenery "Seth Denton's" msg="It looks forbidding, but you're not sure why." at="bold_hub" conspicuous="false";

  # NPC(s)
  beery_thor : object "Beery Thor" msg="Big and strong and friendly.";
}

vocabulary {
   : noun / aliases = [ooh, task, ask]
   : verb / aliases = [tut, tutorial]
}

## Locations and location-specific parser rules

locations {
   nameless_lameness      : location "You are surrounded by nameless lameness. It's all very, very grey." graphic = "lameness_16" {
      on_command {
         : if ((verb_is "inventory") && in_tutorial && !tutorial_x_me_done) {
            : print "Taking inventory is a good thing to do early in a text adventure, but we're not there yet in the tutorial. Once you've found an item, the tutorial will nudge you to do take inventory.";
         }
         : match "listen _; hear _" {
            : if (tutorial_x_ask_done) {
               : print "You hear a voice. It's a happy one. For whatever reason, you mark it up as a Veering Choice Cheering Voice. It greets you, sort of, with a \"Whoa! Guest!\" You'd like to see where it's from. But which direction is that?" ;
               : create "cheering_voice" ;
               : return ;
            }
         }
         : match "x me" {
            : if (in_tutorial && (!tutorial_about_done || !tutorial_verbs_done || !tutorial_additional_metaverb_done)) {
               : print {( "While " + xme + " is a useful command, and one you'll be using in this tutorial, we're a bit on rails. There are meta-commands to acquaint yourself with first." )};
            }
            : else_if (is_carried "ooh_task") {
               : print "Got what you need." ;
            }
            : else {
               : pocket "ooh_task" ;
               : print "You search yourself, wondering if you forgot something, and hoping something will turn up. And guess what? There's something called <Ooh, Task to Ask<#00f>>." ;
               : print "You're not sure who slipped it in there, or how, but all the same, you're glad you might have some direction, now." ;
               : gosub "add_point";
               : set_true "tutorial_x_me_done";
            }
         }
         : match "go west" {
            : if (is_beside "cheering_voice") {
               : print "Yes, the voice says, that is the way!" ;
               : goto "burst_face" ;
            }
         }
      }
      on_describe {
         : if ( is_beside "cheering_voice") {
            : print "The cheering voice still floats around. You can HEAR it or LISTEN.";
         }
         : else_if (is_carried "ooh_task" && tutorial_x_ask_done) {
            : print "But it's no longer silent. Perhaps you can <LISTEN<#0f0>> or <HEAR<#0f0>>.";
         }
      }
   };
   burst_face : location "{ point_first_base ? burst_face_after : burst_face_before }" {
      on_command {
         : match "talk _;talk thor"  {
            : if (!talked_to_thor) {
               : print "\"Well, there's one last thing to do, here. You managed to GO WEST after hearing me say Whoa, Guest. What can you do with the burst face?\"";
               : set_true "talked_to_thor";
               : if (in_tutorial) {
                  : print "Congratulations! You've finished the tutorial." ;
               }
            }
            : else {
               : print {( point_first_base ? "\"Here's where I boom HOLD, BUB. What am I hiding from you? Just one more test before you get to the main area.\"" : "\"You need to figure what to do with the burst face that's blocking your way.\"" )};
               : set_true "talked_to_thor" ;
            }
         }
         : match "first base" {
            : if (point_first_base) {
               : print "You already changed things here." ;
               : return ;
            } : else_if (!talked_to_thor) {
               : print "\"That's the right idea, but I'm bigger than you. I'm going to make you talk to me first. Don't worry, I'm interesting. Or I think I am.\"";
               : return ;
            }
            : print "Ah, there we go. That'll make paths clearer.";
            : set_true "point_first_base" ;
            : create "beery_thor" ;
            : gosub "add_point" ;
         }
         : match "bold hub" {
            : if (talked_to_thor) {
               : print "\"Yes, that's where we'll go next.\"";
               : gosub "add_point" ;
               : press_any_key ;
               : create "beery_thor" target = "bold_hub" ;
               : goto "bold_hub";
               : redescribe ;
            }
         }
      }
   };
   bold_hub  : location "You are in a bold hub. You can go in pretty much any direction." {
      on_command {
         : if (is_beside "seth_dentons") {
            : match "death sentence" {
               : print "\"Yes, that's it. This is one of those traps where you're given adequate warning that going somewhere might kill you.\"";
               : set_true "bonus_point_death_sentence" ;
               : destroy "seth_dentons" ;
               : gosub "add_bonus" ;
            }
         }
      }
      on_describe {
         : if (is_beside "seth_dentons") {
            : print "An establishment called Seth Denton's is off to the side here. You have a feeling you don't want to go IN, and maybe you can figure why." ;
         }
      }
   };

   quickie_trips: location "QUICKIE TRIPS\n{sub_hub}" {
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   tricky_quips: location "TRICKY QUIPS\n{sub_hub}" {
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   fate_hills: location "FATE HILLS\n{fate_hills_desc}\nYou can go back west to the quickie trips or east to the tricky quips." {
      on_describe {
         : gosub "list_jump_commands" ;
      }
   };

   qt_n : location "{point_master_plan ? qt_master_plan : qt_plaster_man}" {
      on_command {
      : match "master plan" {
         : if (point_master_plan) {
            : print "You already got the master plan.";
            }
         : else
         {
            : print "You have reason to find a master plan, so you bust open the master plan and find it." ;
            : set_true "point_master_plan" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_ne : location "{point_chalice_map ? qt_chalice_map : qt_malice_chap}" {
      on_command {
      : match "chalice map" {
         : if (point_chalice_map) {
            : print "You already got the chalice map from the malice chap.";
            }
         : else
         {
            : print "You offer to relieve the malice chap of his chalice map. You're surprised he accepts." ;
            : set_true "point_chalice_map" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_e : location "{point_fell_short ? qt_fell_short : qt_shell_fort}" {
      on_command {
      : match "fell short" {
         : if (point_fell_short) {
            : print "You already managed to make the artillery miss you. No need to taunt.";
            }
         : else
         {
            : print "You believe in yourself and use the power of words to make the artillery fall short. The people inside give up on you. They have much easier targets." ;
            : set_true "point_fell_short" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_se : location "{point_take_crackers ? qt_take_crackers : qt_cake_trackers}" {
      on_command {
      : match "take crackers" {
         : if (point_take_crackers) {
            : print "Don't get greedy! You have enough crackers.";
            }
         : else
         {
            : print "While the cake trackers aren't looking, you pinch a box of crackers. They don't notice at first, but when they fail to find any cake, they start getting mad and accusing each other." ;
            : set_true "point_take_crackers" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_sw : location "{point_shift_goals ? qt_shift_goals : qt_gift_shoals}" {
      on_command {
      : match "shift goals" {
         : if (point_shift_goals) {
            : print "But you don't want to shift your goals back." ;
            }
         : else
         {
            : print "You stop looking for something direct from the gift shoals. You begin, like, meditating and stuff." ;
            : set_true "point_shift_goals" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_w : location "{point_hunters_grill ? qt_hunters_grill : qt_grunters_hill}" {
      on_command {
      : match "hunters grill" {
         : if (point_hunters_grill) {
            : print "But you already had enough of a feast. Any more, and you wouldn't be able to move around." ;
            }
         : else
         {
            : print "You tell people to stop whining and start making a fire, or something. You're surprised they agree with you, especially when you show them some crackers and ???." ;
            : set_true "point_hunters_grill" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };
   qt_nw : location "{point_fellow_yield ? qt_fellow_yield : qt_yellow_field}" {
      on_command {
      : match "fellow yield" {
         : if (point_fellow_yield) {
            : print "You feel no need to relive past victories." ;
            }
         : else
         {
            : print "You take a balanced tone of friendship and defiance. You're surprised how well it works." ;
            : set_true "point_fellow_yield" ;
            : gosub "add_point_qt" ;
         }
         : done ;
         }
      }
   };

   tq_n : location "{point_fly_score ? tq_fly_score : tq_sky_floor}" {
      on_command {
      : match "fly score" {
         : if (point_fly_score) {
            : print "You already imagined a fly score, but you recite it again, s you don't forget it." ;
            }
         : else
         {
            : print "The poetic nature of the sky floor embeds itself in your head, and you think up a tune you're surprised you were able to." ;
            : set_true "point_fly_score" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_ne : location "{point_bending_truth ? tq_bending_truth : tq_trending_booth}" {
      on_command {
      : match "bending truth" {
         : if (point_bending_truth) {
            : print "You've seen through the trending booth's lies. Rehashing that sort of thing too much makes you go in circles." ;
            }
         : else
         {
            : print "You realize that the trending booth's Stone Cold Facts are ice-cold when it comes to universal truths. You take some time to pause and think how and why the overgeneralizations and out-of-context anecdotes and such are inaccurate. Yet you also realize there's a place for brevity and not having to explain every detail. Some of the rhetorical tricks will stay with you." ;
            : set_true "point_bending_truth" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_e : location "{point_boring_way ? tq_boring_way : tq_warring_bay}" {
      on_command {
      : match "boring way" {
         : if (point_boring_way) {
            : print "The way is now plenty boring. You don't want to risk dying of boredom after preventing so much death from war. That'd make for an embarrassing headstone!" ;
            }
         : else
         {
            : print "You somehow manage to get into the fighters' heads that it's not as exciting as it seems. At first they're mad, but after a while, they realize it's all for the best. Peace may be boring, but then again, the excitement of war is draining." ;
            : set_true "point_boring_way" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_se : location "There's a {point_dirt_home ? tq_dirt_home : tq_hurt_dome} here." {
      on_command {
      : match "dirt home" {
         : if (point_dirt_home) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "Poof! The hurt dome transforms into a dirt home." ;
            : set_true "point_dirt_home" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_sw : location "{point_pouring_rain ? tq_pouring_rain : tq_roaring_pain}" {
      on_command {
      : match "pouring rain" {
         : if (point_pouring_rain) {
            : print "You already made the dirt home." ;
            }
         : else
         {
            : print "As your pain resides, you feel a drip from above. Then another. Then two, then four. Thank goodness for the shelter nearby! You sit there and find watching the rain surprisingly poetic." ;
            : set_true "point_pouring_rain" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_w : location "{point_funny_mountain ? tq_funny_mountain : tq_money_fountain}" {
      on_command {
      : match "funny mountain" {
         : if (point_funny_mountain) {
            : print "You already changed the scenery here for the better. Making the mountain bigger might destabilize it." ;
            }
         : else
         {
            : print "Nothing happens at first. Then a slow rumbling. A small hill pokes through the ground, sending the money in the fountain everywhere. Outside of the fountain, the money flies into the mountain and helps enlarge it. There must be a lot of money in the fountain, because it takes a while. The resulting funny mountain is an improvement, though the scavengers don't think so." ;
            : set_true "point_funny_mountain" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
   tq_nw : location "{point_grim_tune ? tq_grim_tune : tq_trim_goon}" {
      on_command {
      : match "grim tune" {
         : if (point_grim_tune) {
            : print "You already thought up a grim tune. Any more, and you might be so depressed you forget what you wrote, or you wonder why even bother to share it." ;
            }
         : else
         {
            : print "You sing your grim tune at the trim goon. They immediately have a rush of discomfort with their lot in life. Don't they deserve more? They go off to join a pyramid scheme, in hopes of finding it. Unfortunately, they get fleeced by people more awful than they, but fortunately, they learn a lesson from it and dedicate the rest of their life to help other people." ;
            : set_true "point_grim_tune" ;
            : gosub "add_point_tq" ;
         }
         : done ;
         }
      }
   };
};

# connections between locations. There are warps for the first few areas, but after that, it's a pretty standard map.

connections {

   from, direction, to = [

      ## two-way stuff first
      tricky_quips, north, tq_n,
      tricky_quips, northeast, tq_ne,
      tricky_quips, east, tq_e,
      tricky_quips, southeast, tq_se,
      tricky_quips, southwest, tq_sw,
      tricky_quips, west, tq_w,
      tricky_quips, northwest, tq_nw,

      quickie_trips, north, qt_n,
      quickie_trips, northeast, qt_ne,
      quickie_trips, east, qt_e,
      quickie_trips, southeast, qt_se,
      quickie_trips, southwest, qt_sw,
      quickie_trips, west, qt_w,
      quickie_trips, northwest, qt_nw,

      ## one-way/bending path stuff below
      ## hub bending paths

      bold_hub, west_oneway, quickie_trips,
      quickie_trips, south_oneway, bold_hub,
      bold_hub, east_oneway, tricky_quips,
      tricky_quips, south_oneway, bold_hub,

      ## fate hills bending paths
      tricky_quips, up_oneway, fate_hills,
      quickie_trips, up_oneway, fate_hills,
      fate_hills, west_oneway, quickie_trips,
      fate_hills, east_oneway, tricky_quips
   ]
}

barriers {
   block_qt_n : block {
      location = qt_n
      block_when = point_master_plan
      message = You got the master plan, so you don't really need to go back north.
   }
   block_qt_ne : block {
      location = qt_ne
      block_when = point_chalice_map
      message = You got the chalice map, so you don't really need to go back northeast.
   }
   block_qt_e : block {
      location = qt_e
      block_when = point_fell_short
      message = You dismantled the shell fort, so you don't need to go back east.
   }
   block_qt_se : block {
      location = qt_se
      block_when = point_take_crackers
      message = You already got some crackers from the cake trackers. There can't be anything more back southeast.
   }
   block_qt_sw : block {
      location = qt_sw
      block_when = point_shift_goals
      message = With your goals shifted, you've gotten all the mindfulness or whatever you need from the shoals to the southwest.
   }
   block_qt_w : block {
      location = qt_w
      block_when = point_hunters_grill
      message = You helped the hunters fire up their grill. There's nothing really left to do to the west.
   }
   block_qt_nw : block {
      location = qt_nw
      block_when = point_fellow_yield
      message = You got the fellow to yield in the yellow field, which was pretty barren otherwise. So you don't need to go back northwest.
   }

   block_tq_n : block {
      location = tq_n
      block_when = point_fly_score
      message = You don't feel as though the sky/floor to the north has anything more to offer you. Well, maybe you can go back for new artistic inspiration, after you completed the quest for Thor.
   }
   block_tq_ne : block {
      location = tq_ne
      block_when = point_bending_truth
      message = You already bent the truth a bit to the northeast. You don't want to do too much of that sort of thing. At least, I hope you don't.
   }
   block_tq_e : block {
      location = tq_e
      block_when = point_boring_way
      message = You cooled off the warring bay to the east. While you wouldn't die of boredom in the now-boring way to the east, hanging around there wouldn't get you any closer to your goals.
   }
   block_tq_se : block {
      location = tq_se
      block_when = point_dirt_home
      message = You changed the hurt dome to a dirt home. You can't think of anything else you need to do to the southeast.
   }
   block_tq_sw : block {
      location = tq_sw
      block_when = point_pouring_rain
      message = You changed the roaring pain to pouring rain. You really can't see any reason to go get soaked more do to the southwest.
   }
   block_tq_w : block {
      location = tq_w
      block_when = point_funny_mountain
      message = You changed the funny mountain to a money fountain. You can't think of anything else you need to do to the west.
   }
   block_tq_nw : block {
      location = tq_nw
      block_when = point_grim_tune
      message = You chased the trim goon with a grim tune. You can't think of anything else you need to do to the northwest.
   }
}

subroutines {
   add_point : subroutine {
      : if (score_notify) {
         : print "<Your score just went up by a point!<#ff0>>" ;
      }
      : increment "score" ;
      }
   add_point_qt : subroutine {
      : increment "points_left_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_point_tq : subroutine {
      : increment "points_right_side" ;
      : gosub "add_point" ;
      : update_graphic ;
      }
   add_bonus : subroutine {
      : if (score_notify) {
         : print "<You just found a bonus point!<6>>" ;
         : if (bonus_score == 0) {
             : print {( otn + "There are a few of these in " + qt + ", and " + sco + " will let you know your progress there." )};
         }
      }
      : increment "bonus_score";
      }
   list_jump_commands : subroutine {
      : if (jump_commands_notified) {
         : return ;
      }
      : if ((!has_visited("bold_hub")) || (!has_visited("quickie_trips")) || (!has_visited("tricky_quips")) || (!has_visited("fate_hills"))) {
         : return ;
      }
      : set_true "jump_commands_notified" ;
      : print "You've seen all the main locations in the game. There are several jump commands you can use in case you don't want to fiddle with directions.\n\nBH = bold hub\nFH = fate hills\nQT = quickie trips\nTQ = tricky quips" ;
   }
   init : subroutine {
   : print "QUIRKY TEST: a tutorial of sorts by Andrew Schultz!" ;
   : print "Submitted for the 2025 TALP competition." ;
   : press_any_key ;
   : if (footnotes_available) {
     : print "Because you went through once, footnotes are now available.";
     : press_any_key ;
     }
   : clear_screen ;
   }
   tutorial_choice : subroutine {
   : ask_bool { ##? how do we put QT in here?
      question   = <Quirky Test<#ff0>> has a tutorial mode for the first few puzzles. Would you like to use it?
      yes_answer = Yes, I'd like to use the tutorial.
      no_answer  = No, I don't need the tutorial.
      var        = in_tutorial
      }
      : print {( "Note you can change in and out of tutorial mode with <TUTORIAL<#00f>> " + yn + " before you have completed the first few tasks, though this may break narrative continuity." )} ;
      : press_any_key ;
      : clear_screen ;
   }
   long_words_note : subroutine {
      : if (!long_word_warn) {
      : print "<ALSO<#f0f>>: in general, longer words will work, but parser conventions have evolved to help save the player keystrokes." ;
      : set_true "long_word_warn" ;
      }
   }
   debug_commands : subroutine {
      : match "wingame _"  {
         : print {( footnotes_available ? "Already won game, but restarting with footnotes still available." : "Auto-winning game so footnotes are available on reboot." )} ;
         : set_true "footnotes_available";
         : win_game ;
      }
   }
   options_list : subroutine {
      : print {( "The only current option is " + notif + ", for score notification." )};
      : print {( "Note that we use " + yn + " to toggle options instead of " + on + " and " + off + ", since " + on + " is reserved by Adventuron." )};
      : print {( "Also note that a verb alone will not be recognized. At least, not in the initial version of " + qt + "." )} ;
   }
   options_notify: subroutine {
      : match "notify yes;notify y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "notify no;notify n" {
         : print "Score notify is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "notify -" {
         : print {( "Toggling <NOTIFY<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "notify *" {
         : print {( "The argument after <NOTIFY<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   options_tutorial: subroutine {
      : match "tutorial yes;tutorial y" {
         : print "Score notify is now on.";
         : set_true "score_notify";
         : done ;
      }
      : match "tutorial no;tutorial n" {
         : print "Tutorial mode is now off.";
         : set_false "score_notify";
         : done ;
      }
      : match "tutorial -" {
         : print {( "Toggling <TUTORIAL<#0f0>> without an argument is not supported. " + notify_string )};
         : done ;
      }
      : match "tutorial *" {
         : print {( "The argument after <TUTORIAL<#0f0>> wasn't recognized. " + notify_string )};
      }
   }
   tutorial_progress : subroutine {
      : if (!tutorial_about_done) {
         : print {( tcue + "An author frequently implements an " + abt + " commands page for the player to access. This contains details that might disrupt the cover-screen narrative. You can try it now." )} ;
         : return ;
      }
      : if (!tutorial_verbs_done) {
         : print {( tcue + "The " + verbs + " meta-command is useful to see what the most common commands are. You can try it now." )};
         : return ;
      }
      : if (!tutorial_additional_metaverb_done) {
         : print {( tcue + "The " + abt + " and " + verbs + " meta-commands tipped off additional other meta-commands, listed in <orange<#f80>>, that may help you get your bearings. You should try one now." )};
         : return ;
      }
      : if (!tutorial_x_me_done) {
         : print {( tcue + (tutorial_x_me_cued ? xme + " is a standard command to start text adventures, to get your bearings. You'll want to type it now to continue the tutorial." : "Now you've looked into the meta-commands, you'll want to have a look at yourself. One convention of text adventures is that " + xme + " provides clues of who you are and what you're doing with relatively few keystrokes. So " + xme + " makes sense as your first in-world command.")  )} ;
         : set_true "tutorial_x_me_cued" ;
         : return ;
      }
      : if (!tutorial_inventory_done) {
         : print {( tcue + "Now you examined yourself with " + xme + ", another common command is to take inventory to verify you are carrying the item you found. This can be shortened with <I<#f80>>." )} ;
         : return;
      }
      : if (!tutorial_x_ask_done) {
         : print {( tcue + "Now that you verified you found something new, the last thing to do is to examine it with <X TASK<#0f0>>. Adventuron also recognizes <X ASK<#0f0>> and <X OOH<#0f0>>, but not <X TO<#0f0>>, as that's a reserved word." )} ;
         : return;
      }
      : if (!is_beside "cheering_voice") {
         : print {( tcue + "sometimes a game will indicate you should use one of your senses. While guess-the-verb is frowned upon in parser games, the lack of senses hopefully makes the guessing straightforward." )};
         : return;
      }
      : print {( tcue + "the \"Whoa! Guest!\" must be a hint. Perhaps you should determine which direction it wants you to go." )} ;
      : return ;
   }

   meta_about : subroutine {
      : print {( qt + " was made for the TALP 2025 jam after years of judging it. I always wanted to write an Adventuron game." )} ;
      : print {( "You can find specific thanks in the " + thx + " command." )} ;
      : set_true "tutorial_about_done" ;
   }
   meta_thanks : subroutine {
      : print "Thanks to TALP admins past and future.";
      : print "Thanks to Chris Ainsley (sp?) for creating Adventuron.";
      : print "Thanks to my testers.";
      : print "Thanks to you, for playing this game.";
      : gosub "check_additional_meta" ;
   }

   check_additional_meta : subroutine {
      : if (!tutorial_additional_metaverb_done) {
         : print {( tnote + "You found one specific meta-command. There are others, but I didn't want to force you to see them all. You can if you want. You just need to know that a robust text adventure takes steps to help the player not feel lost. This wasn't always the case back in the '80s, when disk space was much scarcer." )} ;
      }
      : set_true "tutorial_additional_metaverb_done";
   }

   verb_list : subroutine {
      : set_true "tutorial_verbs_done";
      : print {( "While " + qt + " requires you to guess some verbs as part of a puzzle, it doesn't require any nonstandard verbs to move around or manipulate objects or NPCs." )} ;
      : print "There are no diagonal directions, only N S E W U D and IN and OUT. You can use the long form of each direction, but it is not necessary." ;
      : print "You can <TAKE<#0f0>> an item, but there is no need to <DROP<#0f0>> it. You can also <X<#0f0>> it, which is short for <EXAMINE<#0f0>>." ;
      : print {( "No other standard commands are needed to win " + qt + ". However, " + meta + " will describe meta-commands, and <OPTIONS<#f80>> toggles options." )} ;
      : if (jump_commands_notified) {
         : print "To save keystrokes, you can jump around hub locations with BH/bold hub, FH/fate hills, QT/quickie trips, TQ/tricky quips." ;
      }
      : if (in_debug) {
         : print "In debug mode, <WINGAME<#0f0>> will win the game to open up footnotes." ;
      }
   }
   verb_meta_list : subroutine {
      : print {( abt + " gives info about the game." )} ;
      : print {( thx + " gives info about people who helped with the game. I usually use <CREDITS<#f80>>, but Adventuron reserves that for its own." )} ;
      : print {( "Adventuron also offers the standard parser meta-commands of <SAVE<#f80>>, <RESTORE<#f80>> and <QUIT<#f80>>, to save a game for later, come back to it, or quit." )} ;
      : print {( "Adventuron-specific " + meta + " commands include <TSTART<#f80>> and <TSTOP<#f80>>, which start and stop a transcript." )} ;
      : set_true "tutorial_additional_metaverb_done";
   }
   verb_options_list : subroutine {
      : print {( "Many games have options for sound, etc. " + qt + " uses <OPTIONS YES/Y<#00f>> and <OPTIONS NO/N<#00f>> to change them. <OPTION<#00f>> shows its status." )} ;
      : print {( "The main option is <TUTORIAL<#0f0>>" + (tutorial_done ? "but you've finished the tutorial" : ", though it's disabled once the tutorial is done" ) + "." )} ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = 9
      }
      system_messages {

   ask_new_game                                   = Would you like to restart {qt}?
   ask_quit                                       = Do you wish to quit {qt}?
   invalid_choice                                 = Please choose YES/Y or NO/N.
   post_quit = I hope you enjoyed the experience. Pressing any key will restart {qt}.
   you_cant_go_that_direction                     = {exitserr}
   unknown_verb                                   = Nothing comes up from that. {verbs} gives a list of basic standard verbs, though you will have a few to guess based on rules.
   }
      }
   }

## On_debug and on_startup call the INIT subroutine, but on_debug sets a flag or flags to allow for cheat commands

on_debug {
   : set_true "in_debug" ;
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

on_startup {
   : gosub "init" ;
   : gosub "tutorial_choice" ;
}

## on_tick is primarily used for the tutorial

on_tick {
   : if (is_at "nameless_lameness" && verb_is "i" && is_carried "ooh_task") {
      : set_true "tutorial_inventory_done" ;
   }
   : if (is_at "nameless_lameness" && is_carried "ooh_task" && !tutorial_x_ask_done && noun1_is "task" ) {
      : print "But the ring's probably not here. Where can you go? You feel you are stumbling around. You hear the silence shattered. Perhaps you can use one of your senses and pick up a clue." ;
      : set_true "tutorial_x_ask_done" ;
   }
   : if (in_tutorial) {
      : gosub "tutorial_progress" ;
   }
}

## on_describe is for moving around

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_pre_command {
   : match "west _" {
      : if (is_beside "cheering_voice") {
      : gosub "add_point" ;
      : print "The voice says \"Yes, yes. That is the way.\" The fogginess clears a bit, and as go west, a large, strong man waves to you. \"I'm Beery Thor. Nice to meet you. Got a few things to share with you. Just TALK to me...";
      : if (in_tutorial) {
         : print {( "Congratulations! You've finished the tutorial. Now on with the game. While the tutorial is over, you can still use " + hint + ", though <HELP<#f80>>, another often useful command, is reserved by Adventuron for general parser guidance." )};
      }
      : set_true "tutorial_done";
      : set_false "in_tutorial";
      : press_any_key;
      : goto "burst_face" ;
      : create "beery_thor" ;
      : redescribe ;
      }
   }
   : if (!examine_warn) {
      : match "examine *;look *" {
         : if (original "verb" == "examine") {
            : print {( otn + " to save keystrokes, you only need to type <X<#0f0>> (noun) to examine." )} ;
            : gosub "long_words_note" ;
            : set_true "examine_warn" ;
            : press_any_key ;
         }
      }
   }
   : if (!look_warn) {
      : match "look -" {
         : if (original "verb" == "look") {
            : print {( otn + " you only need to type <L<#0f0>> to look." )} ;
            : gosub "long_words_note" ;
            : set_true "look_warn" ;
            : press_any_key ;
            : redescribe ;
         }
      }
   }
   : if (!inventory_warn) {
      : match "inventory _" {
         : if (original "verb" == "inventory") {
            : print {( otn + " you only need to type <I<#0f0>> to take inventory." )} ;
            : gosub "long_words_note" ;
            : set_true "inventory_warn" ;
            : press_any_key ;
         }
      }
   }
}

on_command {
   : match "salesmen _"  {
      : if (is_at "nameless_lameness") {
         : print "Good guess, if this were an anagram game." ;
         }
      }
   : match "theory bore" {
      : if (is_beside "beery_thor" && bonus_point_theory_bore) {
         : print {( "Thor is " + (point_first_base ? "" : "likely ") + "bigger than you. Best not to overplay this." )} ;
      }
      : else {
        : print {( point_first_base ? "You snicker at what you've found, but then figure you better not do so to Thor's face." : "You worry Thor will be upset by this observation, but he booms \"Ha! Good one. I was sort of hoping you'd figure that. I actually don't mind people saying that. It implies I said something too smart. Better than being called a musclehead or whatever.\"" )} ;
       : set_true "bonus_point_theory_bore" ;
       : gosub "add_bonus" ;
    }
   }
   : match "turkey quest" {
      : if (bonus_point_turkey_quest) {
         : print "Hey, now. I'll poke fun at myself a bit, but repeating the joke might make things a bit stale." ;
         }
      : else {
         : print "Ah! Yes, you are in the spirit of things, here. Have a bonus point." ;
         : set_true "bonus_point_turkey_quest" ;
         : gosub "add_bonus";
      }
   }
   : if (in_debug) {
      : gosub "debug_commands" ;

   }
   : match "exits _" {
      : if (is_at "nameless_lameness") {
         : print "There's a puzzle here to start. The tutorial can walk you through it." ;
         }
      : else {
         : print "I should list exits here.";
      }
   }
   : match "verb _;verbs _" {
      : gosub "verb_list" ;
   }
   : match "about _" {
      : gosub "meta_about" ;
   }
   : match "thank _;thanks _" {
      : gosub "meta_thanks" ;
   }
   : match "drop _" {
      : print "While classic text adventures often required the player to use <DROP<#0f0>> due to inventory limits, this is often regarded as needless fiddling today. Text adventures often take steps to keep the player's inventory manageable so they can focus on puzzles, getting rid of items that are no longer necessary.";
   }
   : match "listen _; hear _" {
      : print "You don't hear anything right now." ;
   }
   : match "x ooh;x task;x ask" {
      : if (is_carried "ooh_task" && !tutorial_x_ask_done) {
         : mask {
         }
      }
   }
   : match "score _"  {
      : if (in_tutorial) {
         : print {( "Your <tutorial score<3>> is " + tutorial_score + " out of <" + max_tutorial_score + "<#ff0>>." )} ;
      }
      : print {( "Your <core score<4>> is " + score + " out of <" + max_score + "<#f00>>." )} ;
      : if ((has_visited "quickie_trips") && (has_visited "tricky_quips")) {
         : print {("You've solved " + points_left_side + " of 7 quickie trips and " + points_right_side + " of 7 tricky quips.")}
      }
      : print {( "Your <bonus score<#f80>> is " + bonus_score + " out of <" + max_bonus_score + "<#f00>>." )} ;
      }
   : match "option _;options _;opts _;opt _" {
      : gosub "options_list";
   }
   : match "notify _" {
      : gosub "options_notify";
   }
   : match "tutorial _" {
      : gosub "options_tutorial";
   }
   : match "meta _" {
      : gosub "verb_meta_list";
   }
}


assets {
   graphics {
      lameness_16 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEVSUlKtra2fn5+YmJimpqZgYGBnZ2dubm5ZWVl1dXWRkZGDg4NLS0u0tLR8fHyKioo9s6mBAAAB6ElEQVRYw+XYIZaDMBAGYHIELrACvQ6JRdUjse0RKmvpARBcAIHEcgFEZS0KzxXovja0ZCYzJARq9r8A3yOTySSeJyN8meGVPnym+SR45SaTPXMtZBKZtJsSP1O9c5xylrmMf/HemQA/CiCCgN8J0G4NEAuAWgsoICCZvn9/AQ5rAQMBuOkBuTvA0wJCqgQAIEGAOAZrYAoYDAFKCeQIcLcHCBUAtkHNAhIEiJ0BoAgCUIO3+QrMfkAKAYfVgH4OqCEg+zIgAICWWoEUlMAHUMrvnwyLUC0CY0C3OSDSArIvAAYdQPkBmi7gABAEINQBsozog+l6gG8BaNcAKh4AjwIAqHcH+DYAOAyQZyELOP87QMkBBAmIdIB2c4C/AGi4Rjirwq4jzwJ+CXy8CwflPNadRRsCxFaAlAaU3wXcScBRB/BJQMQAPjNxYQBg54FlQL09YHQAtBCQE/eS2VD4Bpw4wGwX9jsDLmaAhgNcdwWENoACAdDFoASAcdRtQ1dAQgOqVYCo4XaBpggYQMkAyMOwsQXgIqiITrQE6HWX42VA4ggAUzn5PIEAhSNAIAD/PkIDUC+kbqcXK0C9NwBN5b0tIKeGIrQCchsAgNC9TyBAYAHoqE6o7EP+jSqC7yMmALgG6AcovfgBhBvnaozG45IAAAAASUVORK5CYII=";
      tricky_quips : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABj0lEQVRYw+2WYY6EIAxGv+wegCts8AKb8f536g1YCqiIONtS+TdNJKiEPp9Fgf8/lvWI13ZxbeLt4DcBwRjfS3QH0LtmBug91Q2AVoAMoPdYNwBaAUKAznP1AdQChAAxHZQhFCAFWFYXVEFCAVIArwfwzwIsjqLXeLjgAqU2OMREnA2xw+cUe+DTOOT1MIDnBJwOgZMjnVAGoBBcAUgt3yY/C4A4D7cpGTd8oAbg27MBcp6A3M1AlYEwEQAbADgNOgCpJGYBpHLbCy/lPgGkImQuOcAqjGKANoD99bcG0iKMy1AYWgBOXIqQDgBXFWEulHkA1TJ0BYBCXnmhALipAOT2DxEKQHrzfK28gvQhmgGg+xR/AJ4G0O8HHga4id9v4wQfAPG/4LQNPXYbP1/dnat8VjlAf/4KwKt3xDqA/vQ1wJAC2AScAIYUwCbgDDCiADYBZ4ARBbAJaAAGFMAmoAEYUACbgBZArwA2AS2AXgFsAi4AagWwCbgAqBXAJuAKoFUAm4ArgFYBbAI6AEoFf6Nz3WvHUTc3AAAAAElFTkSuQmCC";
      quickie_trips : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABbklEQVRYw+2WUY6EIAxAm50DcIUNXmAy3v9OvUEXJKwCxWkpOj9TIwFDyuOJCPj3sax7vPLDtYrTzicBgj6eG6gHwD0zA3Cz6gBoBcgAuGl1ALQChADMvHgAtQAhQBgOlCEUIAVYVkeqQKEAKYDXA/i5AIsjhHCH1BSrFEpCpCA7VGIZbtrasenwNRnAuzhuBkgXuVhPE6a97WIn9NMBQtqUO5cbz8cAiJKSDgDdAbDV0xooASgulhsAgAoDh0VI6OQAqzAaAGhewbGN0rwaAHTnizC38RqAbYT/T5D7DK8GCBtR3oLqjahYhGkjugBAuRV/AWYD6M8DkwE68XwYE3wBxP+C4hi6nzZ+f9iTqzyrHIDPfwDw6hOxDoBPfwQYUgA2AQXAkAKwCSgBRhSATUAJMKIAbAIqgAEFYBNQAQwoAJuAGkCvAGwCagC9ArAJaADUCsAmoAFQKwCbgBZAqwBsAloArQKwCWAAlAr+ADhk6qlVb5HUAAAAAElFTkSuQmCC";
      fate_hills_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAjklEQVRYw+3Ryw2AMAyDYc+SAdh/HgboDAghXiUxl1q9uDf0legnoE0+cIADHOAABzjAAe/H2M9SXx/v+DAZoXBkXkyQOFKP4O8PdOSeTBD5FbB2F/otqhxF4OcjVM4C4mfAEAfx5xpljuIPdRN0DhZ4b1Hn4B5N7eB+7FDpID/oHCB1xOTjAAc4wAEO2AC0LOen6hBz4QAAAABJRU5ErkJggg==";
      fate_hills_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtElEQVRYw+2TOw7EMAhE5yx0NHvYdFwvB8gZVtkiCgScxqOsFJAb69mj5w/YHi60QAu0QAu0QAu0gJ/KXp96+XyOCx5EMDgyXiRQOFIuMt4/kSPnSQKJHwJrWBBvkcXhBNXKQ7C4FzBdqgQWhxNcxIprpHGcX0h/I0vgcYQvqvln5XGEFskDiByhRTVrFiZHaFFLAqgcfu7b5FrzeRCw8X4CDwI3ByBwyMP1bzfQT9ACLxT4AnDS/G/6PRvaAAAAAElFTkSuQmCC";
      masterplan_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAiUlEQVRYw+3VuRGAMAxEUfdfihI1QkVKFl+4ATPzk9VArIcu2gNHM8AAAwwwwAADDDDAAANwQMBxA9B8K4UAVOPpyZWFAE5acS2IXfwkAD13ja9XLwUyA70DWg2AAPEBKoqbgdsBvN6CNYTQHThrWNAdiNV8UXcgdw1UyoDWMPdfgGnBzEoCfosXzzjyF/ZYz+8AAAAASUVORK5CYII=";
      plasterman_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAhElEQVRYw+3UywkAIQyE4RRg/0XkYgtbgLCteA7CrGwJIvz7yNwlH0OiNTiWgAQkIAHLL88BAyQWcErj3w3MHShwA8PoHThQgKSOAwoK6FYK3IDRgNES8AmAL2YCwjfkvYC6SWCr46PKa4CAKXBHAeIBAQOcBsQDAGIB9yliH9GuJCABF2/W9E17T7/QAAAAAElFTkSuQmCC";
      malice_chap_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw8XWQY7DIAwFUEtedeU7TC5g1Rftdu5Uaa7CAUbKGChtIGwIg22lqZRF/eLyE+BrrORYLMiop+ri4A/CBIBZD0RBtANs7QAU0IzgbgbQxsgAiqgEpgCgfQ9gCWj676kagR3g1V8FLgBBChTbBwosHgCIvfMHrABVCinfffq6nsM5wO9P/rgA8AhgI8AxBCEngPL5cgxmAYXhBgDTCWxNCt9PojqHdxsAa1utDEAHgMYw7BQgvZDEBiAtgCgaWoCYAXQJegI47gUg/QXoAhAqGWgGsAywyWkEnQwMrsIZQNmRgHgBJO8JxQog54q74s5lO0BMgSOAIRUaAbbe7eeaWASXAIzH7sXAaAYos68LV0+g1/+ZjrNgMeCVvgQIzzz/ei2ungC+50Cfe2fDCXxCkF+IcD2H8B8pnMnhJOBbywsQl8ANbg94dB6GKwAyAhAjQO8RMAj4A7zBbqsBSRiFAAAAAElFTkSuQmCC";
      chalice_map_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAbklEQVRYw+3S0QkAMAxCQWdpNoj779YVIlRKQAeQ+3g4yjiadIlVgJoBOgAbgHwfQQCrADUFdAAmAGmIIAAYEpAiCACOBJQIAlgEKAXQARgApCWCAGBJQIggAHgSmEcQwBpAqYAO4DGANEXwHXABCrUdDkSf978AAAAASUVORK5CYII=";
      fell_short_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABLUlEQVRYw8XWQRKDIAwF0N9tFky5gGdPt5wKL+AZah3bWqsQSDJ+ddwovJGQEdN58i3OweQc1AT+BlQF7gbUBd4GCATOBkgEvgaIBK4GyASeBggFjgZIBX4GiAXmBpwRzgXGhoxwTCgJyoYxNgEWQjgglAXV7zC2LAPWydEkODUM6z22Gf4JGYIcDRetyjEjVnOfQmXkQUMIWUKoZRw0m9KEoOsLPYTQvTOsCMflKapPI8KnxVl1x2aCQjD3RxMC0N8ov60pbcICwvZ5/Ly9S0zlUOJ1FAWBQYUpHmUB0+tUEsqCWnj5ECoCiKAQLBNDRQCzSrDDdBB4OS4lEPF8XUtg5uRCEPyxvMsZZLUS6N1RVxP8FqKB4FWOLSvhtClb3mOmiwkJVoJk1WUVeQKxBKKctnM+FgAAAABJRU5ErkJggg==";
      shell_fort_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABHUlEQVRYw9XWQY6DMAwF0N+tF1G5wJzd65wqvQBnKBOVKbQB7NhWNB/YBXjCsQXm45TbtASzLpNy/YwrgdagFpwQVoH+O3gR3oJoAwSCYAMkglgDRAKR4fHjSPgWCAy9giahJQisBaSCOAPEAncDjgjHAmdDQWoTzgSehlIJqUE4F3gaUI9vwpWgbehrx1WwJxQI4j6SsBNMl7nPKbIjUpEQYpvynxLScAIwmvA34rymo5pgECzz0YVgKMNmNOVNWEDYrsfubmUo8+spBgKD+gVMv6eRYBLUT2AkgMhShvpimAhgNgk+MB0ErsdQAhEv11gCM+cQguCPZd3OIK9KoLejRhPiCqEgRG1HTSWCmlJzHzMNJmR4CbLXlDXkCVh7pDUhiROjAAAAAElFTkSuQmCC";
      boring_way_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyklEQVRYw+3UMQrDMAwFUO2GXkarDu1doBP0ENkFOkOTlAYvMbSk+oL2o8WL/ZCFKOChL927EB21nT2fEHEbCkNYhgIRxiZYuKqdMVJmwUPXrJLkWRij1DppQAl7kATX3npT5EeoztrwGwTXI4brQt/eb9iPaLoxoIRO1KAEn0xCEsGeBMcR/LUdDbigY7Kfswh+OglphAiLP2FK4Osi949yJYELEARP4AIEwRO4AEHwBC5AEDyBCxAET+ACBMETuABB8AQuQHizDQ/W01/UqIsntQAAAABJRU5ErkJggg==";
      warring_bay_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABlklEQVRYw+2WT4qDMBSHA9JFETyLEFwIhR5Csp1LucpmzuD+DV5gegg3XRTBLmY/zqsxkyf4B2NjCjO/xbdQ2nz8En2yxnvYTuvU/wovoFA2NUA5pcH2qQAwaOJxIwoIwwK8noWCAQu9KtTQxedGwMcnXB6n4Q8r9NswuRX7tNDH50YAY/hELCh8DzFxyVahwPWZV4W6wF0owrmH8iZxFQOtcBUUW2YEYAsQ1rMK95ZA5d7iwgabR8TkkNilBfVMzA3rqnlvIgN9K2reKoKt74ZyVuEmKwKd6ioqgs3fDLOfLEcZUegcREThVAFPAIVOdwIMnClwTMpzCp0sGWAxp4tVOoU8HUAn4RnFcjYoyDSn0BFJRuGqBqZ//jXEyAVXNTxX4WSvkEpcx0ApJILCXQ1a4dwSPHJucWEDhzU8uQVuqxDj2yAwUH8W8CwmcFeDUkhlTKASJyImcFeD2oijDChUDiKgcFbD71mg6F+OYgBnNfQKY0Ni7YiwrUEpjA6J1SPCsgalMDokVo8IyxoYf35eQGFlDT9WOnx8tQJVYQAAAABJRU5ErkJggg==";
      dirthome_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAy0lEQVRYw+3VMQ6DMAyF4XcFlJNY7M19uRZ7lxwgLUKiHYhkWy/JgD0gFqKPP0Hg7RhZbid51oLjmX1pzGsQQFqANAbQDOBKAGIAVwIwA3gSgBnAkwDUAI4EoAZwJAA3gD0BuAHsCUAOYE4AcgBzArADWBOgWkY0gGRa0gQoq2pyN0DWAUovQKk6QM2dAFkLKL22QAuojwGcX93v9jtjAWmV4/J3K88AXK0DMOsQxhYE4Dh5MvkQnoBZ/4LrVQMQAApgs4wOYFpyOuAD2wKbyFO+eg8AAAAASUVORK5CYII=";
      hurtdome_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABi0lEQVRYw8WXXY7FIAiFzw5Yf1c1W+G1Twwo/lRvJrk0Mr1pa65RP+EAFvLmgl4k76aID+W6uDL8DwBjb2UCMPChmQiAvnF9M6UDsN3Up+BsgLo2lmYiAJrzWwyEnYA3EWCvqZkIAO5CcPdz1AQxANoBJBOAHWASIb9T0/c5oBrCNEAOEPQBYjFYVlNDQMUHnwdpADARaCFi014RgcYiBU0QAahrwYTwoz91P1WqJAD2Uei1gNwvSQC6Ho0o7C+S0NkEAQn2rdM8hRoCOQDSt4r7uq6mPcR8gNCItulb5OZhjkgcIBADw/szQOs7DVB3SaMCeh2MngoQkEDzgyUC8jTQKkIWgGXgsnah0AckC2DOPvYoMbkE5lEAmgdSEyUtvSctQH8A4DwAu7tHMEznYwTTypcanI6iNEdkuTMAbPeuuv51XOQoWQAl+KjV4RoGUknOA0D6Aez5beiZiE4D9GW2r2PE4jAGsIzkYf0cAKzGxrNKHQfY5MaPrhwAbDU6GYC2v/MA+DMAQgC/9ff8qf8Ctc8AAAAASUVORK5CYII=";
      trim_goon_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABWElEQVRYw9XYMW7DMAwAQG4dNBj9Qld/LhsHD32Hp3yB8KKBn9JmZFIpKZaUtEEBGSARwgYyhSdKTGjD10Dwi9gGvgvOAYjZWQIclVsZMNf8LqWnJlAH0P0yAjhZO4DUgewAECPoA1r+KUqEJti0AL4Acv4ksAEQxSAEuZ2zAeTs2WAEiDV0AdIE38sd8JmvCmBNAPUAZwCYprYFIZgBwqQPkDMY9wMA8ADYlAD7XrqwboEzAHAPYAtA6oLbul77NtQAzD1glbAE3BLg2gFYE5AOQalAYBsAHWfAGQGOPugKoAHgBjgmojPPJiMAEkCZgcpMyNoAGYVrVpmK61OSUwNwHYOpO4GgU4E8kxP+BmCpihZA/o8RMfVByB/YI7AiwKNklLwfiJcEWBgXzQrk5T/F4A/BKMA/51+0AK3l/1j+QBucAFTDqdc07w3wj9uvApj/A/C7AX4Ap0wt9uYREV0AAAAASUVORK5CYII=";
      grim_tune_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA4UlEQVRYw+3UMQ7CMAwFUOOFlZ4Ay0sGbtelZ+EarDkEV2FlMmmngpQmtah+EfHc1k/J/yV1TMzMzfEtagDHO5ccIDbAvwCy+z0pbIAKAIMBTAIFMHUfgnwJPDUoAqQ7GwMBIp3dkQA9nMwe+wIs7HeksJwBsytjAU+DApSMhJCA8RHhugxuAhDityNYBMTvA2gahQGE0wlU/wY2AhASQCOAa0vgSGERoGAAT4DQwwAy9uA4DDBAmpDWh8oMrk9hJUB7IEB1fgMQgM5CiAGo7gdQ2L+6Bg3wc4BSBlenEA54AT/8ZRfOt2AhAAAAAElFTkSuQmCC";
      cake_trackers_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABN0lEQVRYw92VwW7DIBBEV/6D9c0nWv9xjvxkkXuuMjGx4xoSt4GxN2r3gkZC8GCGRT5eXPJ3AYBBpwJwtgUIiKUOU91GI4Awb4fp7PEisNTxAOF7s24kcFcQoB5BSo1fAfhTvIQhBSiNg1TvP57c+yWF1QQEgFPtvC1ASAEQCfwdAMwscNGG7nUWdDohWAJkr8BHBF0aksErSGKgt2cAwz6QIgxXBAfLTpgxDGsDzH/Dx8aHw0L45MrH9YF85Rko57IDmPUGl4EFGwCFCFKfgA0LCk0QMgF0CoRMAJ0CIRNQkfsqANzp1AL8Mp8FCF9nSvMA2Sdbqn8C6J8qkHq7pG5aqWYB3qSh9D8AwGfL6B1uAMroPSx4bwm9SwaU0DxA3/TrI5XqXQD6tl7zAM04T9tqzXfC4+oCbO+g76wTpBYAAAAASUVORK5CYII=";
      take_crackers_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAADNUlEQVRYw+WYzWoiQRDHB0TQ9utVBoqAsszuKwTE9xG8eBQ8ecs5JyHHXHwAD8KcBcF7mAdYyFZ199hV5cxknCTuwlYGpQxav/lXdVX3RM9/2aJ/AeApYnZvnz7oboKR398HI3/0Hoz83msw8gfHYOR3lsHIH74FI789C0YATyz+aoU+i7/boc/iZxn6LP52iz6Lfzigz+LP5+iz+KcT+iz+42MkBeiupAD9nRRglEkBelspwOAgBejMpQDDkxSgjQBCgM1KCrDfSQHeMynA61YKcDxIAZZzKcDbSQowQwBeEF0E4H4fAbg/QgDu9xCA+wME4H4HAbg/RADutwlAZAABRAYQQGQAAUQGEEBkAAFEBhBAZAABRAYKASjSbwYAaL8+AwA/bXR8KwWACQPIsNQ4QIz2GYAzAMWntzIAvMXJ9ymAXycJ6M0CTCH/uwDEEFcANFJgLBU4Q1BgCrnlAGtydAosBlPAvuYALwA/KgEWIGuARMhroAgg5gBOAYvBFLCvDgDDt+j7FQAAY74K8O4hrAKYPrirRAEHUK7AC/HihSI4gBQSio6vOcAC/3uDAqoGdAq0AnT77vIAQLGRAjzAwv/+uG4NuFWwhpIUaAXAKxDnAHj/kMLxmCZeAf/75avApQBEH6A88E4YFHALICiAJeAU8ClIKQFAScgBFl6AYgVmuQAPohOuW9CqAmCrgAjiUISpjc0Bll6A2jVARh9MGEBIgVZAL8MCgIUToHgVFKXAArQEQIUCqhF9kwL1W3Hq1+AX10D9VkwAaQIM4OZVQKNIr4IbFKAmQFcOcHMfcMPw0gf2YRqVKSBnQWIXYZqkScNOeGmEHiBsCIqHkZ4F4FsxNJwFYRRUKcAbkZoFrguhBA2nYRiGxQBXrVjPApt/i9FsP3ClgErB1TDSs8DKD9B8R6Rr4AMF9CyosycUfeBqT3jZEhYDXLViNQvq7Ip5DRRtSiebihQUtOIPt2TqXCBXQeW5wCgFjFLAqEZkFIBRAMYdTFwZIIBRACaqezZ1CjQ9m56h5Gz6rACMAjDqcGwUgFEARgEYdTg2CsAogLs/nqBHNPy0auihzX396L9/SvYHMAli1X/00+YAAAAASUVORK5CYII=";
      gift_shoals_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAACA0lEQVRYw83XMYvCMBQA4IcPB6lH/8LhTW7BrIJ/wSWzf0nc8i/ci3DQVVBwFKfuR+FwE3JpXtuktnJyzRHfZpW+ry8vLxW+gkXGKSAcgQcnlEWAgAQSMAxN0IJwBFoHDNkLnIduxyw8gb8QgYUiZOGr8CoEwNAEhsGrwF6jFwIO6LoVg1XBLUIYQuYWgcO+b/C/Bav3hHfC6fREeqRjmvZEb0LqjLnirsfjsRw5bszn7idofAc+ijCb1Q8XXS7JFk2WxcKmGY/H0EiMngmDwaBMwJLdOYno/nEcF1fNot/2BwUPlsUHgW0mU0kJLkUkhsBW6ipKQqz2Ks/dVnBq4YMwkhO5XlMRknPyRoShUGK5pE4ofnjI7XNX3eKFoLtxNtExNYQo2SXbnSEslI4rEWJ1U7lDaO5ND4SR3Mi1ITCAI0REGIqVWBKBKXVQ8X8RtIBJOZUjIhTrQAQmxFUMiQCgt4NqEbDcn/0JAHo7yHsCgN4OgghmHVoEakrsTeDlOrQIZh0eErCaT6w3Ie0kbPkzBPQzF3gnAbsJ2CAwP4TUIaAlcEtAS/jsHs89CdwS3uvJFKEl5HYsqLR9TvU/rFOH8FET6PZE+LaErqkA3CNhTU9VjCa0hGV1QmgCdhDQJ6GVwBCqPwpwd1L7OymrBHRSN19UzGh67hWuP6Gzy3+97MQPgAAKM+EiMO8AAAAASUVORK5CYII=";
      shift_goals_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABAklEQVRYw83VSw6DMAwEUEtzIUu+/4ptb5F9z9BWSUOoIJ/GMGSNxGM8OPKknWDxCI9gdEIKQYiEKFCwCW8BjxDnAGYXzNh1DHyC3YigLELgp3AXgoBNUNBT0Ht0gbigcxVpKZQhcAihDMHkMXvsv6P5n6AQPq9G/iemCUux5noJ2wfFMYTvrunh4BzC8dDrmRAIa1rwJJRDaHchXVA+hNRGlcbAKxk5EVaBoPjYKwjL8ZybB8nuTuh2xIcwTTjqG9oBSL6sfUPYhlElwGcvjOzhH4L6EJZq9yuNgNt2HPnwvcfmL+udJqgMbUk7gTB2SeESQk8WblUYGsE5BHSUf/e8ANvyi1Q9HJa2AAAAAElFTkSuQmCC";
      hunters_grill_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAnUlEQVRYhe3SQQqAIBAF0LEDBO5aRjdt58ozumzVGRKtIJUWJn8I5y9yCpLnL9qZQwIQgAA+vW0LU1+ArTD1BbCFqS8A+ydgBzSIAH4NcPQMHKB0yGTiCgekBcAB6j57WOGArAA0QF1njz0QOSwgK2AEA3wBZtXnJfwBWEBeQC1gqcucAvyjqo1aAQZuQOU2HwCvtwIQgAAAgGZhBxx22kRKCATdGwAAAABJRU5ErkJggg==";
      grunters_hill_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA/0lEQVRYhe2UQRKDMAhFOQs7Nh6WXa7XA3iGQlRM0mg3/nFDxnbSeV/mCaa0vrwoBVIgBVIgBVIgBfqf7Gu5jj/P6QfflEBwmvGLChBOU858f/+DnOZ8UgHEQ+AzBMYuongIjHx8CBS/E+A/BR7hFFy4FGVV24iqFE8szf0gTjEhEf+U4pdazpNRAccpGmSBImZYg4ZtI9FFHKcYkPiKgH2b6lEAyClekD5gimwj23qI5LQeR9Tw1iITU95jtQCUU5wJ95P6lu4TqgFG81aA92NyBLxFjOadgK0zUHvVF0BwahLnOZXaIRl6COFNB5p/KrFNGWeI4cQvrxRIgdcFvqhcaqJm8QFwAAAAAElFTkSuQmCC";
      fellowyield_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAkUlEQVRYhe3USwrAIAwEUO9/g8FcRHqCQKAXKtiPbroNgak0g5+V8FSSYuSUBKwJEJ0jASxAYPIFvABcYQJUxiQB1HQ3O8QCCF7AvREBotL7vZIA4+7zHSgAmAJiEXXgAyieRJSBuxEFtYF1ARrzAQn4AmDzpQHVefSdZQGoDVzAMxLAA7Q65n8BcUlAAhJAB5yoo1vNe3aQ+AAAAABJRU5ErkJggg==";
      yellowfield_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAMklEQVRYhe3OwQAAAAgAsfyVUggqjPtsBJuLjYCAgICAgICAgIBAHtiYgICAgICAQB543dVo4odGjOkAAAAASUVORK5CYII=";
      flyscore_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABXElEQVRYw+1VO7LDIAxU48L25WhyL1p31Knocyf7BhAwkZYYz6ui58wEzWQi2M1q+SlEPXp8RSxW0vkh6d1xdjMyOS6SPnzLpOF2ogomTXdqVRdrUX+GqhOmQf0Rqr5hpvpDqwpmqj9Ro5qcWqx/xqqcODVY/4hV+SMzr39oVMHM65+oUbUEAyQGHLGsIRggMeCJZcHM1YdGFcxcnQ1Uqt1AN2DxYmf0ASev2+DFjugDXl43mKm69AGogpmqSx+oVH/ewNV9uBvo0ePqWC+Oo4EY/uZ/HG8MxELJX/FE7eN4NhAZTJ8tRiaKgCpOeU4wOM6DLb5STZwNBJhLWdmjLUBADT83UGYSL6zaOBuI9U2RzdpEQA0/GijnFvdxKCNdnIpNIezPo+zWfk9XbZxqY3w5w35CLKCLU30yr8tZfvYmoIdTfTPkwMKJgBJeGwhv2XZopEr41/0b/ns8ARQDOnILAl1wAAAAAElFTkSuQmCC";
      skyfloor_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAtklEQVRYw+2VawrDQAiEvf9h1xto6yPGLKG/Om2hDmRJ9pvIsBpCNBqNRqPRaDQajf5e68vaA7C+9r+dk+2pX45Vb95B8gxwAFWxNaFWARy3FqhwgEqcrtyEcgvAEid0eNzAZwEop8VGmn0vAObPANIPpqRVAMvJVvYNjX7tBcCcls9onEt9Lmnw8GCeAbxL3Me1R0XyChDDEQkv3QLzFoDPtnUHmFNMqNS6Lnf9GcN/7m/4cT0AR9iROk1tXK0AAAAASUVORK5CYII=";
      trending_booth_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA5klEQVRYw+2UMQ6DMAxFc4CKKGuH+lRZcy+2zFWPwiGydI0aNiYXB5AQ7UJb5asiH4koGeLH9zcqgqX+FsC86lIWgIiY8mt6EgBgkUk0blEAnAEYB4BzQBLAPAMAMgCfgkRJvj6xeDFumMoCrPovAZAVBABzgLcOmOIOJCkuGTA5C3S0KUADLNXCckNoIABBc77i7pqIAej7h9S3LmIANDM30VrrFKYFemhHAKADYWilBQ6XgSmEDjYF8xi69dE+gOuHOk+LP3Vqc7RPXwJ4deu8ggC8+RVXgApQAQ4G8CtVgAoAB3gCmp0r2VJT7KYAAAAASUVORK5CYII=";
      bending_truth_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAsUlEQVRYw+3UsQ3DMAwEQK/ANoV/KrUaMHu5NcAJPqYcu0mAGEmgh2F+oULV4UVqmMUZTguw14ydAYTRCafBAXh3gMPc24GIaQBLA0+AqAEIG4jn32eAggb0W7AUEP2vuyBoIF4/9iBmQTIDDcAGkDbAtQFTALg9ASX/gHwLxIDx0FU/wFS1gKloAaWUizcwV/UMVPUW/AC4f5nboavPOS/gzVecgAQk4GKAfyUBCZADHjetW6UpE8lUAAAAAElFTkSuQmCC";
      roaring_pain_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAAyElEQVRYw+3VOw6DMBAE0CkjFz5zSp8iovaptk3jM8QmRWK8KEixdxLhEUICgebxWUAiBxPw6QCBf9u63ctiBxDk0ABrOw2AVwgAVLEG1O2XcE2WgG17jh1AmnZLgCjXrgAGfYjU9mB2B0Rvt7sDorfbAzbtOwAMAuR5D0cA9b+pF+BZRAOkdBzg8wnCBMBDwASUbzX1EQyZgv8CsKcgj8DZAej9EiDmuLJaYhOn7VKO+ya/DWizuLIQAf0zAROAnXE7GSBOADEPrgZwvE2iMzYAAAAASUVORK5CYII=";
      pouring_rain_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAAA1ElEQVRYw+2XMQ6DMAxFvRVxWrasHr1xhc4+YccGEimgOslA7SDhL4uF4T/lxUgA0ZrnUxvSDOSK1qwF8v8DuUJuSWkczvWBUi0fPsJEvSO6MrBX194ixEz2ClL29gRgrWC7nCUDFMApdgryYp7yCovZFkjtMQuZKDhcutKeAQwUSO3hAKCroNJeALQVoNwezBSg3G6nAOV2YwVx30MNQF9BKmoAaG9BB0BbQRdA/0PkClzB3RUo/5iMBuCYeXu8+Scz6+feAOwADvAsAH4yADvAwHwBk0EBGBu+j74AAAAASUVORK5CYII=";
      money_fountain_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABQElEQVRYw+2WTQ6EIAyFu+f+l5jNdN+EC5F4gNnMGKNofxAEjJkElkbK5+P1WXg9vGAADIABMADMp9/7VhHA+0aAzwD4F4DpnjUAmgACUv4Ecr4fgCiGAD6HFABcNwBRLDgkUVwjza+g7wUgigVE4h9sIJFz5E8u4xLAodhyHIETAAppIoR1j30Z1wBisRUAxZVrpIlman9yGdcAYrGE4BrpcGzUjzm1xQPacoYHduGjfmxbSxcYTae7YLfeph+nrMuBZLhEJCOjNv24U6uSMBcuthTbLu7UKoBcuGgzLJKtunGnVgGIPLACmAcCk6zFAypckv8EHghcsvou0OGSbD4eCFyy+hxIeMAIYMEkJWudB+RfUQewuBUhWftAwnPACGDhy5O26TGSGR4on0q6zIRG6hTPZV0AimbDMZYXA/wAWFjFQbCRejAAAAAASUVORK5CYII=";
      funny_mountain_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAoBAMAAADqP5nAAAAAMFBMVEUAAACAAAAAgACAgAAAAICAAIAAgICAgIDAwMD/AAAA/wD//wAAAP//AP8A//////97H7HEAAABkUlEQVRYw+2VsXKDMAyGPfqxPQoPdDVv4MuTMZU1U2ls6kbC0p2N1WaJBi5wf+DzJwvM51jt+/41eAsz9vftgbC/FiERjGow4xJGNZhxCaMahhDWjwMBXocAkAnuMP8jwkYkAGQNACCH1BFI2+FZsxjSRtjw7l8RAkghdQSy+zEB1tA7Iqb7NcBKQBq6X5hdCGkA7jMnAWkgIW2ENQ1AWW+WMC3puASkgYTUEch6889pSscQkAZuRNQQVtz24wRbgDqkjkDaDnXNVagR4dZa8fkwcoIv01BjtSOgZ/kbR/C4TEPaCPGn57n9ZbHTkiuUhZOQOkLZ+XkILI/gScgrI0TAC3TF9oFQzhwJgTLCqe1EQzhf7dsNpnscftdblWNGRA+hepxlECwzImoIETV+kTS4KgSKCFDf3QoSSMirIUQ8gkFovGNCoIZARlDqvOVCXgmB/SCcNbAz0qTBXBkHToMF6buhgBAFBNcgoUWDuSyBLtxKIa+AEEUE1yChQYO5LgEv3cohr/WZ+sN6I7wRSn0DBQfyymiAZ7AAAAAASUVORK5CYII=";
      qt_n : dynamic_graphic {( point_master_plan ? "masterplan_after" : "plasterman_before" )} ;
      qt_ne : dynamic_graphic {( point_chalice_map ? "chalice_map_after" : "malice_chap_before" )} ;
      qt_e : dynamic_graphic {( point_fell_short ? "fell_short_after" : "shell_fort_before" )} ;
      qt_se : dynamic_graphic {( point_take_crackers ? "take_crackers_after" : "cake_trackers_before" )} ;
      qt_sw : dynamic_graphic {( point_shift_goals ? "shift_goals_after" : "gift_shoals_before" )} ;
      qt_w : dynamic_graphic {( point_hunters_grill ? "hunters_grill_after" : "grunters_hill_before" )} ;
      qt_nw : dynamic_graphic {( point_fellow_yield ? "yellowfield_after" : "fellowyield_before" )} ;
      tq_n : dynamic_graphic {( point_fly_score ? "flyscore_after" : "skyfloor_before" )} ;
      tq_ne : dynamic_graphic {( point_bending_truth ? "bending_truth_after" : "trending_booth_before" )} ;
      tq_e : dynamic_graphic {( point_boring_way ? "boring_way_after" : "warring_bay_before" )} ;
      tq_se : dynamic_graphic {( point_dirt_home ? "dirthome_after" : "hurtdome_before" )} ;
      tq_sw : dynamic_graphic {( point_pouring_rain ? "pouring_rain_after" : "roaring_pain_before" )} ;
      tq_w : dynamic_graphic {( point_funny_mountain ? "funny_mountain_after" : "money_fountain_before" )} ;
      tq_nw : dynamic_graphic {( point_grim_tune ? "grim_tune_after" : "trim_goon_before" )} ;
      fate_hills : dynamic_graphic {( fh_travel_grail ? "fate_hills_after" : "fate_hills_before" )} ;
   }
}
