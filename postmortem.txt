====found POINTS verb a couple days into comp

The below contains spoilers for two bonus points.

But before I get to my stuff, I want to make a point. It looks like I wasn't the only entrant who had follow-up tutorial stuff. Others used it quite effectively. I think it's a good optional dimension to suggest for future TALPs.

I always wanted to enter TALP/TALJ, but I never really had an idea I liked. I didn't want the tutorial to be too on-the-nose, and I didn't want it to be too weird. And I didn't want to write something for the sake of writing it. Because I enjoyed how the original TALP eased me back into the community after COVID, even though I really didn't need tutorials for text games. It was just saying, well, here's an introduction, and don't worry if you don't really need to be introduced. It was a welcome back without the potential awkwardness of "HEY, WELCOME BACK, BIG GUY."

I also always wanted to write an Adventuron game, but for different reasons. It seemed to fit at least partially with things I wanted: to try graphics. To have colored text clue what you needed to act on. And, well, Inform is great, but I did want to give something new a try, and people frequently said it'd be nice to be able to highlight the words to focus on in my Inform games. Glulx only has so many styles.

But I didn't have anything to work with at first. Until I found a few Adventuron games where I said "I want to do that." Cobwebbed Dragon's The Interactive Adventurer's Tutorial Adventure(https://cobwebbeddragon.itch.io/interactive-adventurer-tutorial-adventure-talp) and BJ Best's Off-Season at the Dream Factory. The second uses colored text well, and the first, well, it seems straightforward, just giving you a room where you understand about each verb and concept. I remember being suspicious that such a straightforward approach could work. I was wrong. It gave me something to shoot for, though I couldn't copy the idea directly. What ideas were there?

Also, there was a discussion of what belonged in TALP and what did not. I made a comment about maybe being able to discuss fairness with the player, in addition to regular verbs, in a split-off topic (https://intfiction.org/t/philosophy-and-goals-of-text-adventure-literacy-jam/68726). Soon after, I had the idea that a prospective game might discuss theory, but I didn't want to be a theory bore. Oh, hi, Beery Thor! But he didn't really have a domain for a few months. Quirky Test as a name didn't pop up until December 2024. Test, quest, you see. My weekly notes suggest I had fun looking for proper names which might work around the new year, and Seth Denton's came from that. Which fit in another way.

I still didn't have an overarching plot, but I did know something about Beery Thor. He would discuss things that were potentially boring, and of course, the pitfall here is, when you try to lampshade being potentially boring, you risk completely not lampshading.

But I did want to do something, because I like the idea of a tutorial, with not just what to do but how or why. Could there be? I thought about how I had played text adventures, and the one thing I wish I knew was, well, some of these really aren't fair, because people haven't really hashed out rules, and it's okay to look through the walkthrough, especially now when there are more text adventures to look at. As a kid I was just glad to have any parser game, and I didn't care that I generally got rolled and didn't get very far. Or I needed InvisiClues. I didn't mind them. They were fun too! Even if they cost money.

That all is nostalgia. Over the years I remember writing walkthroughs for various text adventures and saying "Hey, wait, you know what? This really isn't fair!" And yes, I got them free on the Internet, and no, I no longer felt "you get what you pay for, and besides, you kind of pirated them even if the original authors can't profit, so be happy it's there." With IFComp it was a bit different. People knew their games were free, and they wrote said games to get attention. So how would a game be worthy of attention?

Too much abstract theory would drown the player, so I thought: what if I focused on Graham Nelson's Players' Bill of Rights? It may seem common with some people, but it was sort of groundbreaking for me. When I was young, I figured I was just not clever enough to figure what text adventures wanted me to do. I would stop being young and foolish one day. But as it turned out, the foolishness I lost was believing that (other) adults had things nailed down. Even programmers who want their games to be fair can fail.

But what was even more groundbreaking was, I thought, oh man there are all these rules that are going to restrict what I want to do, but they were also good guidelines to try and help me create good puzzles or say, that one's a bit too much, or that's just there to have something to do. (Those pop up in my first drafts.) You don't want to be hard and obscure just for being hard and obscure but of course, you don't also just want to hand a win to the player.

This all was the theory. I'd have a tutorial, but I'd have other stuff thrown in about what makes games fair, without too much navel-gazing. I wanted something relatively simple where people didn't have to twist their minds but would be glad things happened. I wanted fun examples where possible. This is where Seth Denton's fit in. "Don't kill the player without warning."

And even before TALP 2024 I was having trouble with two ideas for spoonerism games I wrote in Inform 7. I was pleased with Stale Trash (Twine, where you figured implied spoonerisms for humor value) and Roads of Liches, for EctoComp. I flamed out for EctoComp 2024 with another prospective Halloween spoonerism game -- I think I really wanted to do more. It must be about 8 years now that I really started keeping track of that in my daily and weekly files. I even have a shortcut to get there, Alt-s, and then I fill it in, with one spoonerism, a number, and another. The number relates to how good I think the spoonerism is, and often at the end I will also have a comment. Competent spoonerisms get priority when I sort them into my main spoonerism file.

This paid off when I wanted to search for books. So I might have "#book" to denote a promising book title for, say, a random bookshelf to page through for fun. I've done it before in other games. I was able to search the code for that to find a bunch of random books at the end in a bookshelf. Similarly, when I had a word that seemed to fit, I was able to search for it in my big document.

But I had no idea for a full game. It even took a while to find the first room's name, nameless lameness. Well, I didn't find it. It was an offshoot of "lameness" as a good guess in A Roiling Original, around nameless salesmen. But it served a good purpose. I could draw something dull and grey and vague to test Adventuron's graphics code, and I could also have the cop-out start of "you're not sure how you got here." It might not be how the game ultimately started, but it got me thinking, and it grew on me. It was a good start not just to my coding project but to my goal of designing at least a simple graphic for every room. It was an intimidating goal until I decided on writing one a day, with before and after states. Obviously I'd need to ramp up my drawing game. I spent a lot of time imagining what was there, or mock-drawing stuff, before digging in. I used a lot of copy-flip-paste for symmetrical stuff, and you can see a lot of repeating textures, too. Nameless Lameness's graphic had some technical stuff, too. I just saved a 16-color bitmap and then tweaked the palette to colors 555555, 5a5a5s, etc., to ffffff. I thought it'd be simple, but it turned out to be more time-intensive  than some of my later drawings.

I had a lot of fun writing the tutorial. I wanted it to be on rails without really restricting the reader, and I wanted to do something I hadn't seen in TALJ. One result was pushing the character through meta-verbs. I wanted to note there were ways to find help beyond HELP. I enjoyed thinking "Okay, what do I wish I would've known, starting out?" and even "Those Infocom manuals were fun, but they didn't have everything, and they couldn't foresee a world with so many free text adventures, people would need not to get bogged down in any one of them." I realized things might get sticky putting it on rails, but writing a tutorial really forced me to consider why and if I needed certain things. Sometimes it took a while to say I didn't or to articulate in-game why I did. But I think it was time well spent.

And it probably pushed me into what I think was a good first point-scoring puzzle. I wanted something a player could guess by accident if they got frustrated, but nothing trivial. So I looked for spoonerisms featuring directions. I had a lot of ideas for this, like West Bay, but I was surprised at the simple one (GO WEST) that worked. For a while I had a giant struggle trying to get the parser to only accept GO WEST but say "Yeah, W, but spell it out so it matches Whoa Guest." But Adventuron tried very hard to be understanding. I couldn't figure a way to make it obtuse, but then I realized having the first puzzle be welcoming wasn't such a bad thing. You could get the right answer, and then you could maybe figure it out later. Plus you could guess the compass direction too -- only so many wrong answers!

It also pushed me away from a puzzle that -- well, it served well as a placeholder. If you've read the footnotes, maybe you read about how the plain base was a bold hub to start, and someone said "hold, bub." I recognized this is a reach when I programmed it, but I still wanted an introduction that gave the player an idea of what was going on. I still hate killing puzzles that served their purpose to direct me to the real ones--it's not exactly firing a lifelong friend, but there is a clear sense of loss. I really liked the burst face/first base, though, and I wanted to build on that, and I didn't want Thor to be calling you for too long, and also re-reading Graham Nelson's Player's Bill of Rights, "hold bub" felt like giving the player something to do for its own sake. I also envisioned a player saying "but WHY?" -- and they would've had a point.

So at the end I put in the Pro Boor as a sort of foil. The Pro Boor is the sort that'll never enjoy text adventures due to the lack of shooty action. I don't begrudge people who enjoy shoot em ups, but on the other hand, I won't cede to people who say "text adventures are boring, unlike <my action genre here>."

All this happened with a week left but between the tutorial requirements and the Bill of Rights, I made that change the last really big one. Things get tense when you see a better way to do things a week before the comp deadline. But a few mornings in a row I woke up thinking, you know, I should change that puzzle. (No, really!) I generally give myself one big potential game-breaking change in the final week, and this was it. The result was a slightly confusing graphic--the original picture of Player Lights seemed to say "L P" (P on front cover, L on back, with you facing left) which Olaf Nowacki pointed out. I saw his point -- I was technically correct but could've avoided this all by making the book bigger and putting PL on the front and back cover. So this was a small amusing lesson in the risks of putting thing in in the last minute.

I also didn't want a super complicated map, but I also didn't want it to be too simple. At first I had Quickie Trips and Tricky Quips as location names, but they were a bit didactic and abstract, even if they organized well to "no tricky spelling" and "tricky spelling." So I figured I'd see if I could do anything else with west, and anything with east. And I repurposed the old names to signs in Plain Base, so it looked more welcoming.

[details="finding the puzzle fodder"]
Someone asked, okay, so how did you come up with this? And I go back to Jerry Seinfeld advice, about trying one thing a day, and then putting a check mark up there. It isn't just about saying, okay, I did something today, but also saying, I'm going to put aside this time, and I'm going to say, is this good? Could I have done better? What synonyms work? And of course I had a python script where `spo.py p sc` looks for words starting with p which, when you replace p with sc, make a word too. That picked off a fe4w.

I probably got the easier ones first where I wasn't quite pleased with them. I didn't want to be odd for the sake of being odd, but I also didn't want to replicate ones people might know too well. I decided to let things fall were they may, and if there is something simple and nice that work, I put it in. 

It also helped to have some cues, such as the sort of thing you did in an adventure game. So there might be a map, and there might be a plan, and you can see stuff that rhymes with that. And with mountains, the rhyme with fountains suggested itself, and I had a location. They eventually added up. I figured I didn't want too many of them, and having the two hubs with regular and diagonal directions seem to work well. From there, it wasn't too far of a jump to say, okay, what can I do with these?

Of course I had to organize the puzzles somehow. Have them build. For Trail Stash, I had 12 rooms with 12 items and each item took out a different room, and they could be solved in any order. This might be a nuisance here, with all the directions, so I wanted things to be more guided. But what could rely on what?

The NCAA basketball tournament having finished recently gave me an idea. The hub spokes gave 14 puzzles, and I'd put the hill (originally Fate Hills but again this was a case of a puzzle I knew was a placeholder so I'd have a map and way through the game) in so that the map was better connected. I wanted the hill to the final puzzle. The 15 puzzles suggested a knockout bracket but instead of wins and losses you combined stuff.

I didn't worry too much about what puzzles did what, though I knew I wanted a treasure in the hill. That suggested a map, and so I started thinking of treasures. Chalice came to mind. Then I figured, what could go with a map? Something to interpret it. A plan.

From then on I just tried to find a good variety of puzzles. I could throw in some nonsense narrative about how they combined. I took a while to figure what the treasure would be: something like a chalice but not quite? Grail/trail would mean a path opened beyond Thor. So I went with that.

Some of the spillover resulted in bonus points. Mostly stuff I wanted to fit in somewhere, but I had already put the puzzles down. So I made up some bonus points when I could. Things got a bit jagged, as I often didn't have an item after you scored a point. And originally the only item that gave bonus points was the Pacing Rations.

In fact a week or two before the deadline I had four bonus points: Thor, the rations, the game title, and Seth Denton's. But once I started adding them I found it hard to stop. I wound up with 17 total, and in fact, I messed up writing in a couple. The trial pics have two bonus points which will be shunted off to an achievement, because each one is a bit specious. They'll be replaced by flipping "no greed" (some testers tried the command I intended) and also something that is in one of the graphics but not defined as an object.
[/details]

Side point: you may notice the number 17 popping up a lot. The number of rules in the Bill, the bonus points, the footnote. I added 17 to a graphic, later. That's a sort of Easter egg, because the number 17 is a sort of in-joke at a summer math program I attended at Hampshire University. I'd like to think this is the sort of thing it inspired, even if it's not hard-core mathy stuff.

As for coding? TLDR: the simple stuff took no energy, but the complex stuff took extra. Adventuron wasn't meant to cater to programming games like mine, and it should not have been. It helps people build good games quickly. But I had trouble resolving Adventuron's web interface with wanting to put things in source control, which helps filter out the worst of my coding mistakes. Eventually I figured it out: have one browser dedicated only to Adventuron, with tabs for the classroom https://adventuron.io/classroom/, user guide https://adventuron.io/documentation/ and cookbook https://adventuron.io/documentation/cookbook.html.

Soon after, I got in the habit of ctrl-a, ctrl-c, ctrl-v to commit differences to source control. While the extra step was frustrating, especially when I needed to walk back a change, but I got used to it and even started making branches of features for post-comp release, which also required reversing this procedure.

Chris Ainsley's documentation was quite good--when I missed stuff I often realize I wasn't looking in the right place, or I wasn't paying attention. Given that he's only one person, he's done a great job and I know it's been at considerable personal sacrifice. I also used Manonamora's Not Another Sad Meal and Christopher Merriner's Custard and Mustard to say "hey! I like this! I want to borrow it!" So I was able to take care of a lot of simple things. I found dynamic strings sticky at first, but I quickly got used to them. But I didn't realize Adventuron had a concept of arrays until later.

Of course, I missed some obvious stuff because I leaned too much on what I'd like to do. The big stuff was the game information/metadata at the top of the file. I had a nagging feeling I should get a UUID or IFID, but it's one thing I never searched for in the documentation, because it just wasn't fun to think about. I didn't ask about it, either. But it would have been easy to add. The funny thing here is that I surely saw it looking through sample code. And I was confused why my game compiled as "untitled_(date).html." Sometimes the warning lights are there and you fly through them. Garry Francis pointed out that metadata was missing, and then when I updated it, my script pulled over the latest "untitled-*.html" from downloads, which was still the old version instead of the new file "quirkytest-(date).html" which was the new name once I added adequate metadata. So I had to re-update.

Garry also alerted me to collections, so I thank him for that. Again, I searched for "array" in the text but not "list." This simplified my code in many places. In particular, it helped collapse some giant if-else code for talking to Thor with ASK 1, ASK 2, etc., as well as for the achievement asking him about everything. Of course, I still let a bug slip through where I basically assumed a list index started with 1 and not 0, so the simpler code was broken. (I thought I programmer-tested it, honest! And I found a similar bug with footnotes when I converted them to a list.) Hooray for in-comp updates.

I also had a big problem assuming X (ADJECTIVE) would examine ADJECTIVE NOUN, e.g. the item pacing_rations would get examined by X PACING or X RATIONS. After all, Adventuron knew X RATION mapped to X RATIONS! This wasn't the case, and it took a long time to figure out. The thing is, aliases might do too much, e.g. `: noun / aliases = [master, plan]` so you can X MASTER or X PLAN would allow MASTER MASTER as a solution as well as MASTER PLAN. Eventually I saw the simple solution of a sentence substitution.

Comparing Quirky Test to Roads of Liches, it strikes me that on the one hand, Adventuron is simpler to write to get started. But I really like how Inform lets you reuse code and allow for complex objects. I used to say I hated object oriented program, but for Adventuron it would've been nice to define a bonus_point object. But because Adventuron doesn't allow for complex structures, I wound up cutting and pasting a lot of code. Which ... well, I always wanted to write a game in Adventuron. But not being able to reuse code puts a dent in a sequel.

Adventuron does do simple things like save variables for the next go round (scope="survivor") that are very tricky in Inform. However, it doesn't save collections/arrays -- unless you move the arrays to individual variables. This is, technically, bad style. But I wanted to use arrays to make footnotes easier to debug, so I had a big long read (to start) and  write (to end) function with "footnote_1_boolean = footnote_list[0]" and "footnote_list[0] = footnote_1_boolean". Then I realized I could do this for bonus points if the player wanted to get them all, but no way was I writing an in-comp update. It's still worth it, though, but it's one of those things I didn't think about before release. On the one hand, it's cool to still be learning and say "I can do that." On the other hand, it's a bit murky.

I found other stuff as the comp went on -- I really enjoyed tweaking how I colored text.

Very late in the comp I discovered zones, which are collections of locations and the equivalent of Inform's regions. I wrongly assumed there wasn't any such thing. But this helped me cut down code like `if is_at hub_w_n || is_at hub_w_ne`. I should read through the documentation top to bottom now I'm more comfortable. Something else will fall out.
[/details]

[details="drawing stuff"]
The images, I also decided to draw one a day, and I did not want to be too worried if I didn't like something, or if I couldn't fit a detail in.

I'm happy with them, and I hope they're not too flippant, and I recognize they're not high art, but I think Adventuron was good for encouraging me to do this, because during my playthroughs, I felt sad when a room didn't have graphics, and in general, with Adventuron, I didn't try to do too much. Just draw something to get the point across. Plus I knew from experience I just liked having graphics in games, and they didn't have to be super detailed.

And I think I did, and I managed to proofread what I did and tweak it, until I had something that I really liked. Google images was big for this, even just for saying, okay, here's a simple example of what you want, and just imitate it (MSPaint in one window, browser in another) and see how well it works. 

I'd seen a lot of other games where the location picture changed as you saw things in Adventuron, and this seemed ideal here, since radical changes might occur with each point-scoring command. I really liked how I didn't have to organize files, either -- Base64 embeddings got tacked on at the end. It felt like magic to me to see the actual change, though I'd done similar stuff in Twine. Here, it was simple.

Of course, for some of the places, I only had very basic changes, and for the plain base, which was a rather late entrant in terms of finalizing its name (it was the bold hub for a while,) I didn't have any change at all. But I enjoyed the process. I also realized some pictures contradicted the text, but hey, nobody hammered me for that, so, all good.

I knew there was more I wanted to do. Transparent graphic overlays were something that didn't make it into the initial comp version. Here I remember Grizel's Sentient Beings with two rooms that had twelve containers -- empty or full, depending on if you solved a puzzle. I knew immediately that there couldn't be a graphic for each possible state, because that would be 4096 total graphics. So I knew it had to be doable, but I shelved it as probably too tough.

For some reason I was just happy enough to have any graphic changes, and I was shocked to read that transparent overlays were relatively simple and well-documented. So I was able to put check marks by hub exits you did. While I was pleased to have the game block you from places you won, and I liked seeing the "exits" line shrink as you solved areas, I realized a graphic helped it come alive a bit.
[/details]

And on the non-technical side, just having graphics that changed made it more fun to test. With Inform, it's technically powerful, and you can type "test win-with-bonus" or "test win-min-points" to verify your suggested walkthroughs aren't broken. Adventuron doesn't have this, as it's a big ask from someone who is writing it solo and also hasn't had the years Inform has had. So I had to test things manually, and the testing experience was enjoyable even though it wasn't automated! And perhaps knowing I couldn't automate tests guarded me from feeling I had to do anything too technically extravagant.

I'm proud of one other sneaky bit I figured in Adventuron. It has on_startup and on_debug but the second overrides the first, even in release mode. I worried I'd send a debug build live, but fortunately I found a clever workaround. https://intfiction.org/t/debug-cheat-version-of-adventuron-without-on-debug/75022

Eventually I got comfortable enough with Adventuron that I was able to tweak and test stuff in-comp. But a lot went into dev branches in GitHub, for post-comp. It's something I never really did before, but I was still coming up with ideas, because as usual the rush to hit the deadline meant I just needed to put stuff in there. I think there's still a lot of newness for me with Adventuron and saying "oh, I can try or do that."
